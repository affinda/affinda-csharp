// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;

namespace affinda.Models
{
    /// <summary> The PathsYzn84IReformattedResumesPostRequestbodyContentMultipartFormDataSchema. </summary>
    internal partial class PathsYzn84IReformattedResumesPostRequestbodyContentMultipartFormDataSchema
    {
        /// <summary> Initializes a new instance of PathsYzn84IReformattedResumesPostRequestbodyContentMultipartFormDataSchema. </summary>
        /// <param name="resumeFormat"> Identifier of the format used. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resumeFormat"/> is null. </exception>
        internal PathsYzn84IReformattedResumesPostRequestbodyContentMultipartFormDataSchema(string resumeFormat)
        {
            if (resumeFormat == null)
            {
                throw new ArgumentNullException(nameof(resumeFormat));
            }

            ResumeFormat = resumeFormat;
        }

        /// <summary> File as binary data blob. </summary>
        public Stream File { get; }
        /// <summary> Unique identifier for the resume. If creating a document and left blank, one will be automatically generated. </summary>
        public string Identifier { get; }
        /// <summary> Optional filename of the file. </summary>
        public string FileName { get; }
        /// <summary> URL to file to download and process. </summary>
        public string Url { get; }
        /// <summary> Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for Chinese. </summary>
        public string ResumeLanguage { get; }
        /// <summary> Identifier of the format used. </summary>
        public string ResumeFormat { get; }
        /// <summary> If &quot;true&quot; (default), will return a response only after processing has completed. If &quot;false&quot;, will return an empty data object which can be polled at the GET endpoint until processing is complete. </summary>
        public string Wait { get; }
    }
}
