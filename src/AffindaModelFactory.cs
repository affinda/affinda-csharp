// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace affinda.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AffindaModelFactory
    {
        /// <summary> Initializes a new instance of GetAllDocumentsResults. </summary>
        /// <param name="count"></param>
        /// <param name="next"></param>
        /// <param name="previous"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.GetAllDocumentsResults"/> instance for mocking. </returns>
        public static GetAllDocumentsResults GetAllDocumentsResults(int? count = null, Uri next = null, Uri previous = null, IEnumerable<Meta> results = null)
        {
            results ??= new List<Meta>();

            return new GetAllDocumentsResults(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Meta. </summary>
        /// <param name="identifier"> Unique identifier for the resume. If creating a document and left blank, one will be automatically generated. </param>
        /// <param name="fileName"> Optional filename of the file. </param>
        /// <param name="ready"> If true, the document has finished processing. Particularly useful if an endpoint request specified wait=False, when polling use this variable to determine when to stop polling. </param>
        /// <param name="readyDt"> The datetime when the document was ready. </param>
        /// <param name="failed"> If true, some exception was raised during processing. Check the &apos;error&apos; field of the main return object. </param>
        /// <param name="expiryTime"> The date/time in ISO-8601 format when the resume will be automatically deleted.  Defaults to no expiry. </param>
        /// <returns> A new <see cref="Models.Meta"/> instance for mocking. </returns>
        public static Meta Meta(string identifier = null, string fileName = null, bool ready = default, DateTimeOffset? readyDt = null, bool failed = default, string expiryTime = null)
        {
            return new Meta(identifier, fileName, ready, readyDt, failed, expiryTime);
        }

        /// <summary> Initializes a new instance of ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema. </summary>
        /// <param name="detail"></param>
        /// <param name="statusCode"></param>
        /// <returns> A new <see cref="Models.ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(string detail = null, int? statusCode = null)
        {
            return new ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(detail, statusCode);
        }

        /// <summary> Initializes a new instance of Resume. </summary>
        /// <param name="data"></param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Models.Resume"/> instance for mocking. </returns>
        public static Resume Resume(ResumeData data = null, Meta meta = null, Error error = null)
        {
            return new Resume(data, meta, error);
        }

        /// <summary> Initializes a new instance of ResumeData. </summary>
        /// <param name="name"></param>
        /// <param name="phoneNumbers"></param>
        /// <param name="websites"></param>
        /// <param name="emails"></param>
        /// <param name="dateOfBirth"></param>
        /// <param name="location"></param>
        /// <param name="objective"></param>
        /// <param name="languages"></param>
        /// <param name="summary"></param>
        /// <param name="totalYearsExperience"></param>
        /// <param name="headShot"> base64 encoded string. </param>
        /// <param name="education"></param>
        /// <param name="workExperience"></param>
        /// <param name="skills"></param>
        /// <param name="certifications"></param>
        /// <param name="publications"></param>
        /// <param name="referees"></param>
        /// <param name="sections"></param>
        /// <param name="isResumeProbability"> Probability that the given document is a resume. Values below 30 suggest that the resume is not a resume. </param>
        /// <param name="rawText"> All of the raw text of the parsed resume, example is shortened for readiblity. </param>
        /// <returns> A new <see cref="Models.ResumeData"/> instance for mocking. </returns>
        public static ResumeData ResumeData(ResumeDataName name = null, IEnumerable<string> phoneNumbers = null, IEnumerable<string> websites = null, IEnumerable<string> emails = null, string dateOfBirth = null, Location location = null, string objective = null, IEnumerable<string> languages = null, string summary = null, int? totalYearsExperience = null, Stream headShot = null, IEnumerable<ResumeDataEducationItem> education = null, IEnumerable<ResumeDataWorkExperienceItem> workExperience = null, IEnumerable<ResumeDataSkillsItem> skills = null, IEnumerable<string> certifications = null, IEnumerable<string> publications = null, IEnumerable<ResumeDataRefereesItem> referees = null, IEnumerable<ResumeDataSectionsItem> sections = null, int? isResumeProbability = null, string rawText = null)
        {
            phoneNumbers ??= new List<string>();
            websites ??= new List<string>();
            emails ??= new List<string>();
            languages ??= new List<string>();
            education ??= new List<ResumeDataEducationItem>();
            workExperience ??= new List<ResumeDataWorkExperienceItem>();
            skills ??= new List<ResumeDataSkillsItem>();
            certifications ??= new List<string>();
            publications ??= new List<string>();
            referees ??= new List<ResumeDataRefereesItem>();
            sections ??= new List<ResumeDataSectionsItem>();

            return new ResumeData(name, phoneNumbers?.ToList(), websites?.ToList(), emails?.ToList(), dateOfBirth, location, objective, languages?.ToList(), summary, totalYearsExperience, headShot, education?.ToList(), workExperience?.ToList(), skills?.ToList(), certifications?.ToList(), publications?.ToList(), referees?.ToList(), sections?.ToList(), isResumeProbability, rawText);
        }

        /// <summary> Initializes a new instance of ResumeDataName. </summary>
        /// <param name="raw"></param>
        /// <param name="first"></param>
        /// <param name="last"></param>
        /// <param name="middle"></param>
        /// <param name="title"></param>
        /// <returns> A new <see cref="Models.ResumeDataName"/> instance for mocking. </returns>
        public static ResumeDataName ResumeDataName(string raw = null, string first = null, string last = null, string middle = null, string title = null)
        {
            return new ResumeDataName(raw, first, last, middle, title);
        }

        /// <summary> Initializes a new instance of Location. </summary>
        /// <param name="formatted"></param>
        /// <param name="postalCode"></param>
        /// <param name="state"></param>
        /// <param name="country"></param>
        /// <param name="rawInput"></param>
        /// <param name="streetNumber"></param>
        /// <param name="street"></param>
        /// <param name="apartmentNumber"></param>
        /// <param name="city"></param>
        /// <returns> A new <see cref="Models.Location"/> instance for mocking. </returns>
        public static Location Location(string formatted = null, string postalCode = null, string state = null, string country = null, string rawInput = null, string streetNumber = null, string street = null, string apartmentNumber = null, string city = null)
        {
            return new Location(formatted, postalCode, state, country, rawInput, streetNumber, street, apartmentNumber, city);
        }

        /// <summary> Initializes a new instance of ResumeDataEducationItem. </summary>
        /// <param name="organization"></param>
        /// <param name="accreditation"></param>
        /// <param name="grade"></param>
        /// <param name="location"></param>
        /// <param name="dates"></param>
        /// <returns> A new <see cref="Models.ResumeDataEducationItem"/> instance for mocking. </returns>
        public static ResumeDataEducationItem ResumeDataEducationItem(string organization = null, ResumeDataEducationItemAccreditation accreditation = null, ResumeDataEducationItemGrade grade = null, Location location = null, ResumeDataEducationItemDates dates = null)
        {
            return new ResumeDataEducationItem(organization, accreditation, grade, location, dates);
        }

        /// <summary> Initializes a new instance of ResumeDataEducationItemAccreditation. </summary>
        /// <param name="education"></param>
        /// <param name="inputStr"></param>
        /// <param name="matchStr"></param>
        /// <param name="educationLevel"></param>
        /// <returns> A new <see cref="Models.ResumeDataEducationItemAccreditation"/> instance for mocking. </returns>
        public static ResumeDataEducationItemAccreditation ResumeDataEducationItemAccreditation(string education = null, string inputStr = null, string matchStr = null, string educationLevel = null)
        {
            return new ResumeDataEducationItemAccreditation(education, inputStr, matchStr, educationLevel);
        }

        /// <summary> Initializes a new instance of ResumeDataEducationItemGrade. </summary>
        /// <param name="raw"></param>
        /// <param name="metric"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeDataEducationItemGrade"/> instance for mocking. </returns>
        public static ResumeDataEducationItemGrade ResumeDataEducationItemGrade(string raw = null, string metric = null, string value = null)
        {
            return new ResumeDataEducationItemGrade(raw, metric, value);
        }

        /// <summary> Initializes a new instance of ResumeDataEducationItemDates. </summary>
        /// <param name="completionDate"></param>
        /// <param name="isCurrent"></param>
        /// <param name="startDate"></param>
        /// <returns> A new <see cref="Models.ResumeDataEducationItemDates"/> instance for mocking. </returns>
        public static ResumeDataEducationItemDates ResumeDataEducationItemDates(DateTimeOffset? completionDate = null, bool? isCurrent = null, DateTimeOffset? startDate = null)
        {
            return new ResumeDataEducationItemDates(completionDate, isCurrent, startDate);
        }

        /// <summary> Initializes a new instance of ResumeDataWorkExperienceItem. </summary>
        /// <param name="jobTitle"></param>
        /// <param name="organization"></param>
        /// <param name="location"></param>
        /// <param name="jobDescription"></param>
        /// <param name="dates"></param>
        /// <returns> A new <see cref="Models.ResumeDataWorkExperienceItem"/> instance for mocking. </returns>
        public static ResumeDataWorkExperienceItem ResumeDataWorkExperienceItem(string jobTitle = null, string organization = null, Location location = null, string jobDescription = null, ResumeDataWorkExperienceItemDates dates = null)
        {
            return new ResumeDataWorkExperienceItem(jobTitle, organization, location, jobDescription, dates);
        }

        /// <summary> Initializes a new instance of ResumeDataWorkExperienceItemDates. </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="monthsInPosition"></param>
        /// <param name="isCurrent"></param>
        /// <returns> A new <see cref="Models.ResumeDataWorkExperienceItemDates"/> instance for mocking. </returns>
        public static ResumeDataWorkExperienceItemDates ResumeDataWorkExperienceItemDates(DateTimeOffset? startDate = null, DateTimeOffset? endDate = null, int? monthsInPosition = null, bool? isCurrent = null)
        {
            return new ResumeDataWorkExperienceItemDates(startDate, endDate, monthsInPosition, isCurrent);
        }

        /// <summary> Initializes a new instance of ResumeDataSkillsItem. </summary>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Models.ResumeDataSkillsItem"/> instance for mocking. </returns>
        public static ResumeDataSkillsItem ResumeDataSkillsItem(string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, IEnumerable<ResumeDataSkillsPropertiesItemsItem> sources = null)
        {
            sources ??= new List<ResumeDataSkillsPropertiesItemsItem>();

            return new ResumeDataSkillsItem(name, lastUsed, numberOfMonths, type, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeDataSkillsPropertiesItemsItem. </summary>
        /// <param name="section"></param>
        /// <param name="position"></param>
        /// <returns> A new <see cref="Models.ResumeDataSkillsPropertiesItemsItem"/> instance for mocking. </returns>
        public static ResumeDataSkillsPropertiesItemsItem ResumeDataSkillsPropertiesItemsItem(string section = null, int? position = null)
        {
            return new ResumeDataSkillsPropertiesItemsItem(section, position);
        }

        /// <summary> Initializes a new instance of ResumeDataRefereesItem. </summary>
        /// <param name="name"></param>
        /// <param name="text"></param>
        /// <param name="email"></param>
        /// <param name="number"></param>
        /// <returns> A new <see cref="Models.ResumeDataRefereesItem"/> instance for mocking. </returns>
        public static ResumeDataRefereesItem ResumeDataRefereesItem(string name = null, string text = null, string email = null, string number = null)
        {
            return new ResumeDataRefereesItem(name, text, email, number);
        }

        /// <summary> Initializes a new instance of ResumeDataSectionsItem. </summary>
        /// <param name="sectionType"></param>
        /// <param name="bbox"></param>
        /// <param name="pageIndex"></param>
        /// <param name="text"></param>
        /// <returns> A new <see cref="Models.ResumeDataSectionsItem"/> instance for mocking. </returns>
        public static ResumeDataSectionsItem ResumeDataSectionsItem(string sectionType = null, IEnumerable<float> bbox = null, int? pageIndex = null, string text = null)
        {
            bbox ??= new List<float>();

            return new ResumeDataSectionsItem(sectionType, bbox?.ToList(), pageIndex, text);
        }

        /// <summary> Initializes a new instance of Error. </summary>
        /// <param name="errorCode"></param>
        /// <param name="errorDetail"></param>
        /// <returns> A new <see cref="Models.Error"/> instance for mocking. </returns>
        public static Error Error(string errorCode = null, string errorDetail = null)
        {
            return new Error(errorCode, errorDetail);
        }

        /// <summary> Initializes a new instance of Components8Sxs33Responses400ErrorContentApplicationJsonSchema. </summary>
        /// <param name="statusCode"></param>
        /// <param name="detail"></param>
        /// <returns> A new <see cref="Models.Components8Sxs33Responses400ErrorContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Components8Sxs33Responses400ErrorContentApplicationJsonSchema Components8Sxs33Responses400ErrorContentApplicationJsonSchema(int? statusCode = null, string detail = null)
        {
            return new Components8Sxs33Responses400ErrorContentApplicationJsonSchema(statusCode, detail);
        }

        /// <summary> Initializes a new instance of ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema. </summary>
        /// <param name="detail"></param>
        /// <param name="statusCode"></param>
        /// <returns> A new <see cref="Models.ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(string detail = null, int? statusCode = null)
        {
            return new ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(detail, statusCode);
        }

        /// <summary> Initializes a new instance of RedactedResume. </summary>
        /// <param name="data"></param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Models.RedactedResume"/> instance for mocking. </returns>
        public static RedactedResume RedactedResume(RedactedResumeData data = null, Meta meta = null, Error error = null)
        {
            return new RedactedResume(data, meta, error);
        }

        /// <summary> Initializes a new instance of RedactedResumeData. </summary>
        /// <param name="redactedPdf"></param>
        /// <returns> A new <see cref="Models.RedactedResumeData"/> instance for mocking. </returns>
        public static RedactedResumeData RedactedResumeData(Uri redactedPdf = null)
        {
            return new RedactedResumeData(redactedPdf);
        }

        /// <summary> Initializes a new instance of Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"></param>
        /// <param name="next"></param>
        /// <param name="previous"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(int? count = null, Uri next = null, Uri previous = null, IEnumerable<Get200ApplicationJsonPropertiesItemsItem> results = null)
        {
            results ??= new List<Get200ApplicationJsonPropertiesItemsItem>();

            return new Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Get200ApplicationJsonPropertiesItemsItem. </summary>
        /// <param name="identifier"> Unique identifier for the resume. If creating a document and left blank, one will be automatically generated. </param>
        /// <param name="formatFile"> The template to apply. </param>
        /// <returns> A new <see cref="Models.Get200ApplicationJsonPropertiesItemsItem"/> instance for mocking. </returns>
        public static Get200ApplicationJsonPropertiesItemsItem Get200ApplicationJsonPropertiesItemsItem(string identifier = null, Uri formatFile = null)
        {
            return new Get200ApplicationJsonPropertiesItemsItem(identifier, formatFile);
        }

        /// <summary> Initializes a new instance of ReformattedResume. </summary>
        /// <param name="data"></param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Models.ReformattedResume"/> instance for mocking. </returns>
        public static ReformattedResume ReformattedResume(ReformattedResumeData data = null, Meta meta = null, Error error = null)
        {
            return new ReformattedResume(data, meta, error);
        }

        /// <summary> Initializes a new instance of ReformattedResumeData. </summary>
        /// <param name="reformattedFile"></param>
        /// <returns> A new <see cref="Models.ReformattedResumeData"/> instance for mocking. </returns>
        public static ReformattedResumeData ReformattedResumeData(Uri reformattedFile = null)
        {
            return new ReformattedResumeData(reformattedFile);
        }
    }
}
