// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Affinda.API.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Affinda.API
{
    /// <summary> The AffindaAPI service client. </summary>
    public partial class AffindaAPIClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal AffindaAPIRestClient RestClient { get; }

        /// <summary> Initializes a new instance of AffindaAPIClient for mocking. </summary>
        protected AffindaAPIClient()
        {
        }

        /// <summary> Initializes a new instance of AffindaAPIClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="region"> region - server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public AffindaAPIClient(TokenCredential credential, Region? region = null, AffindaAPIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            region ??= Region.Api;

            options ??= new AffindaAPIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://management.azure.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new AffindaAPIRestClient(_clientDiagnostics, _pipeline, region);
        }

        /// <summary> Initializes a new instance of AffindaAPIClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="region"> region - server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal AffindaAPIClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Region? region = null)
        {
            RestClient = new AffindaAPIRestClient(clientDiagnostics, pipeline, region);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Search through parsed resumes. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Searches through parsed resumes. Users have 3 options to create a search:&lt;br /&gt;&lt;br /&gt; 1.	Match to a job description - a parsed job description is used to find candidates that suit it&lt;br /&gt; 2.	Match to a resume - a parsed resume is used to find other candidates that have similar attributes&lt;br /&gt; 3.	Search using custom criteria&lt;br /&gt;&lt;br /&gt; Users should only populate 1 of jobDescription, resume or the custom criteria. </remarks>
        public virtual async Task<Response<ResumeSearch>> CreateResumeSearchAsync(ResumeSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResumeSearch");
            scope.Start();
            try
            {
                return await RestClient.CreateResumeSearchAsync(body, offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Search through parsed resumes. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Searches through parsed resumes. Users have 3 options to create a search:&lt;br /&gt;&lt;br /&gt; 1.	Match to a job description - a parsed job description is used to find candidates that suit it&lt;br /&gt; 2.	Match to a resume - a parsed resume is used to find other candidates that have similar attributes&lt;br /&gt; 3.	Search using custom criteria&lt;br /&gt;&lt;br /&gt; Users should only populate 1 of jobDescription, resume or the custom criteria. </remarks>
        public virtual Response<ResumeSearch> CreateResumeSearch(ResumeSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResumeSearch");
            scope.Start();
            try
            {
                return RestClient.CreateResumeSearch(body, offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search result of specific resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this resume.
        /// The `identifier` is the unique ID returned via the [/resume_search](#post-/resume_search) endpoint.
        /// </remarks>
        public virtual async Task<Response<ResumeSearchDetail>> GetResumeSearchDetailAsync(string identifier, ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchDetail");
            scope.Start();
            try
            {
                return await RestClient.GetResumeSearchDetailAsync(identifier, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search result of specific resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this resume.
        /// The `identifier` is the unique ID returned via the [/resume_search](#post-/resume_search) endpoint.
        /// </remarks>
        public virtual Response<ResumeSearchDetail> GetResumeSearchDetail(string identifier, ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchDetail");
            scope.Start();
            try
            {
                return RestClient.GetResumeSearchDetail(identifier, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Match a single resume and job description. </summary>
        /// <param name="resume"> Identify the resume to match. </param>
        /// <param name="jobDescription"> Identify the job description to match. </param>
        /// <param name="index"> Optionally, specify an index to search in. If not specified, will search in all indexes. </param>
        /// <param name="searchExpression"> Add keywords to the search criteria. </param>
        /// <param name="jobTitlesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="yearsExperienceWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="locationsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="languagesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="skillsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="educationWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="searchExpressionWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="socCodesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="managementLevelWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the matching score between a resume and a job description. The score ranges between 0 and 1, with 0 being not a match at all, and 1 being perfect match.&lt;br/&gt; Note, this score will not directly match the score returned from POST [/resume_search/details/{identifier}](#post-/resume_search/details/-identifier-). </remarks>
        public virtual async Task<Response<ResumeSearchMatch>> GetResumeSearchMatchAsync(string resume, string jobDescription, string index = null, string searchExpression = null, float? jobTitlesWeight = null, float? yearsExperienceWeight = null, float? locationsWeight = null, float? languagesWeight = null, float? skillsWeight = null, float? educationWeight = null, float? searchExpressionWeight = null, float? socCodesWeight = null, float? managementLevelWeight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchMatch");
            scope.Start();
            try
            {
                return await RestClient.GetResumeSearchMatchAsync(resume, jobDescription, index, searchExpression, jobTitlesWeight, yearsExperienceWeight, locationsWeight, languagesWeight, skillsWeight, educationWeight, searchExpressionWeight, socCodesWeight, managementLevelWeight, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Match a single resume and job description. </summary>
        /// <param name="resume"> Identify the resume to match. </param>
        /// <param name="jobDescription"> Identify the job description to match. </param>
        /// <param name="index"> Optionally, specify an index to search in. If not specified, will search in all indexes. </param>
        /// <param name="searchExpression"> Add keywords to the search criteria. </param>
        /// <param name="jobTitlesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="yearsExperienceWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="locationsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="languagesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="skillsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="educationWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="searchExpressionWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="socCodesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="managementLevelWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the matching score between a resume and a job description. The score ranges between 0 and 1, with 0 being not a match at all, and 1 being perfect match.&lt;br/&gt; Note, this score will not directly match the score returned from POST [/resume_search/details/{identifier}](#post-/resume_search/details/-identifier-). </remarks>
        public virtual Response<ResumeSearchMatch> GetResumeSearchMatch(string resume, string jobDescription, string index = null, string searchExpression = null, float? jobTitlesWeight = null, float? yearsExperienceWeight = null, float? locationsWeight = null, float? languagesWeight = null, float? skillsWeight = null, float? educationWeight = null, float? searchExpressionWeight = null, float? socCodesWeight = null, float? managementLevelWeight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchMatch");
            scope.Start();
            try
            {
                return RestClient.GetResumeSearchMatch(resume, jobDescription, index, searchExpression, jobTitlesWeight, yearsExperienceWeight, locationsWeight, languagesWeight, skillsWeight, educationWeight, searchExpressionWeight, socCodesWeight, managementLevelWeight, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual async Task<Response<ResumeSearchConfig>> GetResumeSearchConfigAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchConfig");
            scope.Start();
            try
            {
                return await RestClient.GetResumeSearchConfigAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual Response<ResumeSearchConfig> GetResumeSearchConfig(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchConfig");
            scope.Start();
            try
            {
                return RestClient.GetResumeSearchConfig(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="body"> The ResumeSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual async Task<Response<ResumeSearchConfig>> UpdateResumeSearchConfigAsync(ResumeSearchConfig body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateResumeSearchConfig");
            scope.Start();
            try
            {
                return await RestClient.UpdateResumeSearchConfigAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="body"> The ResumeSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual Response<ResumeSearchConfig> UpdateResumeSearchConfig(ResumeSearchConfig body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateResumeSearchConfig");
            scope.Start();
            try
            {
                return RestClient.UpdateResumeSearchConfig(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a signed URL for the embeddable resume search tool. </summary>
        /// <param name="body"> The Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the resume search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable resume search tool. </remarks>
        public virtual async Task<Response<ResumeSearchEmbed>> CreateResumeSearchEmbedUrlAsync(Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResumeSearchEmbedUrl");
            scope.Start();
            try
            {
                return await RestClient.CreateResumeSearchEmbedUrlAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a signed URL for the embeddable resume search tool. </summary>
        /// <param name="body"> The Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the resume search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable resume search tool. </remarks>
        public virtual Response<ResumeSearchEmbed> CreateResumeSearchEmbedUrl(Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResumeSearchEmbedUrl");
            scope.Start();
            try
            {
                return RestClient.CreateResumeSearchEmbedUrl(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get job title suggestions based on provided job title(s). </summary>
        /// <param name="jobTitles"> Job title to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Provided one or more job titles, get related suggestions for your search. </remarks>
        public virtual async Task<Response<IReadOnlyList<string>>> GetResumeSearchSuggestionJobTitleAsync(IEnumerable<string> jobTitles, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchSuggestionJobTitle");
            scope.Start();
            try
            {
                return await RestClient.GetResumeSearchSuggestionJobTitleAsync(jobTitles, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get job title suggestions based on provided job title(s). </summary>
        /// <param name="jobTitles"> Job title to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Provided one or more job titles, get related suggestions for your search. </remarks>
        public virtual Response<IReadOnlyList<string>> GetResumeSearchSuggestionJobTitle(IEnumerable<string> jobTitles, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchSuggestionJobTitle");
            scope.Start();
            try
            {
                return RestClient.GetResumeSearchSuggestionJobTitle(jobTitles, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get skill suggestions based on provided skill(s). </summary>
        /// <param name="skills"> Skill to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Provided one or more skills, get related suggestions for your search. </remarks>
        public virtual async Task<Response<IReadOnlyList<string>>> GetResumeSearchSuggestionSkillAsync(IEnumerable<string> skills, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchSuggestionSkill");
            scope.Start();
            try
            {
                return await RestClient.GetResumeSearchSuggestionSkillAsync(skills, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get skill suggestions based on provided skill(s). </summary>
        /// <param name="skills"> Skill to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Provided one or more skills, get related suggestions for your search. </remarks>
        public virtual Response<IReadOnlyList<string>> GetResumeSearchSuggestionSkill(IEnumerable<string> skills, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchSuggestionSkill");
            scope.Start();
            try
            {
                return RestClient.GetResumeSearchSuggestionSkill(skills, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Search through parsed job descriptions. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Searches through parsed job descriptions. You can search with custom criterias or a resume. </remarks>
        public virtual async Task<Response<JobDescriptionSearch>> CreateJobDescriptionSearchAsync(JobDescriptionSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateJobDescriptionSearch");
            scope.Start();
            try
            {
                return await RestClient.CreateJobDescriptionSearchAsync(body, offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Search through parsed job descriptions. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Searches through parsed job descriptions. You can search with custom criterias or a resume. </remarks>
        public virtual Response<JobDescriptionSearch> CreateJobDescriptionSearch(JobDescriptionSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateJobDescriptionSearch");
            scope.Start();
            try
            {
                return RestClient.CreateJobDescriptionSearch(body, offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search result of specific job description. </summary>
        /// <param name="identifier"> Job Description identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this job description.
        /// The `identifier` is the unique ID returned via the [/job_description_search](#post-/job_description_search) endpoint.
        /// </remarks>
        public virtual async Task<Response<JobDescriptionSearchDetail>> GetJobDescriptionSearchDetailAsync(string identifier, JobDescriptionSearchParameters body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetJobDescriptionSearchDetail");
            scope.Start();
            try
            {
                return await RestClient.GetJobDescriptionSearchDetailAsync(identifier, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search result of specific job description. </summary>
        /// <param name="identifier"> Job Description identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this job description.
        /// The `identifier` is the unique ID returned via the [/job_description_search](#post-/job_description_search) endpoint.
        /// </remarks>
        public virtual Response<JobDescriptionSearchDetail> GetJobDescriptionSearchDetail(string identifier, JobDescriptionSearchParameters body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetJobDescriptionSearchDetail");
            scope.Start();
            try
            {
                return RestClient.GetJobDescriptionSearchDetail(identifier, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual async Task<Response<JobDescriptionSearchConfig>> GetJobDescriptionSearchConfigAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetJobDescriptionSearchConfig");
            scope.Start();
            try
            {
                return await RestClient.GetJobDescriptionSearchConfigAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual Response<JobDescriptionSearchConfig> GetJobDescriptionSearchConfig(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetJobDescriptionSearchConfig");
            scope.Start();
            try
            {
                return RestClient.GetJobDescriptionSearchConfig(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="body"> The JobDescriptionSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual async Task<Response<JobDescriptionSearchConfig>> UpdateJobDescriptionSearchConfigAsync(JobDescriptionSearchConfig body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateJobDescriptionSearchConfig");
            scope.Start();
            try
            {
                return await RestClient.UpdateJobDescriptionSearchConfigAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="body"> The JobDescriptionSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual Response<JobDescriptionSearchConfig> UpdateJobDescriptionSearchConfig(JobDescriptionSearchConfig body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateJobDescriptionSearchConfig");
            scope.Start();
            try
            {
                return RestClient.UpdateJobDescriptionSearchConfig(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a signed URL for the embeddable job description search tool. </summary>
        /// <param name="body"> The PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the job description search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable search tool. </remarks>
        public virtual async Task<Response<JobDescriptionSearchEmbed>> CreateJobDescriptionSearchEmbedUrlAsync(PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateJobDescriptionSearchEmbedUrl");
            scope.Start();
            try
            {
                return await RestClient.CreateJobDescriptionSearchEmbedUrlAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a signed URL for the embeddable job description search tool. </summary>
        /// <param name="body"> The PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the job description search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable search tool. </remarks>
        public virtual Response<JobDescriptionSearchEmbed> CreateJobDescriptionSearchEmbedUrl(PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateJobDescriptionSearchEmbedUrl");
            scope.Start();
            try
            {
                return RestClient.CreateJobDescriptionSearchEmbedUrl(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all indexes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="documentType"> Filter indices by a document type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexes. </remarks>
        public virtual async Task<Response<PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema>> GetAllIndexesAsync(int? offset = null, int? limit = null, Enum3? documentType = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexes");
            scope.Start();
            try
            {
                return await RestClient.GetAllIndexesAsync(offset, limit, documentType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all indexes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="documentType"> Filter indices by a document type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexes. </remarks>
        public virtual Response<PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema> GetAllIndexes(int? offset = null, int? limit = null, Enum3? documentType = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexes");
            scope.Start();
            try
            {
                return RestClient.GetAllIndexes(offset, limit, documentType, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new index. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="documentType"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an index for the search tool. </remarks>
        public virtual async Task<Response<Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema>> CreateIndexAsync(string name = null, string documentType = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndex");
            scope.Start();
            try
            {
                return await RestClient.CreateIndexAsync(name, documentType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new index. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="documentType"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an index for the search tool. </remarks>
        public virtual Response<Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema> CreateIndex(string name = null, string documentType = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndex");
            scope.Start();
            try
            {
                return RestClient.CreateIndex(name, documentType, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified index from the database. </remarks>
        public virtual async Task<Response> DeleteIndexAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndex");
            scope.Start();
            try
            {
                return await RestClient.DeleteIndexAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified index from the database. </remarks>
        public virtual Response DeleteIndex(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndex");
            scope.Start();
            try
            {
                return RestClient.DeleteIndex(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get indexed documents for a specific index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexed documents for that index. </remarks>
        public virtual async Task<Response<PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema>> GetAllIndexDocumentsAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexDocuments");
            scope.Start();
            try
            {
                return await RestClient.GetAllIndexDocumentsAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get indexed documents for a specific index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexed documents for that index. </remarks>
        public virtual Response<PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema> GetAllIndexDocuments(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexDocuments");
            scope.Start();
            try
            {
                return RestClient.GetAllIndexDocuments(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Index a new document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an indexed document for the search tool. </remarks>
        public virtual async Task<Response<PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema>> CreateIndexDocumentAsync(string name, PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndexDocument");
            scope.Start();
            try
            {
                return await RestClient.CreateIndexDocumentAsync(name, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Index a new document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an indexed document for the search tool. </remarks>
        public virtual Response<PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema> CreateIndexDocument(string name, PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndexDocument");
            scope.Start();
            try
            {
                return RestClient.CreateIndexDocument(name, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an indexed document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete the specified indexed document from the database. </remarks>
        public virtual async Task<Response> DeleteIndexDocumentAsync(string name, string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndexDocument");
            scope.Start();
            try
            {
                return await RestClient.DeleteIndexDocumentAsync(name, identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an indexed document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete the specified indexed document from the database. </remarks>
        public virtual Response DeleteIndexDocument(string name, string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndexDocument");
            scope.Start();
            try
            {
                return RestClient.DeleteIndexDocument(name, identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List occupation groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the list of searchable occupation groups. </remarks>
        public virtual async Task<Response<IReadOnlyList<OccupationGroup>>> ListOccupationGroupsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.ListOccupationGroups");
            scope.Start();
            try
            {
                return await RestClient.ListOccupationGroupsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List occupation groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the list of searchable occupation groups. </remarks>
        public virtual Response<IReadOnlyList<OccupationGroup>> ListOccupationGroups(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.ListOccupationGroups");
            scope.Start();
            try
            {
                return RestClient.ListOccupationGroups(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all organizations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the organizations. </remarks>
        public virtual async Task<Response<IReadOnlyList<Organization>>> GetAllOrganizationsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllOrganizations");
            scope.Start();
            try
            {
                return await RestClient.GetAllOrganizationsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all organizations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the organizations. </remarks>
        public virtual Response<IReadOnlyList<Organization>> GetAllOrganizations(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllOrganizations");
            scope.Start();
            try
            {
                return RestClient.GetAllOrganizations(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new organization. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="avatar"> Upload avatar for the organization. </param>
        /// <param name="resthookSignatureKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a new organization. </remarks>
        public virtual async Task<Response<Organization>> CreateOrganizationAsync(string name, Stream avatar = null, string resthookSignatureKey = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateOrganization");
            scope.Start();
            try
            {
                return await RestClient.CreateOrganizationAsync(name, avatar, resthookSignatureKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new organization. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="avatar"> Upload avatar for the organization. </param>
        /// <param name="resthookSignatureKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a new organization. </remarks>
        public virtual Response<Organization> CreateOrganization(string name, Stream avatar = null, string resthookSignatureKey = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateOrganization");
            scope.Start();
            try
            {
                return RestClient.CreateOrganization(name, avatar, resthookSignatureKey, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get detail of an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get detail of an organization. </remarks>
        public virtual async Task<Response<Organization>> GetOrganizationAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetOrganization");
            scope.Start();
            try
            {
                return await RestClient.GetOrganizationAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get detail of an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get detail of an organization. </remarks>
        public virtual Response<Organization> GetOrganization(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetOrganization");
            scope.Start();
            try
            {
                return RestClient.GetOrganization(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="name"> The String to use. </param>
        /// <param name="avatar"> The Stream to use. </param>
        /// <param name="resthookSignatureKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update the detail of an organization. </remarks>
        public virtual async Task<Response<Organization>> UpdateOrganizationAsync(string identifier, string name = null, Stream avatar = null, string resthookSignatureKey = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateOrganization");
            scope.Start();
            try
            {
                return await RestClient.UpdateOrganizationAsync(identifier, name, avatar, resthookSignatureKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="name"> The String to use. </param>
        /// <param name="avatar"> The Stream to use. </param>
        /// <param name="resthookSignatureKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update the detail of an organization. </remarks>
        public virtual Response<Organization> UpdateOrganization(string identifier, string name = null, Stream avatar = null, string resthookSignatureKey = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateOrganization");
            scope.Start();
            try
            {
                return RestClient.UpdateOrganization(identifier, name, avatar, resthookSignatureKey, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete the specified organization from the database. </remarks>
        public virtual async Task<Response> DeleteOrganizationAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteOrganization");
            scope.Start();
            try
            {
                return await RestClient.DeleteOrganizationAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete the specified organization from the database. </remarks>
        public virtual Response DeleteOrganization(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteOrganization");
            scope.Start();
            try
            {
                return RestClient.DeleteOrganization(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all organization memberships. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="role"> Filter by role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the organization memberships. </remarks>
        public virtual async Task<Response<PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema>> GetAllOrganizationMembershipsAsync(int? offset = null, int? limit = null, string organization = null, OrganizationRole? role = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllOrganizationMemberships");
            scope.Start();
            try
            {
                return await RestClient.GetAllOrganizationMembershipsAsync(offset, limit, organization, role, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all organization memberships. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="role"> Filter by role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the organization memberships. </remarks>
        public virtual Response<PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema> GetAllOrganizationMemberships(int? offset = null, int? limit = null, string organization = null, OrganizationRole? role = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllOrganizationMemberships");
            scope.Start();
            try
            {
                return RestClient.GetAllOrganizationMemberships(offset, limit, organization, role, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get detail of an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get detail of an organization membership. </remarks>
        public virtual async Task<Response<OrganizationMembership>> GetOrganizationMembershipAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetOrganizationMembership");
            scope.Start();
            try
            {
                return await RestClient.GetOrganizationMembershipAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get detail of an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get detail of an organization membership. </remarks>
        public virtual Response<OrganizationMembership> GetOrganizationMembership(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetOrganizationMembership");
            scope.Start();
            try
            {
                return RestClient.GetOrganizationMembership(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="body"> The OrganizationMembershipUpdate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> The admin users can use this endpoint to update the role of the members within their organization. </remarks>
        public virtual async Task<Response<OrganizationMembership>> UpdateOrganizationMembershipAsync(string identifier, OrganizationMembershipUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateOrganizationMembership");
            scope.Start();
            try
            {
                return await RestClient.UpdateOrganizationMembershipAsync(identifier, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="body"> The OrganizationMembershipUpdate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> The admin users can use this endpoint to update the role of the members within their organization. </remarks>
        public virtual Response<OrganizationMembership> UpdateOrganizationMembership(string identifier, OrganizationMembershipUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateOrganizationMembership");
            scope.Start();
            try
            {
                return RestClient.UpdateOrganizationMembership(identifier, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> The admin users can use this endpoint to remove member from their organization. Other users can also use this to leave their organization. </remarks>
        public virtual async Task<Response> DeleteOrganizationMembershipAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteOrganizationMembership");
            scope.Start();
            try
            {
                return await RestClient.DeleteOrganizationMembershipAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> The admin users can use this endpoint to remove member from their organization. Other users can also use this to leave their organization. </remarks>
        public virtual Response DeleteOrganizationMembership(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteOrganizationMembership");
            scope.Start();
            try
            {
                return RestClient.DeleteOrganizationMembership(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all invitations. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="status"> Filter by status. </param>
        /// <param name="role"> Filter by role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get list of all invitations you created or sent to you. </remarks>
        public virtual async Task<Response<Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema>> GetAllInvitationsAsync(int? offset = null, int? limit = null, string organization = null, InvitationStatus? status = null, OrganizationRole? role = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllInvitations");
            scope.Start();
            try
            {
                return await RestClient.GetAllInvitationsAsync(offset, limit, organization, status, role, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all invitations. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="status"> Filter by status. </param>
        /// <param name="role"> Filter by role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get list of all invitations you created or sent to you. </remarks>
        public virtual Response<Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema> GetAllInvitations(int? offset = null, int? limit = null, string organization = null, InvitationStatus? status = null, OrganizationRole? role = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllInvitations");
            scope.Start();
            try
            {
                return RestClient.GetAllInvitations(offset, limit, organization, status, role, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new invitation. </summary>
        /// <param name="body"> Invitation to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a new invitation. </remarks>
        public virtual async Task<Response<Invitation>> CreateInvitationAsync(InvitationCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateInvitation");
            scope.Start();
            try
            {
                return await RestClient.CreateInvitationAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new invitation. </summary>
        /// <param name="body"> Invitation to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a new invitation. </remarks>
        public virtual Response<Invitation> CreateInvitation(InvitationCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateInvitation");
            scope.Start();
            try
            {
                return RestClient.CreateInvitation(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get detail of an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get detail of an invitation. </remarks>
        public virtual async Task<Response<Invitation>> GetInvitationAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetInvitation");
            scope.Start();
            try
            {
                return await RestClient.GetInvitationAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get detail of an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get detail of an invitation. </remarks>
        public virtual Response<Invitation> GetInvitation(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetInvitation");
            scope.Start();
            try
            {
                return RestClient.GetInvitation(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="body"> The InvitationUpdate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update the detail of an invitation. </remarks>
        public virtual async Task<Response<Invitation>> UpdateInvitationAsync(string identifier, InvitationUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateInvitation");
            scope.Start();
            try
            {
                return await RestClient.UpdateInvitationAsync(identifier, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="body"> The InvitationUpdate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update the detail of an invitation. </remarks>
        public virtual Response<Invitation> UpdateInvitation(string identifier, InvitationUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateInvitation");
            scope.Start();
            try
            {
                return RestClient.UpdateInvitation(identifier, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete the specified invitation from the database. </remarks>
        public virtual async Task<Response> DeleteInvitationAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteInvitation");
            scope.Start();
            try
            {
                return await RestClient.DeleteInvitationAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete the specified invitation from the database. </remarks>
        public virtual Response DeleteInvitation(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteInvitation");
            scope.Start();
            try
            {
                return RestClient.DeleteInvitation(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get detail of an invitation by token. </summary>
        /// <param name="token"> Invitation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get detail of an invitation using a secret token. This allows users who have not registered/logged in to view the invitation. </remarks>
        public virtual async Task<Response<Invitation>> GetInvitationByTokenAsync(string token, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetInvitationByToken");
            scope.Start();
            try
            {
                return await RestClient.GetInvitationByTokenAsync(token, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get detail of an invitation by token. </summary>
        /// <param name="token"> Invitation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get detail of an invitation using a secret token. This allows users who have not registered/logged in to view the invitation. </remarks>
        public virtual Response<Invitation> GetInvitationByToken(string token, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetInvitationByToken");
            scope.Start();
            try
            {
                return RestClient.GetInvitationByToken(token, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Respond to an invitation. </summary>
        /// <param name="token"> Invitation token. </param>
        /// <param name="body"> The InvitationResponse to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Choose to accept or decline an invitation. </remarks>
        public virtual async Task<Response<Invitation>> RespondToInvitationAsync(string token, InvitationResponse body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.RespondToInvitation");
            scope.Start();
            try
            {
                return await RestClient.RespondToInvitationAsync(token, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Respond to an invitation. </summary>
        /// <param name="token"> Invitation token. </param>
        /// <param name="body"> The InvitationResponse to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Choose to accept or decline an invitation. </remarks>
        public virtual Response<Invitation> RespondToInvitation(string token, InvitationResponse body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.RespondToInvitation");
            scope.Start();
            try
            {
                return RestClient.RespondToInvitation(token, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all extractors. </summary>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="includePublicExtractors"> Whether to include Affinda&apos;s off-the-shelf extractors. </param>
        /// <param name="name"> Filter by name. </param>
        /// <param name="validatable"> Filter by validatable. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your custom extractors as well as Affinda&apos;s off-the-shelf extractors. </remarks>
        public virtual async Task<Response<IReadOnlyList<Extractor>>> GetAllExtractorsAsync(string organization, bool? includePublicExtractors = null, string name = null, bool? validatable = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllExtractors");
            scope.Start();
            try
            {
                return await RestClient.GetAllExtractorsAsync(organization, includePublicExtractors, name, validatable, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all extractors. </summary>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="includePublicExtractors"> Whether to include Affinda&apos;s off-the-shelf extractors. </param>
        /// <param name="name"> Filter by name. </param>
        /// <param name="validatable"> Filter by validatable. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your custom extractors as well as Affinda&apos;s off-the-shelf extractors. </remarks>
        public virtual Response<IReadOnlyList<Extractor>> GetAllExtractors(string organization, bool? includePublicExtractors = null, string name = null, bool? validatable = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllExtractors");
            scope.Start();
            try
            {
                return RestClient.GetAllExtractors(organization, includePublicExtractors, name, validatable, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create an extractor. </summary>
        /// <param name="body"> The ExtractorCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a custom extractor. </remarks>
        public virtual async Task<Response<Extractor>> CreateExtractorAsync(ExtractorCreate body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateExtractor");
            scope.Start();
            try
            {
                return await RestClient.CreateExtractorAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create an extractor. </summary>
        /// <param name="body"> The ExtractorCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a custom extractor. </remarks>
        public virtual Response<Extractor> CreateExtractor(ExtractorCreate body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateExtractor");
            scope.Start();
            try
            {
                return RestClient.CreateExtractor(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific extractor. </remarks>
        public virtual async Task<Response<Extractor>> GetExtractorAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetExtractor");
            scope.Start();
            try
            {
                return await RestClient.GetExtractorAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific extractor. </remarks>
        public virtual Response<Extractor> GetExtractor(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetExtractor");
            scope.Start();
            try
            {
                return RestClient.GetExtractor(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="body"> Extractor data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update data of an extractor. </remarks>
        public virtual async Task<Response<Extractor>> UpdateExtractorAsync(string identifier, ExtractorUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateExtractor");
            scope.Start();
            try
            {
                return await RestClient.UpdateExtractorAsync(identifier, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="body"> Extractor data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update data of an extractor. </remarks>
        public virtual Response<Extractor> UpdateExtractor(string identifier, ExtractorUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateExtractor");
            scope.Start();
            try
            {
                return RestClient.UpdateExtractor(identifier, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified extractor from the database. </remarks>
        public virtual async Task<Response> DeleteExtractorAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteExtractor");
            scope.Start();
            try
            {
                return await RestClient.DeleteExtractorAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified extractor from the database. </remarks>
        public virtual Response DeleteExtractor(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteExtractor");
            scope.Start();
            try
            {
                return RestClient.DeleteExtractor(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all data points. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="extractor"> Filter by extractor. </param>
        /// <param name="slug"> Filter by slug. </param>
        /// <param name="description"> Filter by description. </param>
        /// <param name="annotationContentType"> Filter by annotation content type, e.g. text, integer, float, date, etc. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your custom data points as well as Affinda&apos;s off-the-shelf data points. </remarks>
        public virtual async Task<Response<IReadOnlyList<DataPoint>>> GetAllDataPointsAsync(int? offset = null, int? limit = null, string organization = null, string extractor = null, string slug = null, string description = null, string annotationContentType = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllDataPoints");
            scope.Start();
            try
            {
                return await RestClient.GetAllDataPointsAsync(offset, limit, organization, extractor, slug, description, annotationContentType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all data points. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="extractor"> Filter by extractor. </param>
        /// <param name="slug"> Filter by slug. </param>
        /// <param name="description"> Filter by description. </param>
        /// <param name="annotationContentType"> Filter by annotation content type, e.g. text, integer, float, date, etc. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your custom data points as well as Affinda&apos;s off-the-shelf data points. </remarks>
        public virtual Response<IReadOnlyList<DataPoint>> GetAllDataPoints(int? offset = null, int? limit = null, string organization = null, string extractor = null, string slug = null, string description = null, string annotationContentType = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllDataPoints");
            scope.Start();
            try
            {
                return RestClient.GetAllDataPoints(offset, limit, organization, extractor, slug, description, annotationContentType, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a data point. </summary>
        /// <param name="body"> The DataPointCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a custom data point. </remarks>
        public virtual async Task<Response<DataPoint>> CreateDataPointAsync(DataPointCreate body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateDataPoint");
            scope.Start();
            try
            {
                return await RestClient.CreateDataPointAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a data point. </summary>
        /// <param name="body"> The DataPointCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a custom data point. </remarks>
        public virtual Response<DataPoint> CreateDataPoint(DataPointCreate body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateDataPoint");
            scope.Start();
            try
            {
                return RestClient.CreateDataPoint(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific data point. </summary>
        /// <param name="identifier"> Data point&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific data point. </remarks>
        public virtual async Task<Response<DataPoint>> GetDataPointAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetDataPoint");
            scope.Start();
            try
            {
                return await RestClient.GetDataPointAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific data point. </summary>
        /// <param name="identifier"> Data point&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific data point. </remarks>
        public virtual Response<DataPoint> GetDataPoint(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetDataPoint");
            scope.Start();
            try
            {
                return RestClient.GetDataPoint(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a data point. </summary>
        /// <param name="identifier"> DataPoint&apos;s identifier. </param>
        /// <param name="body"> Data point to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update data of a data point. </remarks>
        public virtual async Task<Response<DataPoint>> UpdateDataPointAsync(string identifier, DataPointUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateDataPoint");
            scope.Start();
            try
            {
                return await RestClient.UpdateDataPointAsync(identifier, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a data point. </summary>
        /// <param name="identifier"> DataPoint&apos;s identifier. </param>
        /// <param name="body"> Data point to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update data of a data point. </remarks>
        public virtual Response<DataPoint> UpdateDataPoint(string identifier, DataPointUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateDataPoint");
            scope.Start();
            try
            {
                return RestClient.UpdateDataPoint(identifier, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a data point. </summary>
        /// <param name="identifier"> DataPoint&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified data point from the database. </remarks>
        public virtual async Task<Response> DeleteDataPointAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteDataPoint");
            scope.Start();
            try
            {
                return await RestClient.DeleteDataPointAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a data point. </summary>
        /// <param name="identifier"> DataPoint&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified data point from the database. </remarks>
        public virtual Response DeleteDataPoint(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteDataPoint");
            scope.Start();
            try
            {
                return RestClient.DeleteDataPoint(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of data point choices. </summary>
        /// <param name="dataPoint"> The data point to get choices for. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="search"> Filter choices by searching for a substring. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns available choices for a specific enum data point. </remarks>
        public virtual async Task<Response<PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema>> GetDataPointChoicesAsync(string dataPoint, int? offset = null, int? limit = null, string search = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetDataPointChoices");
            scope.Start();
            try
            {
                return await RestClient.GetDataPointChoicesAsync(dataPoint, offset, limit, search, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of data point choices. </summary>
        /// <param name="dataPoint"> The data point to get choices for. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="search"> Filter choices by searching for a substring. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns available choices for a specific enum data point. </remarks>
        public virtual Response<PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema> GetDataPointChoices(string dataPoint, int? offset = null, int? limit = null, string search = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetDataPointChoices");
            scope.Start();
            try
            {
                return RestClient.GetDataPointChoices(dataPoint, offset, limit, search, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all workspaces. </summary>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="name"> Filter by name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your workspaces. </remarks>
        public virtual async Task<Response<IReadOnlyList<Workspace>>> GetAllWorkspacesAsync(string organization, string name = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllWorkspaces");
            scope.Start();
            try
            {
                return await RestClient.GetAllWorkspacesAsync(organization, name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all workspaces. </summary>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="name"> Filter by name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your workspaces. </remarks>
        public virtual Response<IReadOnlyList<Workspace>> GetAllWorkspaces(string organization, string name = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllWorkspaces");
            scope.Start();
            try
            {
                return RestClient.GetAllWorkspaces(organization, name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a workspace. </summary>
        /// <param name="body"> Workspace to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Workspace>> CreateWorkspaceAsync(WorkspaceCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateWorkspace");
            scope.Start();
            try
            {
                return await RestClient.CreateWorkspaceAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a workspace. </summary>
        /// <param name="body"> Workspace to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Workspace> CreateWorkspace(WorkspaceCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateWorkspace");
            scope.Start();
            try
            {
                return RestClient.CreateWorkspace(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific workspace. </remarks>
        public virtual async Task<Response<Workspace>> GetWorkspaceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetWorkspace");
            scope.Start();
            try
            {
                return await RestClient.GetWorkspaceAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific workspace. </remarks>
        public virtual Response<Workspace> GetWorkspace(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetWorkspace");
            scope.Start();
            try
            {
                return RestClient.GetWorkspace(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="body"> Workspace data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update a workspace. </remarks>
        public virtual async Task<Response<Workspace>> UpdateWorkspaceAsync(string identifier, WorkspaceUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateWorkspace");
            scope.Start();
            try
            {
                return await RestClient.UpdateWorkspaceAsync(identifier, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="body"> Workspace data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update a workspace. </remarks>
        public virtual Response<Workspace> UpdateWorkspace(string identifier, WorkspaceUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateWorkspace");
            scope.Start();
            try
            {
                return RestClient.UpdateWorkspace(identifier, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified workspace from the database. </remarks>
        public virtual async Task<Response> DeleteWorkspaceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteWorkspace");
            scope.Start();
            try
            {
                return await RestClient.DeleteWorkspaceAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified workspace from the database. </remarks>
        public virtual Response DeleteWorkspace(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteWorkspace");
            scope.Start();
            try
            {
                return RestClient.DeleteWorkspace(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all workspace memberships. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="user"> Partial text match on user&apos;s email, case-insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the memberships of your workspaces. </remarks>
        public virtual async Task<Response<PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema>> GetAllWorkspaceMembershipsAsync(int? offset = null, int? limit = null, string workspace = null, string user = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllWorkspaceMemberships");
            scope.Start();
            try
            {
                return await RestClient.GetAllWorkspaceMembershipsAsync(offset, limit, workspace, user, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all workspace memberships. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="user"> Partial text match on user&apos;s email, case-insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the memberships of your workspaces. </remarks>
        public virtual Response<PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema> GetAllWorkspaceMemberships(int? offset = null, int? limit = null, string workspace = null, string user = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllWorkspaceMemberships");
            scope.Start();
            try
            {
                return RestClient.GetAllWorkspaceMemberships(offset, limit, workspace, user, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a workspace membership. </summary>
        /// <param name="body"> The WorkspaceMembershipCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a workspace membership. </remarks>
        public virtual async Task<Response<WorkspaceMembership>> CreateWorkspaceMembershipAsync(WorkspaceMembershipCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateWorkspaceMembership");
            scope.Start();
            try
            {
                return await RestClient.CreateWorkspaceMembershipAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a workspace membership. </summary>
        /// <param name="body"> The WorkspaceMembershipCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a workspace membership. </remarks>
        public virtual Response<WorkspaceMembership> CreateWorkspaceMembership(WorkspaceMembershipCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateWorkspaceMembership");
            scope.Start();
            try
            {
                return RestClient.CreateWorkspaceMembership(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific workspace membership. </summary>
        /// <param name="identifier"> Workspace membership&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific workspace membership. </remarks>
        public virtual async Task<Response<WorkspaceMembership>> GetWorkspaceMembershipAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetWorkspaceMembership");
            scope.Start();
            try
            {
                return await RestClient.GetWorkspaceMembershipAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific workspace membership. </summary>
        /// <param name="identifier"> Workspace membership&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific workspace membership. </remarks>
        public virtual Response<WorkspaceMembership> GetWorkspaceMembership(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetWorkspaceMembership");
            scope.Start();
            try
            {
                return RestClient.GetWorkspaceMembership(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a workspace membership. </summary>
        /// <param name="identifier"> Workspace membership&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Remove an user from a workspace. </remarks>
        public virtual async Task<Response> DeleteWorkspaceMembershipAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteWorkspaceMembership");
            scope.Start();
            try
            {
                return await RestClient.DeleteWorkspaceMembershipAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a workspace membership. </summary>
        /// <param name="identifier"> Workspace membership&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Remove an user from a workspace. </remarks>
        public virtual Response DeleteWorkspaceMembership(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteWorkspaceMembership");
            scope.Start();
            try
            {
                return RestClient.DeleteWorkspaceMembership(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all collections. </summary>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your collections. </remarks>
        public virtual async Task<Response<IReadOnlyList<Collection>>> GetAllCollectionsAsync(string workspace, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllCollections");
            scope.Start();
            try
            {
                return await RestClient.GetAllCollectionsAsync(workspace, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all collections. </summary>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your collections. </remarks>
        public virtual Response<IReadOnlyList<Collection>> GetAllCollections(string workspace, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllCollections");
            scope.Start();
            try
            {
                return RestClient.GetAllCollections(workspace, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a collection. </summary>
        /// <param name="body"> The CollectionCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Collection>> CreateCollectionAsync(CollectionCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateCollection");
            scope.Start();
            try
            {
                return await RestClient.CreateCollectionAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a collection. </summary>
        /// <param name="body"> The CollectionCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Collection> CreateCollection(CollectionCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateCollection");
            scope.Start();
            try
            {
                return RestClient.CreateCollection(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific collection. </remarks>
        public virtual async Task<Response<Collection>> GetCollectionAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetCollection");
            scope.Start();
            try
            {
                return await RestClient.GetCollectionAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific collection. </remarks>
        public virtual Response<Collection> GetCollection(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetCollection");
            scope.Start();
            try
            {
                return RestClient.GetCollection(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="body"> Collection data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update data of a collection. </remarks>
        public virtual async Task<Response<Collection>> UpdateCollectionAsync(string identifier, CollectionUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateCollection");
            scope.Start();
            try
            {
                return await RestClient.UpdateCollectionAsync(identifier, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="body"> Collection data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update data of a collection. </remarks>
        public virtual Response<Collection> UpdateCollection(string identifier, CollectionUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateCollection");
            scope.Start();
            try
            {
                return RestClient.UpdateCollection(identifier, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified collection from the database. </remarks>
        public virtual async Task<Response> DeleteCollectionAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteCollection");
            scope.Start();
            try
            {
                return await RestClient.DeleteCollectionAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified collection from the database. </remarks>
        public virtual Response DeleteCollection(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteCollection");
            scope.Start();
            try
            {
                return RestClient.DeleteCollection(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all documents. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="collection"> Filter by collection. </param>
        /// <param name="state"> Filter by the document&apos;s state. </param>
        /// <param name="tags"> Filter by tag&apos;s IDs. </param>
        /// <param name="createdDt"> Filter by created datetime. </param>
        /// <param name="search"> Partial, case-insensitive match with file name or tag name. </param>
        /// <param name="ordering"> Sort the result set. A &quot;-&quot; at the beginning denotes DESC sort, e.g. -created_dt. Sort by multiple fields is supported. </param>
        /// <param name="includeData"> By default, this endpoint returns only the meta data of the documents. Set this to `true` will return the detailed data that was parsed, at a performance cost. </param>
        /// <param name="exclude"> Exclude some documents from the result. </param>
        /// <param name="inReview"> Exclude documents that are currently being reviewed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the document summaries for that user, limited to 300 per page. </remarks>
        public virtual async Task<Response<GetAllDocumentsResults>> GetAllDocumentsAsync(int? offset = null, int? limit = null, string workspace = null, string collection = null, DocumentState? state = null, IEnumerable<int> tags = null, DateRange? createdDt = null, string search = null, IEnumerable<Get8ItemsItem> ordering = null, bool? includeData = null, IEnumerable<string> exclude = null, bool? inReview = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllDocuments");
            scope.Start();
            try
            {
                return await RestClient.GetAllDocumentsAsync(offset, limit, workspace, collection, state, tags, createdDt, search, ordering, includeData, exclude, inReview, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all documents. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="collection"> Filter by collection. </param>
        /// <param name="state"> Filter by the document&apos;s state. </param>
        /// <param name="tags"> Filter by tag&apos;s IDs. </param>
        /// <param name="createdDt"> Filter by created datetime. </param>
        /// <param name="search"> Partial, case-insensitive match with file name or tag name. </param>
        /// <param name="ordering"> Sort the result set. A &quot;-&quot; at the beginning denotes DESC sort, e.g. -created_dt. Sort by multiple fields is supported. </param>
        /// <param name="includeData"> By default, this endpoint returns only the meta data of the documents. Set this to `true` will return the detailed data that was parsed, at a performance cost. </param>
        /// <param name="exclude"> Exclude some documents from the result. </param>
        /// <param name="inReview"> Exclude documents that are currently being reviewed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the document summaries for that user, limited to 300 per page. </remarks>
        public virtual Response<GetAllDocumentsResults> GetAllDocuments(int? offset = null, int? limit = null, string workspace = null, string collection = null, DocumentState? state = null, IEnumerable<int> tags = null, DateRange? createdDt = null, string search = null, IEnumerable<Get8ItemsItem> ordering = null, bool? includeData = null, IEnumerable<string> exclude = null, bool? inReview = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllDocuments");
            scope.Start();
            try
            {
                return RestClient.GetAllDocuments(offset, limit, workspace, collection, state, tags, createdDt, search, ordering, includeData, exclude, inReview, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a document for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> The String to use. </param>
        /// <param name="collection"> The String to use. </param>
        /// <param name="workspace"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="identifier"> Specify a custom identifier for the document. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a document for parsing. When successful, returns an `identifier` in the response for subsequent use with the [/documents/{identifier}](#get-/documents/-identifier-) endpoint to check processing status and retrieve results.&lt;br/&gt;
        /// </remarks>
        public virtual async Task<Response<Document>> CreateDocumentAsync(Stream file = null, string url = null, string collection = null, string workspace = null, string wait = null, string identifier = null, string fileName = null, string expiryTime = null, string language = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateDocument");
            scope.Start();
            try
            {
                return await RestClient.CreateDocumentAsync(file, url, collection, workspace, wait, identifier, fileName, expiryTime, language, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a document for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> The String to use. </param>
        /// <param name="collection"> The String to use. </param>
        /// <param name="workspace"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="identifier"> Specify a custom identifier for the document. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a document for parsing. When successful, returns an `identifier` in the response for subsequent use with the [/documents/{identifier}](#get-/documents/-identifier-) endpoint to check processing status and retrieve results.&lt;br/&gt;
        /// </remarks>
        public virtual Response<Document> CreateDocument(Stream file = null, string url = null, string collection = null, string workspace = null, string wait = null, string identifier = null, string fileName = null, string expiryTime = null, string language = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateDocument");
            scope.Start();
            try
            {
                return RestClient.CreateDocument(file, url, collection, workspace, wait, identifier, fileName, expiryTime, language, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific document. </remarks>
        public virtual async Task<Response<Document>> GetDocumentAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetDocument");
            scope.Start();
            try
            {
                return await RestClient.GetDocumentAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific document. </remarks>
        public virtual Response<Document> GetDocument(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetDocument");
            scope.Start();
            try
            {
                return RestClient.GetDocument(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="body"> Document data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update file name, expiry time, or move to another collection, etc. </remarks>
        public virtual async Task<Response<Document>> UpdateDocumentAsync(string identifier, DocumentUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateDocument");
            scope.Start();
            try
            {
                return await RestClient.UpdateDocumentAsync(identifier, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="body"> Document data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update file name, expiry time, or move to another collection, etc. </remarks>
        public virtual Response<Document> UpdateDocument(string identifier, DocumentUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateDocument");
            scope.Start();
            try
            {
                return RestClient.UpdateDocument(identifier, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified document from the database. </remarks>
        public virtual async Task<Response> DeleteDocumentAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteDocument");
            scope.Start();
            try
            {
                return await RestClient.DeleteDocumentAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified document from the database. </remarks>
        public virtual Response DeleteDocument(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteDocument");
            scope.Start();
            try
            {
                return RestClient.DeleteDocument(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all tags. </summary>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your tags. </remarks>
        public virtual async Task<Response<IReadOnlyList<Tag>>> GetAllTagsAsync(int? limit = null, int? offset = null, string workspace = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllTags");
            scope.Start();
            try
            {
                return await RestClient.GetAllTagsAsync(limit, offset, workspace, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all tags. </summary>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your tags. </remarks>
        public virtual Response<IReadOnlyList<Tag>> GetAllTags(int? limit = null, int? offset = null, string workspace = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllTags");
            scope.Start();
            try
            {
                return RestClient.GetAllTags(limit, offset, workspace, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a tag. </summary>
        /// <param name="body"> The TagCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Tag>> CreateTagAsync(TagCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateTag");
            scope.Start();
            try
            {
                return await RestClient.CreateTagAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a tag. </summary>
        /// <param name="body"> The TagCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Tag> CreateTag(TagCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateTag");
            scope.Start();
            try
            {
                return RestClient.CreateTag(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific tag. </remarks>
        public virtual async Task<Response<Tag>> GetTagAsync(int id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetTag");
            scope.Start();
            try
            {
                return await RestClient.GetTagAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific tag. </remarks>
        public virtual Response<Tag> GetTag(int id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetTag");
            scope.Start();
            try
            {
                return RestClient.GetTag(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="body"> Tag data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update data of an tag. </remarks>
        public virtual async Task<Response<Tag>> UpdateTagAsync(int id, TagUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateTag");
            scope.Start();
            try
            {
                return await RestClient.UpdateTagAsync(id, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="body"> Tag data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update data of an tag. </remarks>
        public virtual Response<Tag> UpdateTag(int id, TagUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateTag");
            scope.Start();
            try
            {
                return RestClient.UpdateTag(id, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified tag from the database. </remarks>
        public virtual async Task<Response> DeleteTagAsync(int id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteTag");
            scope.Start();
            try
            {
                return await RestClient.DeleteTagAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified tag from the database. </remarks>
        public virtual Response DeleteTag(int id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteTag");
            scope.Start();
            try
            {
                return RestClient.DeleteTag(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all resthook subscriptions. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your resthook subscriptions. </remarks>
        public virtual async Task<Response<PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema>> GetAllResthookSubscriptionsAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllResthookSubscriptions");
            scope.Start();
            try
            {
                return await RestClient.GetAllResthookSubscriptionsAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all resthook subscriptions. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your resthook subscriptions. </remarks>
        public virtual Response<PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema> GetAllResthookSubscriptions(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllResthookSubscriptions");
            scope.Start();
            try
            {
                return RestClient.GetAllResthookSubscriptions(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a resthook subscriptions. </summary>
        /// <param name="body"> The ResthookSubscriptionCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ResthookSubscription>> CreateResthookSubscriptionAsync(ResthookSubscriptionCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResthookSubscription");
            scope.Start();
            try
            {
                return await RestClient.CreateResthookSubscriptionAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a resthook subscriptions. </summary>
        /// <param name="body"> The ResthookSubscriptionCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ResthookSubscription> CreateResthookSubscription(ResthookSubscriptionCreate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResthookSubscription");
            scope.Start();
            try
            {
                return RestClient.CreateResthookSubscription(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific resthook subscription. </summary>
        /// <param name="id"> Resthook subscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific resthook subscription. </remarks>
        public virtual async Task<Response<ResthookSubscription>> GetResthookSubscriptionAsync(int id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResthookSubscription");
            scope.Start();
            try
            {
                return await RestClient.GetResthookSubscriptionAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific resthook subscription. </summary>
        /// <param name="id"> Resthook subscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific resthook subscription. </remarks>
        public virtual Response<ResthookSubscription> GetResthookSubscription(int id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResthookSubscription");
            scope.Start();
            try
            {
                return RestClient.GetResthookSubscription(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="body"> ResthookSubscription data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update data of a resthook subscription. </remarks>
        public virtual async Task<Response<ResthookSubscription>> UpdateResthookSubscriptionAsync(int id, ResthookSubscriptionUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateResthookSubscription");
            scope.Start();
            try
            {
                return await RestClient.UpdateResthookSubscriptionAsync(id, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="body"> ResthookSubscription data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update data of a resthook subscription. </remarks>
        public virtual Response<ResthookSubscription> UpdateResthookSubscription(int id, ResthookSubscriptionUpdate body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateResthookSubscription");
            scope.Start();
            try
            {
                return RestClient.UpdateResthookSubscription(id, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified resthook subscription from the database. </remarks>
        public virtual async Task<Response> DeleteResthookSubscriptionAsync(int id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteResthookSubscription");
            scope.Start();
            try
            {
                return await RestClient.DeleteResthookSubscriptionAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified resthook subscription from the database. </remarks>
        public virtual Response DeleteResthookSubscription(int id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteResthookSubscription");
            scope.Start();
            try
            {
                return RestClient.DeleteResthookSubscription(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
