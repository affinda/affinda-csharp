// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Affinda.API.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Affinda.API
{
    /// <summary> The AffindaAPI service client. </summary>
    public partial class AffindaAPIClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal AffindaAPIRestClient RestClient { get; }

        /// <summary> Initializes a new instance of AffindaAPIClient for mocking. </summary>
        protected AffindaAPIClient()
        {
        }

        /// <summary> Initializes a new instance of AffindaAPIClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public AffindaAPIClient(TokenCredential credential, Uri endpoint = null, AffindaAPIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.affinda.com/v1");

            options ??= new AffindaAPIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://management.azure.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new AffindaAPIRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of AffindaAPIClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal AffindaAPIClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new AffindaAPIRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Returns all the resume summaries for that user, limited to 300 per page. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetAllResumesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllResumes");
            scope.Start();
            try
            {
                return await RestClient.GetAllResumesAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the resume summaries for that user, limited to 300 per page. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetAllResumes(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllResumes");
            scope.Start();
            try
            {
                return RestClient.GetAllResumes(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Uploads a resume for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#operation/getResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> CreateResumeAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResume");
            scope.Start();
            try
            {
                return await RestClient.CreateResumeAsync(file, identifier, fileName, url, wait, language, expiryTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Uploads a resume for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#operation/getResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> CreateResume(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResume");
            scope.Start();
            try
            {
                return RestClient.CreateResume(file, identifier, fileName, url, wait, language, expiryTime, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#operation/createResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResume");
            scope.Start();
            try
            {
                return await RestClient.GetResumeAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#operation/createResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetResume(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResume");
            scope.Start();
            try
            {
                return RestClient.GetResume(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RequestError>> DeleteResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteResume");
            scope.Start();
            try
            {
                return await RestClient.DeleteResumeAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RequestError> DeleteResume(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteResume");
            scope.Start();
            try
            {
                return RestClient.DeleteResume(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the redacted resume information for that resume. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetAllRedactedResumesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllRedactedResumes");
            scope.Start();
            try
            {
                return await RestClient.GetAllRedactedResumesAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the redacted resume information for that resume. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetAllRedactedResumes(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllRedactedResumes");
            scope.Start();
            try
            {
                return RestClient.GetAllRedactedResumes(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Uploads a resume for redacting. </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="redactHeadshot"> Whether to redact headshot. </param>
        /// <param name="redactPersonalDetails"> Whether to redact personal details (e.g. name, address). </param>
        /// <param name="redactWorkDetails"> Whether to redact work details (e.g. company names). </param>
        /// <param name="redactEducationDetails"> Whether to redact education details (e.g. university names). </param>
        /// <param name="redactReferees"> Whether to redact referee details. </param>
        /// <param name="redactLocations"> Whether to redact location names. </param>
        /// <param name="redactDates"> Whether to redact dates. </param>
        /// <param name="redactGender"> Whether to redact gender. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> CreateRedactedResumeAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, string redactHeadshot = null, string redactPersonalDetails = null, string redactWorkDetails = null, string redactEducationDetails = null, string redactReferees = null, string redactLocations = null, string redactDates = null, string redactGender = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateRedactedResume");
            scope.Start();
            try
            {
                return await RestClient.CreateRedactedResumeAsync(file, identifier, fileName, url, language, wait, redactHeadshot, redactPersonalDetails, redactWorkDetails, redactEducationDetails, redactReferees, redactLocations, redactDates, redactGender, expiryTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Uploads a resume for redacting. </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="redactHeadshot"> Whether to redact headshot. </param>
        /// <param name="redactPersonalDetails"> Whether to redact personal details (e.g. name, address). </param>
        /// <param name="redactWorkDetails"> Whether to redact work details (e.g. company names). </param>
        /// <param name="redactEducationDetails"> Whether to redact education details (e.g. university names). </param>
        /// <param name="redactReferees"> Whether to redact referee details. </param>
        /// <param name="redactLocations"> Whether to redact location names. </param>
        /// <param name="redactDates"> Whether to redact dates. </param>
        /// <param name="redactGender"> Whether to redact gender. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> CreateRedactedResume(Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, string redactHeadshot = null, string redactPersonalDetails = null, string redactWorkDetails = null, string redactEducationDetails = null, string redactReferees = null, string redactLocations = null, string redactDates = null, string redactGender = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateRedactedResume");
            scope.Start();
            try
            {
                return RestClient.CreateRedactedResume(file, identifier, fileName, url, language, wait, redactHeadshot, redactPersonalDetails, redactWorkDetails, redactEducationDetails, redactReferees, redactLocations, redactDates, redactGender, expiryTime, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#operation/createRedactedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetRedactedResume");
            scope.Start();
            try
            {
                return await RestClient.GetRedactedResumeAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#operation/createRedactedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetRedactedResume");
            scope.Start();
            try
            {
                return RestClient.GetRedactedResume(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RequestError>> DeleteRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteRedactedResume");
            scope.Start();
            try
            {
                return await RestClient.DeleteRedactedResumeAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RequestError> DeleteRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteRedactedResume");
            scope.Start();
            try
            {
                return RestClient.DeleteRedactedResume(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the resume formats. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetAllResumeFormatsAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllResumeFormats");
            scope.Start();
            try
            {
                return await RestClient.GetAllResumeFormatsAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the resume formats. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetAllResumeFormats(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllResumeFormats");
            scope.Start();
            try
            {
                return RestClient.GetAllResumeFormats(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the reformatted resume information for that resume. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetAllReformattedResumesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllReformattedResumes");
            scope.Start();
            try
            {
                return await RestClient.GetAllReformattedResumesAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the reformatted resume information for that resume. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetAllReformattedResumes(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllReformattedResumes");
            scope.Start();
            try
            {
                return RestClient.GetAllReformattedResumes(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a resume for reformatting. </summary>
        /// <param name="resumeFormat"> The ResumeFormat to use. </param>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> CreateReformattedResumeAsync(string resumeFormat, Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateReformattedResume");
            scope.Start();
            try
            {
                return await RestClient.CreateReformattedResumeAsync(resumeFormat, file, identifier, fileName, url, language, wait, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a resume for reformatting. </summary>
        /// <param name="resumeFormat"> The ResumeFormat to use. </param>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> CreateReformattedResume(string resumeFormat, Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateReformattedResume");
            scope.Start();
            try
            {
                return RestClient.CreateReformattedResume(resumeFormat, file, identifier, fileName, url, language, wait, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns all the reformatting results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/reformatted_resumes](#operation/createReformattedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetReformattedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetReformattedResume");
            scope.Start();
            try
            {
                return await RestClient.GetReformattedResumeAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns all the reformatting results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/reformatted_resumes](#operation/createReformattedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetReformattedResume(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetReformattedResume");
            scope.Start();
            try
            {
                return RestClient.GetReformattedResume(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RequestError>> DeleteReformattedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteReformattedResume");
            scope.Start();
            try
            {
                return await RestClient.DeleteReformattedResumeAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RequestError> DeleteReformattedResume(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteReformattedResume");
            scope.Start();
            try
            {
                return RestClient.DeleteReformattedResume(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Searches through parsed resumes. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> CreateResumeSearchAsync(ResumeSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResumeSearch");
            scope.Start();
            try
            {
                return await RestClient.CreateResumeSearchAsync(body, offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Searches through parsed resumes. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> CreateResumeSearch(ResumeSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResumeSearch");
            scope.Start();
            try
            {
                return RestClient.CreateResumeSearch(body, offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the indexes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetAllIndexesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexes");
            scope.Start();
            try
            {
                return await RestClient.GetAllIndexesAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the indexes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetAllIndexes(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexes");
            scope.Start();
            try
            {
                return RestClient.GetAllIndexes(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create an index for the search tool. </summary>
        /// <param name="name"> The PostContentSchemaName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> CreateIndexAsync(string name = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndex");
            scope.Start();
            try
            {
                return await RestClient.CreateIndexAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create an index for the search tool. </summary>
        /// <param name="name"> The PostContentSchemaName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> CreateIndex(string name = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndex");
            scope.Start();
            try
            {
                return RestClient.CreateIndex(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified index from the database. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RequestError>> DeleteIndexAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndex");
            scope.Start();
            try
            {
                return await RestClient.DeleteIndexAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified index from the database. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RequestError> DeleteIndex(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndex");
            scope.Start();
            try
            {
                return RestClient.DeleteIndex(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the indexed documents for that index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetAllIndexDocumentsAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexDocuments");
            scope.Start();
            try
            {
                return await RestClient.GetAllIndexDocumentsAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the indexed documents for that index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetAllIndexDocuments(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexDocuments");
            scope.Start();
            try
            {
                return RestClient.GetAllIndexDocuments(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create an indexed document for the search tool. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> CreateIndexDocumentAsync(string name, PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndexDocument");
            scope.Start();
            try
            {
                return await RestClient.CreateIndexDocumentAsync(name, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create an indexed document for the search tool. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> CreateIndexDocument(string name, PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndexDocument");
            scope.Start();
            try
            {
                return RestClient.CreateIndexDocument(name, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the specified indexed document from the database. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RequestError>> DeleteIndexDocumentAsync(string name, string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndexDocument");
            scope.Start();
            try
            {
                return await RestClient.DeleteIndexDocumentAsync(name, identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the specified indexed document from the database. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RequestError> DeleteIndexDocument(string name, string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndexDocument");
            scope.Start();
            try
            {
                return RestClient.DeleteIndexDocument(name, identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the invoice summaries for that user, limited to 300 per page. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetAllInvoicesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllInvoices");
            scope.Start();
            try
            {
                return await RestClient.GetAllInvoicesAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all the invoice summaries for that user, limited to 300 per page. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetAllInvoices(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllInvoices");
            scope.Start();
            try
            {
                return RestClient.GetAllInvoices(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Uploads an invoice for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/invoices/{identifier}](#operation/getInvoice) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> URL to file to download and process. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> CreateInvoiceAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateInvoice");
            scope.Start();
            try
            {
                return await RestClient.CreateInvoiceAsync(file, identifier, fileName, url, wait, language, expiryTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Uploads an invoice for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/invoices/{identifier}](#operation/getInvoice) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> URL to file to download and process. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> CreateInvoice(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateInvoice");
            scope.Start();
            try
            {
                return RestClient.CreateInvoice(file, identifier, fileName, url, wait, language, expiryTime, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns all the parse results for that invoice if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the invoice via the [/invoices](#operation/createInvoice) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetInvoiceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetInvoice");
            scope.Start();
            try
            {
                return await RestClient.GetInvoiceAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns all the parse results for that invoice if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the invoice via the [/invoices](#operation/createInvoice) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetInvoice(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetInvoice");
            scope.Start();
            try
            {
                return RestClient.GetInvoice(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the specified invoice from the database. </summary>
        /// <param name="identifier"> Invoice identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RequestError>> DeleteInvoiceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteInvoice");
            scope.Start();
            try
            {
                return await RestClient.DeleteInvoiceAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the specified invoice from the database. </summary>
        /// <param name="identifier"> Invoice identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RequestError> DeleteInvoice(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteInvoice");
            scope.Start();
            try
            {
                return RestClient.DeleteInvoice(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> TODO TODO TODO. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> ListOccupationGroupsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.ListOccupationGroups");
            scope.Start();
            try
            {
                return await RestClient.ListOccupationGroupsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> TODO TODO TODO. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> ListOccupationGroups(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.ListOccupationGroups");
            scope.Start();
            try
            {
                return RestClient.ListOccupationGroups(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
