// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Affinda.API.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Affinda.API
{
    /// <summary> The AffindaAPI service client. </summary>
    public partial class AffindaAPIClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal AffindaAPIRestClient RestClient { get; }

        /// <summary> Initializes a new instance of AffindaAPIClient for mocking. </summary>
        protected AffindaAPIClient()
        {
        }

        /// <summary> Initializes a new instance of AffindaAPIClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public AffindaAPIClient(TokenCredential credential, Uri endpoint = null, AffindaAPIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.affinda.com/v2");

            options ??= new AffindaAPIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://management.azure.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new AffindaAPIRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of AffindaAPIClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal AffindaAPIClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new AffindaAPIRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get list of all resumes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the resume summaries for that user, limited to 300 per page. </remarks>
        public virtual async Task<Response<object>> GetAllResumesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllResumes");
            scope.Start();
            try
            {
                return await RestClient.GetAllResumesAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all resumes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the resume summaries for that user, limited to 300 per page. </remarks>
        public virtual Response<object> GetAllResumes(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllResumes");
            scope.Start();
            try
            {
                return RestClient.GetAllResumes(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a resume for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> The String to use. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a resume for parsing. When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#get-/resumes/-identifier-) endpoint to check processing status and retrieve results.&lt;br/&gt;
        /// Resumes can be uploaded as a file or a URL. In addition, data can be added directly if users want to upload directly without parsing any resume file. For uploading resume data, the `data` argument provided must be a JSON-encoded string. Data uploads will not impact upon parsing credits.
        /// </remarks>
        public virtual async Task<Response<object>> CreateResumeAsync(Stream file = null, string url = null, string data = null, string identifier = null, string fileName = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResume");
            scope.Start();
            try
            {
                return await RestClient.CreateResumeAsync(file, url, data, identifier, fileName, wait, language, expiryTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a resume for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> The String to use. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a resume for parsing. When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#get-/resumes/-identifier-) endpoint to check processing status and retrieve results.&lt;br/&gt;
        /// Resumes can be uploaded as a file or a URL. In addition, data can be added directly if users want to upload directly without parsing any resume file. For uploading resume data, the `data` argument provided must be a JSON-encoded string. Data uploads will not impact upon parsing credits.
        /// </remarks>
        public virtual Response<object> CreateResume(Stream file = null, string url = null, string data = null, string identifier = null, string fileName = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResume");
            scope.Start();
            try
            {
                return RestClient.CreateResume(file, url, data, identifier, fileName, wait, language, expiryTime, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get parse results for a specific resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="format"> Set this to &quot;hr-xml&quot; to get the response in HR-XML format. Currently the only supported value for this parameter is &quot;hr-xml&quot;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#post-/resumes) endpoint.
        /// </remarks>
        public virtual async Task<Response<object>> GetResumeAsync(string identifier, string format = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResume");
            scope.Start();
            try
            {
                return await RestClient.GetResumeAsync(identifier, format, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get parse results for a specific resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="format"> Set this to &quot;hr-xml&quot; to get the response in HR-XML format. Currently the only supported value for this parameter is &quot;hr-xml&quot;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#post-/resumes) endpoint.
        /// </remarks>
        public virtual Response<object> GetResume(string identifier, string format = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResume");
            scope.Start();
            try
            {
                return RestClient.GetResume(identifier, format, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a resume&apos;s data. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Resume data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Update data of a parsed resume.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#post-/resumes) endpoint.
        /// </remarks>
        public virtual async Task<Response<object>> UpdateResumeDataAsync(string identifier, ResumeData body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateResumeData");
            scope.Start();
            try
            {
                return await RestClient.UpdateResumeDataAsync(identifier, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a resume&apos;s data. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Resume data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Update data of a parsed resume.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#post-/resumes) endpoint.
        /// </remarks>
        public virtual Response<object> UpdateResumeData(string identifier, ResumeData body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateResumeData");
            scope.Start();
            try
            {
                return RestClient.UpdateResumeData(identifier, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified resume from the database. </remarks>
        public virtual async Task<Response<RequestError>> DeleteResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteResume");
            scope.Start();
            try
            {
                return await RestClient.DeleteResumeAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified resume from the database. </remarks>
        public virtual Response<RequestError> DeleteResume(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteResume");
            scope.Start();
            try
            {
                return RestClient.DeleteResume(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all redacted resumes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the redacted resume information for that resume. </remarks>
        public virtual async Task<Response<object>> GetAllRedactedResumesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllRedactedResumes");
            scope.Start();
            try
            {
                return await RestClient.GetAllRedactedResumesAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all redacted resumes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the redacted resume information for that resume. </remarks>
        public virtual Response<object> GetAllRedactedResumes(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllRedactedResumes");
            scope.Start();
            try
            {
                return RestClient.GetAllRedactedResumes(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a resume for redacting. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="url"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="redactHeadshot"> Whether to redact headshot. </param>
        /// <param name="redactPersonalDetails"> Whether to redact personal details (e.g. name, address). </param>
        /// <param name="redactWorkDetails"> Whether to redact work details (e.g. company names). </param>
        /// <param name="redactEducationDetails"> Whether to redact education details (e.g. university names). </param>
        /// <param name="redactReferees"> Whether to redact referee details. </param>
        /// <param name="redactLocations"> Whether to redact location names. </param>
        /// <param name="redactDates"> Whether to redact dates. </param>
        /// <param name="redactGender"> Whether to redact gender. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Uploads a resume for redacting. </remarks>
        public virtual async Task<Response<object>> CreateRedactedResumeAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, string redactHeadshot = null, string redactPersonalDetails = null, string redactWorkDetails = null, string redactEducationDetails = null, string redactReferees = null, string redactLocations = null, string redactDates = null, string redactGender = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateRedactedResume");
            scope.Start();
            try
            {
                return await RestClient.CreateRedactedResumeAsync(file, identifier, fileName, url, language, wait, redactHeadshot, redactPersonalDetails, redactWorkDetails, redactEducationDetails, redactReferees, redactLocations, redactDates, redactGender, expiryTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a resume for redacting. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="url"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="redactHeadshot"> Whether to redact headshot. </param>
        /// <param name="redactPersonalDetails"> Whether to redact personal details (e.g. name, address). </param>
        /// <param name="redactWorkDetails"> Whether to redact work details (e.g. company names). </param>
        /// <param name="redactEducationDetails"> Whether to redact education details (e.g. university names). </param>
        /// <param name="redactReferees"> Whether to redact referee details. </param>
        /// <param name="redactLocations"> Whether to redact location names. </param>
        /// <param name="redactDates"> Whether to redact dates. </param>
        /// <param name="redactGender"> Whether to redact gender. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Uploads a resume for redacting. </remarks>
        public virtual Response<object> CreateRedactedResume(Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, string redactHeadshot = null, string redactPersonalDetails = null, string redactWorkDetails = null, string redactEducationDetails = null, string redactReferees = null, string redactLocations = null, string redactDates = null, string redactGender = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateRedactedResume");
            scope.Start();
            try
            {
                return RestClient.CreateRedactedResume(file, identifier, fileName, url, language, wait, redactHeadshot, redactPersonalDetails, redactWorkDetails, redactEducationDetails, redactReferees, redactLocations, redactDates, redactGender, expiryTime, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get redaction results for a specific resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#post-/redacted_resumes) endpoint.
        /// </remarks>
        public virtual async Task<Response<object>> GetRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetRedactedResume");
            scope.Start();
            try
            {
                return await RestClient.GetRedactedResumeAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get redaction results for a specific resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#post-/redacted_resumes) endpoint.
        /// </remarks>
        public virtual Response<object> GetRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetRedactedResume");
            scope.Start();
            try
            {
                return RestClient.GetRedactedResume(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a redacted resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified resume from the database. </remarks>
        public virtual async Task<Response<RequestError>> DeleteRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteRedactedResume");
            scope.Start();
            try
            {
                return await RestClient.DeleteRedactedResumeAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a redacted resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified resume from the database. </remarks>
        public virtual Response<RequestError> DeleteRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteRedactedResume");
            scope.Start();
            try
            {
                return RestClient.DeleteRedactedResume(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Search through parsed resumes. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Searches through parsed resumes. Users have 3 options to create a search:&lt;br /&gt;&lt;br /&gt; 1.	Match to a job description - a parsed job description is used to find candidates that suit it&lt;br /&gt; 2.	Match to a resume - a parsed resume is used to find other candidates that have similar attributes&lt;br /&gt; 3.	Search using custom criteria&lt;br /&gt;&lt;br /&gt; Users should only populate 1 of jobDescription, resume or the custom criteria. </remarks>
        public virtual async Task<Response<object>> CreateResumeSearchAsync(ResumeSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResumeSearch");
            scope.Start();
            try
            {
                return await RestClient.CreateResumeSearchAsync(body, offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Search through parsed resumes. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Searches through parsed resumes. Users have 3 options to create a search:&lt;br /&gt;&lt;br /&gt; 1.	Match to a job description - a parsed job description is used to find candidates that suit it&lt;br /&gt; 2.	Match to a resume - a parsed resume is used to find other candidates that have similar attributes&lt;br /&gt; 3.	Search using custom criteria&lt;br /&gt;&lt;br /&gt; Users should only populate 1 of jobDescription, resume or the custom criteria. </remarks>
        public virtual Response<object> CreateResumeSearch(ResumeSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResumeSearch");
            scope.Start();
            try
            {
                return RestClient.CreateResumeSearch(body, offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search result of specific resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this resume.
        /// The `identifier` is the unique ID returned via the [/resume_search](#post-/resume_search) endpoint.
        /// </remarks>
        public virtual async Task<Response<object>> GetResumeSearchDetailAsync(string identifier, ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchDetail");
            scope.Start();
            try
            {
                return await RestClient.GetResumeSearchDetailAsync(identifier, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search result of specific resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this resume.
        /// The `identifier` is the unique ID returned via the [/resume_search](#post-/resume_search) endpoint.
        /// </remarks>
        public virtual Response<object> GetResumeSearchDetail(string identifier, ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchDetail");
            scope.Start();
            try
            {
                return RestClient.GetResumeSearchDetail(identifier, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Match a single resume and job description. </summary>
        /// <param name="resume"> Identify the resume to match. </param>
        /// <param name="jobDescription"> Identify the job description to match. </param>
        /// <param name="index"> Optionally, specify an index to search in. If not specified, will search in all indexes. </param>
        /// <param name="searchExpression"> Add keywords to the search criteria. </param>
        /// <param name="jobTitlesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="yearsExperienceWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="locationsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="languagesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="skillsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="educationWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="searchExpressionWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="socCodesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="managementLevelWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the matching score between a resume and a job description. The score ranges between 0 and 1, with 0 being not a match at all, and 1 being perfect match.&lt;br/&gt; Note, this score will not directly match the score returned from POST [/resume_search/details/{identifier}](#post-/resume_search/details/-identifier-). </remarks>
        public virtual async Task<Response<object>> GetResumeSearchMatchAsync(string resume, string jobDescription, string index = null, string searchExpression = null, float? jobTitlesWeight = null, float? yearsExperienceWeight = null, float? locationsWeight = null, float? languagesWeight = null, float? skillsWeight = null, float? educationWeight = null, float? searchExpressionWeight = null, float? socCodesWeight = null, float? managementLevelWeight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchMatch");
            scope.Start();
            try
            {
                return await RestClient.GetResumeSearchMatchAsync(resume, jobDescription, index, searchExpression, jobTitlesWeight, yearsExperienceWeight, locationsWeight, languagesWeight, skillsWeight, educationWeight, searchExpressionWeight, socCodesWeight, managementLevelWeight, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Match a single resume and job description. </summary>
        /// <param name="resume"> Identify the resume to match. </param>
        /// <param name="jobDescription"> Identify the job description to match. </param>
        /// <param name="index"> Optionally, specify an index to search in. If not specified, will search in all indexes. </param>
        /// <param name="searchExpression"> Add keywords to the search criteria. </param>
        /// <param name="jobTitlesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="yearsExperienceWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="locationsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="languagesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="skillsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="educationWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="searchExpressionWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="socCodesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="managementLevelWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the matching score between a resume and a job description. The score ranges between 0 and 1, with 0 being not a match at all, and 1 being perfect match.&lt;br/&gt; Note, this score will not directly match the score returned from POST [/resume_search/details/{identifier}](#post-/resume_search/details/-identifier-). </remarks>
        public virtual Response<object> GetResumeSearchMatch(string resume, string jobDescription, string index = null, string searchExpression = null, float? jobTitlesWeight = null, float? yearsExperienceWeight = null, float? locationsWeight = null, float? languagesWeight = null, float? skillsWeight = null, float? educationWeight = null, float? searchExpressionWeight = null, float? socCodesWeight = null, float? managementLevelWeight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchMatch");
            scope.Start();
            try
            {
                return RestClient.GetResumeSearchMatch(resume, jobDescription, index, searchExpression, jobTitlesWeight, yearsExperienceWeight, locationsWeight, languagesWeight, skillsWeight, educationWeight, searchExpressionWeight, socCodesWeight, managementLevelWeight, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the config for the logged in user&apos;s embedable search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embedable search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual async Task<Response<object>> GetResumeSearchConfigAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchConfig");
            scope.Start();
            try
            {
                return await RestClient.GetResumeSearchConfigAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the config for the logged in user&apos;s embedable search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embedable search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual Response<object> GetResumeSearchConfig(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetResumeSearchConfig");
            scope.Start();
            try
            {
                return RestClient.GetResumeSearchConfig(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the config for the logged in user&apos;s embedable search tool. </summary>
        /// <param name="body"> The ResumeSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embedable search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual async Task<Response<object>> UpdateResumeSearchConfigAsync(ResumeSearchConfig body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateResumeSearchConfig");
            scope.Start();
            try
            {
                return await RestClient.UpdateResumeSearchConfigAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the config for the logged in user&apos;s embedable search tool. </summary>
        /// <param name="body"> The ResumeSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embedable search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public virtual Response<object> UpdateResumeSearchConfig(ResumeSearchConfig body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.UpdateResumeSearchConfig");
            scope.Start();
            try
            {
                return RestClient.UpdateResumeSearchConfig(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a signed URL for the embedable search tool. </summary>
        /// <param name="body"> The Paths2T1Oc0ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the resume search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embedable search tool. </remarks>
        public virtual async Task<Response<object>> CreateResumeSearchEmbedUrlAsync(Paths2T1Oc0ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResumeSearchEmbedUrl");
            scope.Start();
            try
            {
                return await RestClient.CreateResumeSearchEmbedUrlAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a signed URL for the embedable search tool. </summary>
        /// <param name="body"> The Paths2T1Oc0ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the resume search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embedable search tool. </remarks>
        public virtual Response<object> CreateResumeSearchEmbedUrl(Paths2T1Oc0ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateResumeSearchEmbedUrl");
            scope.Start();
            try
            {
                return RestClient.CreateResumeSearchEmbedUrl(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all job descriptions. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the job descriptions for that user, limited to 300 per page. </remarks>
        public virtual async Task<Response<object>> GetAllJobDescriptionsAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllJobDescriptions");
            scope.Start();
            try
            {
                return await RestClient.GetAllJobDescriptionsAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all job descriptions. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the job descriptions for that user, limited to 300 per page. </remarks>
        public virtual Response<object> GetAllJobDescriptions(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllJobDescriptions");
            scope.Start();
            try
            {
                return RestClient.GetAllJobDescriptions(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a job description for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> The String to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a job description for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/job_descriptions/{identifier}](#get-/job_descriptions/-identifier-) endpoint to check processing status and retrieve results.
        /// Job Descriptions can be uploaded as a file or a URL.
        /// </remarks>
        public virtual async Task<Response<object>> CreateJobDescriptionAsync(Stream file = null, string url = null, string identifier = null, string fileName = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateJobDescription");
            scope.Start();
            try
            {
                return await RestClient.CreateJobDescriptionAsync(file, url, identifier, fileName, wait, language, expiryTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a job description for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> The String to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a job description for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/job_descriptions/{identifier}](#get-/job_descriptions/-identifier-) endpoint to check processing status and retrieve results.
        /// Job Descriptions can be uploaded as a file or a URL.
        /// </remarks>
        public virtual Response<object> CreateJobDescription(Stream file = null, string url = null, string identifier = null, string fileName = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateJobDescription");
            scope.Start();
            try
            {
                return RestClient.CreateJobDescription(file, url, identifier, fileName, wait, language, expiryTime, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get job description results for a specific job description file. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Returns all the results for that job description if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/job_descriptions](#post-/job_descriptions) endpoint.
        /// </remarks>
        public virtual async Task<Response<object>> GetJobDescriptionAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetJobDescription");
            scope.Start();
            try
            {
                return await RestClient.GetJobDescriptionAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get job description results for a specific job description file. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Returns all the results for that job description if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/job_descriptions](#post-/job_descriptions) endpoint.
        /// </remarks>
        public virtual Response<object> GetJobDescription(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetJobDescription");
            scope.Start();
            try
            {
                return RestClient.GetJobDescription(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a job description. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified job description from the database. </remarks>
        public virtual async Task<Response<RequestError>> DeleteJobDescriptionAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteJobDescription");
            scope.Start();
            try
            {
                return await RestClient.DeleteJobDescriptionAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a job description. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified job description from the database. </remarks>
        public virtual Response<RequestError> DeleteJobDescription(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteJobDescription");
            scope.Start();
            try
            {
                return RestClient.DeleteJobDescription(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Search through parsed job descriptions. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Searches through parsed job descriptions. You can search with custom criterias or a resume. </remarks>
        public virtual async Task<Response<object>> CreateJobDescriptionSearchAsync(JobDescriptionSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateJobDescriptionSearch");
            scope.Start();
            try
            {
                return await RestClient.CreateJobDescriptionSearchAsync(body, offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Search through parsed job descriptions. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Searches through parsed job descriptions. You can search with custom criterias or a resume. </remarks>
        public virtual Response<object> CreateJobDescriptionSearch(JobDescriptionSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateJobDescriptionSearch");
            scope.Start();
            try
            {
                return RestClient.CreateJobDescriptionSearch(body, offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all indexes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexes. </remarks>
        public virtual async Task<Response<object>> GetAllIndexesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexes");
            scope.Start();
            try
            {
                return await RestClient.GetAllIndexesAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all indexes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexes. </remarks>
        public virtual Response<object> GetAllIndexes(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexes");
            scope.Start();
            try
            {
                return RestClient.GetAllIndexes(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new index. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an index for the search tool. </remarks>
        public virtual async Task<Response<object>> CreateIndexAsync(string name = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndex");
            scope.Start();
            try
            {
                return await RestClient.CreateIndexAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new index. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an index for the search tool. </remarks>
        public virtual Response<object> CreateIndex(string name = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndex");
            scope.Start();
            try
            {
                return RestClient.CreateIndex(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified index from the database. </remarks>
        public virtual async Task<Response<RequestError>> DeleteIndexAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndex");
            scope.Start();
            try
            {
                return await RestClient.DeleteIndexAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified index from the database. </remarks>
        public virtual Response<RequestError> DeleteIndex(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndex");
            scope.Start();
            try
            {
                return RestClient.DeleteIndex(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get indexed documents for a specific index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexed documents for that index. </remarks>
        public virtual async Task<Response<object>> GetAllIndexDocumentsAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexDocuments");
            scope.Start();
            try
            {
                return await RestClient.GetAllIndexDocumentsAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get indexed documents for a specific index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexed documents for that index. </remarks>
        public virtual Response<object> GetAllIndexDocuments(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllIndexDocuments");
            scope.Start();
            try
            {
                return RestClient.GetAllIndexDocuments(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Index a new document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an indexed document for the search tool. </remarks>
        public virtual async Task<Response<object>> CreateIndexDocumentAsync(string name, PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndexDocument");
            scope.Start();
            try
            {
                return await RestClient.CreateIndexDocumentAsync(name, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Index a new document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an indexed document for the search tool. </remarks>
        public virtual Response<object> CreateIndexDocument(string name, PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateIndexDocument");
            scope.Start();
            try
            {
                return RestClient.CreateIndexDocument(name, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an indexed document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete the specified indexed document from the database. </remarks>
        public virtual async Task<Response<RequestError>> DeleteIndexDocumentAsync(string name, string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndexDocument");
            scope.Start();
            try
            {
                return await RestClient.DeleteIndexDocumentAsync(name, identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an indexed document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete the specified indexed document from the database. </remarks>
        public virtual Response<RequestError> DeleteIndexDocument(string name, string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteIndexDocument");
            scope.Start();
            try
            {
                return RestClient.DeleteIndexDocument(name, identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all invoices. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the invoice summaries for that user, limited to 300 per page. </remarks>
        public virtual async Task<Response<object>> GetAllInvoicesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllInvoices");
            scope.Start();
            try
            {
                return await RestClient.GetAllInvoicesAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all invoices. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the invoice summaries for that user, limited to 300 per page. </remarks>
        public virtual Response<object> GetAllInvoices(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllInvoices");
            scope.Start();
            try
            {
                return RestClient.GetAllInvoices(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload an invoice for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> The String to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads an invoice for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/invoices/{identifier}](#get-/invoices/-identifier-) endpoint to check processing status and retrieve results.
        /// </remarks>
        public virtual async Task<Response<object>> CreateInvoiceAsync(Stream file = null, string url = null, string identifier = null, string fileName = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateInvoice");
            scope.Start();
            try
            {
                return await RestClient.CreateInvoiceAsync(file, url, identifier, fileName, wait, language, expiryTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload an invoice for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> The String to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads an invoice for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/invoices/{identifier}](#get-/invoices/-identifier-) endpoint to check processing status and retrieve results.
        /// </remarks>
        public virtual Response<object> CreateInvoice(Stream file = null, string url = null, string identifier = null, string fileName = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateInvoice");
            scope.Start();
            try
            {
                return RestClient.CreateInvoice(file, url, identifier, fileName, wait, language, expiryTime, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get parse results for a specific invoice. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Returns all the parse results for that invoice if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the invoice via the [/invoices](#post-/invoices) endpoint.
        /// </remarks>
        public virtual async Task<Response<object>> GetInvoiceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetInvoice");
            scope.Start();
            try
            {
                return await RestClient.GetInvoiceAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get parse results for a specific invoice. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Returns all the parse results for that invoice if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the invoice via the [/invoices](#post-/invoices) endpoint.
        /// </remarks>
        public virtual Response<object> GetInvoice(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetInvoice");
            scope.Start();
            try
            {
                return RestClient.GetInvoice(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an invoice. </summary>
        /// <param name="identifier"> Invoice identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete the specified invoice from the database. Note, any invoices deleted from the database will no longer be used in any tailored customer models. </remarks>
        public virtual async Task<Response<RequestError>> DeleteInvoiceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteInvoice");
            scope.Start();
            try
            {
                return await RestClient.DeleteInvoiceAsync(identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an invoice. </summary>
        /// <param name="identifier"> Invoice identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete the specified invoice from the database. Note, any invoices deleted from the database will no longer be used in any tailored customer models. </remarks>
        public virtual Response<RequestError> DeleteInvoice(string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.DeleteInvoice");
            scope.Start();
            try
            {
                return RestClient.DeleteInvoice(identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List occupation groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the list of searchable occupation groups. </remarks>
        public virtual async Task<Response<object>> ListOccupationGroupsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.ListOccupationGroups");
            scope.Start();
            try
            {
                return await RestClient.ListOccupationGroupsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List occupation groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the list of searchable occupation groups. </remarks>
        public virtual Response<object> ListOccupationGroups(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.ListOccupationGroups");
            scope.Start();
            try
            {
                return RestClient.ListOccupationGroups(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all users. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the users. </remarks>
        public virtual async Task<Response<object>> GetAllUsersAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllUsers");
            scope.Start();
            try
            {
                return await RestClient.GetAllUsersAsync(offset, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of all users. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the users. </remarks>
        public virtual Response<object> GetAllUsers(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.GetAllUsers");
            scope.Start();
            try
            {
                return RestClient.GetAllUsers(offset, limit, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new user. </summary>
        /// <param name="username"> The String to use. </param>
        /// <param name="id"> The String to use. </param>
        /// <param name="name"> The String to use. </param>
        /// <param name="email"> The String to use. </param>
        /// <param name="apiKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an user as part of your account. </remarks>
        public virtual async Task<Response<object>> CreateUserAsync(string username, string id = null, string name = null, string email = null, string apiKey = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateUser");
            scope.Start();
            try
            {
                return await RestClient.CreateUserAsync(username, id, name, email, apiKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new user. </summary>
        /// <param name="username"> The String to use. </param>
        /// <param name="id"> The String to use. </param>
        /// <param name="name"> The String to use. </param>
        /// <param name="email"> The String to use. </param>
        /// <param name="apiKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an user as part of your account. </remarks>
        public virtual Response<object> CreateUser(string username, string id = null, string name = null, string email = null, string apiKey = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AffindaAPIClient.CreateUser");
            scope.Start();
            try
            {
                return RestClient.CreateUser(username, id, name, email, apiKey, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
