// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Affinda.API.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Affinda.API
{
    internal partial class AffindaAPIRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Region? _region;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of AffindaAPIRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="region"> region - server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public AffindaAPIRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Region? region = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _region = region ?? Region.Api;
        }

        internal HttpMessage CreateGetAllWorkspacesRequest(string organization, string name)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/workspaces", false);
            uri.AppendQuery("organization", organization, true);
            if (name != null)
            {
                uri.AppendQuery("name", name, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all workspaces. </summary>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="name"> Filter by name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="organization"/> is null. </exception>
        /// <remarks> Returns your workspaces. </remarks>
        public async Task<Response<IReadOnlyList<Workspace>>> GetAllWorkspacesAsync(string organization, string name = null, CancellationToken cancellationToken = default)
        {
            if (organization == null)
            {
                throw new ArgumentNullException(nameof(organization));
            }

            using var message = CreateGetAllWorkspacesRequest(organization, name);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Workspace> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Workspace> array = new List<Workspace>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Workspace.DeserializeWorkspace(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all workspaces. </summary>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="name"> Filter by name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="organization"/> is null. </exception>
        /// <remarks> Returns your workspaces. </remarks>
        public Response<IReadOnlyList<Workspace>> GetAllWorkspaces(string organization, string name = null, CancellationToken cancellationToken = default)
        {
            if (organization == null)
            {
                throw new ArgumentNullException(nameof(organization));
            }

            using var message = CreateGetAllWorkspacesRequest(organization, name);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Workspace> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Workspace> array = new List<Workspace>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Workspace.DeserializeWorkspace(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateWorkspaceRequest(WorkspaceCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/workspaces", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create a workspace. </summary>
        /// <param name="body"> Workspace to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<Workspace>> CreateWorkspaceAsync(WorkspaceCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateWorkspaceRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Workspace value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Workspace.DeserializeWorkspace(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a workspace. </summary>
        /// <param name="body"> Workspace to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<Workspace> CreateWorkspace(WorkspaceCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateWorkspaceRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Workspace value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Workspace.DeserializeWorkspace(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetWorkspaceRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/workspaces/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific workspace. </remarks>
        public async Task<Response<Workspace>> GetWorkspaceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetWorkspaceRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Workspace value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Workspace.DeserializeWorkspace(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific workspace. </remarks>
        public Response<Workspace> GetWorkspace(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetWorkspaceRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Workspace value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Workspace.DeserializeWorkspace(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateWorkspaceRequest(string identifier, WorkspaceUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/workspaces/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update a workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="body"> Workspace data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update a workspace. </remarks>
        public async Task<Response<Workspace>> UpdateWorkspaceAsync(string identifier, WorkspaceUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateWorkspaceRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Workspace value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Workspace.DeserializeWorkspace(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="body"> Workspace data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update a workspace. </remarks>
        public Response<Workspace> UpdateWorkspace(string identifier, WorkspaceUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateWorkspaceRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Workspace value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Workspace.DeserializeWorkspace(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteWorkspaceRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/workspaces/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified workspace from the database. </remarks>
        public async Task<Response> DeleteWorkspaceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteWorkspaceRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified workspace from the database. </remarks>
        public Response DeleteWorkspace(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteWorkspaceRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetUsageByWorkspaceRequest(string identifier, string start, string end)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/workspaces/", false);
            uri.AppendPath(identifier, true);
            uri.AppendPath("/usage", false);
            if (start != null)
            {
                uri.AppendQuery("start", start, true);
            }
            if (end != null)
            {
                uri.AppendQuery("end", end, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get usage by workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="start"> Start date of the period to retrieve. Format: YYYY-MM. </param>
        /// <param name="end"> End date of the period to retrieve. Format: YYYY-MM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return monthly credits consumption of a workspace. </remarks>
        public async Task<Response<IReadOnlyList<UsageByWorkspace>>> GetUsageByWorkspaceAsync(string identifier, string start = null, string end = null, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetUsageByWorkspaceRequest(identifier, start, end);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<UsageByWorkspace> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<UsageByWorkspace> array = new List<UsageByWorkspace>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(UsageByWorkspace.DeserializeUsageByWorkspace(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get usage by workspace. </summary>
        /// <param name="identifier"> Workspace&apos;s identifier. </param>
        /// <param name="start"> Start date of the period to retrieve. Format: YYYY-MM. </param>
        /// <param name="end"> End date of the period to retrieve. Format: YYYY-MM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return monthly credits consumption of a workspace. </remarks>
        public Response<IReadOnlyList<UsageByWorkspace>> GetUsageByWorkspace(string identifier, string start = null, string end = null, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetUsageByWorkspaceRequest(identifier, start, end);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<UsageByWorkspace> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<UsageByWorkspace> array = new List<UsageByWorkspace>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(UsageByWorkspace.DeserializeUsageByWorkspace(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllWorkspaceMembershipsRequest(int? offset, int? limit, string workspace, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/workspace_memberships", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (workspace != null)
            {
                uri.AppendQuery("workspace", workspace, true);
            }
            if (user != null)
            {
                uri.AppendQuery("user", user, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all workspace memberships. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="user"> Partial text match on user&apos;s email, case-insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the memberships of your workspaces. </remarks>
        public async Task<Response<PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema>> GetAllWorkspaceMembershipsAsync(int? offset = null, int? limit = null, string workspace = null, string user = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllWorkspaceMembershipsRequest(offset, limit, workspace, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema.DeserializePathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all workspace memberships. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="user"> Partial text match on user&apos;s email, case-insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the memberships of your workspaces. </remarks>
        public Response<PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema> GetAllWorkspaceMemberships(int? offset = null, int? limit = null, string workspace = null, string user = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllWorkspaceMembershipsRequest(offset, limit, workspace, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema.DeserializePathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateWorkspaceMembershipRequest(WorkspaceMembershipCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/workspace_memberships", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create a workspace membership. </summary>
        /// <param name="body"> The WorkspaceMembershipCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Create a workspace membership. </remarks>
        public async Task<Response<WorkspaceMembership>> CreateWorkspaceMembershipAsync(WorkspaceMembershipCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateWorkspaceMembershipRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        WorkspaceMembership value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = WorkspaceMembership.DeserializeWorkspaceMembership(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a workspace membership. </summary>
        /// <param name="body"> The WorkspaceMembershipCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Create a workspace membership. </remarks>
        public Response<WorkspaceMembership> CreateWorkspaceMembership(WorkspaceMembershipCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateWorkspaceMembershipRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        WorkspaceMembership value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = WorkspaceMembership.DeserializeWorkspaceMembership(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetWorkspaceMembershipRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/workspace_memberships/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific workspace membership. </summary>
        /// <param name="identifier"> Workspace membership&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific workspace membership. </remarks>
        public async Task<Response<WorkspaceMembership>> GetWorkspaceMembershipAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetWorkspaceMembershipRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkspaceMembership value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = WorkspaceMembership.DeserializeWorkspaceMembership(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific workspace membership. </summary>
        /// <param name="identifier"> Workspace membership&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific workspace membership. </remarks>
        public Response<WorkspaceMembership> GetWorkspaceMembership(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetWorkspaceMembershipRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkspaceMembership value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = WorkspaceMembership.DeserializeWorkspaceMembership(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteWorkspaceMembershipRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/workspace_memberships/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a workspace membership. </summary>
        /// <param name="identifier"> Workspace membership&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Remove an user from a workspace. </remarks>
        public async Task<Response> DeleteWorkspaceMembershipAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteWorkspaceMembershipRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a workspace membership. </summary>
        /// <param name="identifier"> Workspace membership&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Remove an user from a workspace. </remarks>
        public Response DeleteWorkspaceMembership(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteWorkspaceMembershipRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllCollectionsRequest(string workspace)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/collections", false);
            uri.AppendQuery("workspace", workspace, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all collections. </summary>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspace"/> is null. </exception>
        /// <remarks> Returns your collections. </remarks>
        public async Task<Response<IReadOnlyList<Collection>>> GetAllCollectionsAsync(string workspace, CancellationToken cancellationToken = default)
        {
            if (workspace == null)
            {
                throw new ArgumentNullException(nameof(workspace));
            }

            using var message = CreateGetAllCollectionsRequest(workspace);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Collection> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Collection> array = new List<Collection>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Collection.DeserializeCollection(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all collections. </summary>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspace"/> is null. </exception>
        /// <remarks> Returns your collections. </remarks>
        public Response<IReadOnlyList<Collection>> GetAllCollections(string workspace, CancellationToken cancellationToken = default)
        {
            if (workspace == null)
            {
                throw new ArgumentNullException(nameof(workspace));
            }

            using var message = CreateGetAllCollectionsRequest(workspace);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Collection> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Collection> array = new List<Collection>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Collection.DeserializeCollection(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateCollectionRequest(CollectionCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/collections", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create a collection. </summary>
        /// <param name="body"> The CollectionCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<Collection>> CreateCollectionAsync(CollectionCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateCollectionRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Collection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a collection. </summary>
        /// <param name="body"> The CollectionCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<Collection> CreateCollection(CollectionCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateCollectionRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Collection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCollectionRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/collections/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific collection. </remarks>
        public async Task<Response<Collection>> GetCollectionAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetCollectionRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Collection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific collection. </remarks>
        public Response<Collection> GetCollection(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetCollectionRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Collection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateCollectionRequest(string identifier, CollectionUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/collections/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update a collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="body"> Collection data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of a collection. </remarks>
        public async Task<Response<Collection>> UpdateCollectionAsync(string identifier, CollectionUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateCollectionRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Collection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="body"> Collection data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of a collection. </remarks>
        public Response<Collection> UpdateCollection(string identifier, CollectionUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateCollectionRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Collection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Collection.DeserializeCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteCollectionRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/collections/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified collection from the database. </remarks>
        public async Task<Response> DeleteCollectionAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteCollectionRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified collection from the database. </remarks>
        public Response DeleteCollection(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteCollectionRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateDataFieldForCollectionRequest(string identifier, DataFieldCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/collections/", false);
            uri.AppendPath(identifier, true);
            uri.AppendPath("/create_data_field", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create data field for a collection along with a new data point. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="body"> The data field and data point to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<DataField>> CreateDataFieldForCollectionAsync(string identifier, DataFieldCreate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateDataFieldForCollectionRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataField value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataField.DeserializeDataField(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create data field for a collection along with a new data point. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="body"> The data field and data point to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        public Response<DataField> CreateDataFieldForCollection(string identifier, DataFieldCreate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateDataFieldForCollectionRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataField value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataField.DeserializeDataField(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataFieldForCollectionRequest(string identifier, string datapointIdentifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/collections/", false);
            uri.AppendPath(identifier, true);
            uri.AppendPath("/fields/", false);
            uri.AppendPath(datapointIdentifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get data field for a collection assosciated with a data point. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="datapointIdentifier"> Datapoint&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="datapointIdentifier"/> is null. </exception>
        /// <remarks> Get a data field for a collection assosciated with a data point. </remarks>
        public async Task<Response<CollectionField>> GetDataFieldForCollectionAsync(string identifier, string datapointIdentifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (datapointIdentifier == null)
            {
                throw new ArgumentNullException(nameof(datapointIdentifier));
            }

            using var message = CreateGetDataFieldForCollectionRequest(identifier, datapointIdentifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionField value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CollectionField.DeserializeCollectionField(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get data field for a collection assosciated with a data point. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="datapointIdentifier"> Datapoint&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="datapointIdentifier"/> is null. </exception>
        /// <remarks> Get a data field for a collection assosciated with a data point. </remarks>
        public Response<CollectionField> GetDataFieldForCollection(string identifier, string datapointIdentifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (datapointIdentifier == null)
            {
                throw new ArgumentNullException(nameof(datapointIdentifier));
            }

            using var message = CreateGetDataFieldForCollectionRequest(identifier, datapointIdentifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionField value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CollectionField.DeserializeCollectionField(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDataFieldForCollectionRequest(string identifier, string datapointIdentifier, CollectionField body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/collections/", false);
            uri.AppendPath(identifier, true);
            uri.AppendPath("/fields/", false);
            uri.AppendPath(datapointIdentifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update data field for a collection assosciated with a data point. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="datapointIdentifier"> Datapoint&apos;s identifier. </param>
        /// <param name="body"> Data field properties to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/>, <paramref name="datapointIdentifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update data field for a collection assosciated with a data point. </remarks>
        public async Task<Response<CollectionField>> UpdateDataFieldForCollectionAsync(string identifier, string datapointIdentifier, CollectionField body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (datapointIdentifier == null)
            {
                throw new ArgumentNullException(nameof(datapointIdentifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateDataFieldForCollectionRequest(identifier, datapointIdentifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionField value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CollectionField.DeserializeCollectionField(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update data field for a collection assosciated with a data point. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="datapointIdentifier"> Datapoint&apos;s identifier. </param>
        /// <param name="body"> Data field properties to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/>, <paramref name="datapointIdentifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update data field for a collection assosciated with a data point. </remarks>
        public Response<CollectionField> UpdateDataFieldForCollection(string identifier, string datapointIdentifier, CollectionField body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (datapointIdentifier == null)
            {
                throw new ArgumentNullException(nameof(datapointIdentifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateDataFieldForCollectionRequest(identifier, datapointIdentifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionField value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CollectionField.DeserializeCollectionField(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetUsageByCollectionRequest(string identifier, string start, string end)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/collections/", false);
            uri.AppendPath(identifier, true);
            uri.AppendPath("/usage", false);
            if (start != null)
            {
                uri.AppendQuery("start", start, true);
            }
            if (end != null)
            {
                uri.AppendQuery("end", end, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get usage by collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="start"> Start date of the period to retrieve. Format: YYYY-MM. </param>
        /// <param name="end"> End date of the period to retrieve. Format: YYYY-MM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return monthly credits consumption of a collection. </remarks>
        public async Task<Response<IReadOnlyList<UsageByCollection>>> GetUsageByCollectionAsync(string identifier, string start = null, string end = null, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetUsageByCollectionRequest(identifier, start, end);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<UsageByCollection> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<UsageByCollection> array = new List<UsageByCollection>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(UsageByCollection.DeserializeUsageByCollection(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get usage by collection. </summary>
        /// <param name="identifier"> Collection&apos;s identifier. </param>
        /// <param name="start"> Start date of the period to retrieve. Format: YYYY-MM. </param>
        /// <param name="end"> End date of the period to retrieve. Format: YYYY-MM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return monthly credits consumption of a collection. </remarks>
        public Response<IReadOnlyList<UsageByCollection>> GetUsageByCollection(string identifier, string start = null, string end = null, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetUsageByCollectionRequest(identifier, start, end);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<UsageByCollection> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<UsageByCollection> array = new List<UsageByCollection>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(UsageByCollection.DeserializeUsageByCollection(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllDocumentsRequest(int? offset, int? limit, string workspace, string collection, DocumentState? state, IEnumerable<int> tags, DateRange? createdDt, string search, IEnumerable<string> ordering, bool? includeData, IEnumerable<string> exclude, bool? inReview, bool? failed, bool? ready, bool? validatable, bool? hasChallenges, string customIdentifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/documents", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (workspace != null)
            {
                uri.AppendQuery("workspace", workspace, true);
            }
            if (collection != null)
            {
                uri.AppendQuery("collection", collection, true);
            }
            if (state != null)
            {
                uri.AppendQuery("state", state.Value.ToString(), true);
            }
            if (tags != null)
            {
                uri.AppendQueryDelimited("tags", tags, ",", true);
            }
            if (createdDt != null)
            {
                uri.AppendQuery("created_dt", createdDt.Value.ToString(), true);
            }
            if (search != null)
            {
                uri.AppendQuery("search", search, true);
            }
            if (ordering != null)
            {
                uri.AppendQueryDelimited("ordering", ordering, ",", true);
            }
            if (includeData != null)
            {
                uri.AppendQuery("include_data", includeData.Value, true);
            }
            if (exclude != null)
            {
                uri.AppendQueryDelimited("exclude", exclude, ",", true);
            }
            if (inReview != null)
            {
                uri.AppendQuery("in_review", inReview.Value, true);
            }
            if (failed != null)
            {
                uri.AppendQuery("failed", failed.Value, true);
            }
            if (ready != null)
            {
                uri.AppendQuery("ready", ready.Value, true);
            }
            if (validatable != null)
            {
                uri.AppendQuery("validatable", validatable.Value, true);
            }
            if (hasChallenges != null)
            {
                uri.AppendQuery("has_challenges", hasChallenges.Value, true);
            }
            if (customIdentifier != null)
            {
                uri.AppendQuery("custom_identifier", customIdentifier, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all documents. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="collection"> Filter by collection. </param>
        /// <param name="state"> Filter by the document&apos;s state. </param>
        /// <param name="tags"> Filter by tag&apos;s IDs. </param>
        /// <param name="createdDt"> Filter by created datetime. </param>
        /// <param name="search"> Partial, case-insensitive match with file name or tag name. </param>
        /// <param name="ordering"> Sort the result set. A &quot;-&quot; at the beginning denotes DESC sort, e.g. -created_dt. Sort by multiple fields is supported. Supported values include: &apos;file_name&apos;, &apos;extractor&apos;, &apos;created_dt&apos;, &apos;validated_dt&apos;, &apos;archived_dt&apos; and &apos;parsed__&lt;dataPointSlug&gt;&apos;. </param>
        /// <param name="includeData"> By default, this endpoint returns only the meta data of the documents. Set this to `true` will return a summary of the data that was parsed. If you want to retrieve the full set of data for a document, use the `GET /documents/{identifier}` endpoint. </param>
        /// <param name="exclude"> Exclude some documents from the result. </param>
        /// <param name="inReview"> Exclude documents that are currently being reviewed. </param>
        /// <param name="failed"> Filter by failed status. </param>
        /// <param name="ready"> Filter by ready status. </param>
        /// <param name="validatable"> Filter for validatable documents. </param>
        /// <param name="hasChallenges"> Filter for documents with challenges. </param>
        /// <param name="customIdentifier"> Filter for documents with this custom identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the document summaries for that user, limited to 300 per page. </remarks>
        public async Task<Response<PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema>> GetAllDocumentsAsync(int? offset = null, int? limit = null, string workspace = null, string collection = null, DocumentState? state = null, IEnumerable<int> tags = null, DateRange? createdDt = null, string search = null, IEnumerable<string> ordering = null, bool? includeData = null, IEnumerable<string> exclude = null, bool? inReview = null, bool? failed = null, bool? ready = null, bool? validatable = null, bool? hasChallenges = null, string customIdentifier = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllDocumentsRequest(offset, limit, workspace, collection, state, tags, createdDt, search, ordering, includeData, exclude, inReview, failed, ready, validatable, hasChallenges, customIdentifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema.DeserializePathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all documents. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="collection"> Filter by collection. </param>
        /// <param name="state"> Filter by the document&apos;s state. </param>
        /// <param name="tags"> Filter by tag&apos;s IDs. </param>
        /// <param name="createdDt"> Filter by created datetime. </param>
        /// <param name="search"> Partial, case-insensitive match with file name or tag name. </param>
        /// <param name="ordering"> Sort the result set. A &quot;-&quot; at the beginning denotes DESC sort, e.g. -created_dt. Sort by multiple fields is supported. Supported values include: &apos;file_name&apos;, &apos;extractor&apos;, &apos;created_dt&apos;, &apos;validated_dt&apos;, &apos;archived_dt&apos; and &apos;parsed__&lt;dataPointSlug&gt;&apos;. </param>
        /// <param name="includeData"> By default, this endpoint returns only the meta data of the documents. Set this to `true` will return a summary of the data that was parsed. If you want to retrieve the full set of data for a document, use the `GET /documents/{identifier}` endpoint. </param>
        /// <param name="exclude"> Exclude some documents from the result. </param>
        /// <param name="inReview"> Exclude documents that are currently being reviewed. </param>
        /// <param name="failed"> Filter by failed status. </param>
        /// <param name="ready"> Filter by ready status. </param>
        /// <param name="validatable"> Filter for validatable documents. </param>
        /// <param name="hasChallenges"> Filter for documents with challenges. </param>
        /// <param name="customIdentifier"> Filter for documents with this custom identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the document summaries for that user, limited to 300 per page. </remarks>
        public Response<PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema> GetAllDocuments(int? offset = null, int? limit = null, string workspace = null, string collection = null, DocumentState? state = null, IEnumerable<int> tags = null, DateRange? createdDt = null, string search = null, IEnumerable<string> ordering = null, bool? includeData = null, IEnumerable<string> exclude = null, bool? inReview = null, bool? failed = null, bool? ready = null, bool? validatable = null, bool? hasChallenges = null, string customIdentifier = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllDocumentsRequest(offset, limit, workspace, collection, state, tags, createdDt, search, ordering, includeData, exclude, inReview, failed, ready, validatable, hasChallenges, customIdentifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema.DeserializePathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateDocumentRequest(Stream file, string url, string data, string collection, string workspace, string wait, string identifier, string customIdentifier, string fileName, string expiryTime, string language, string rejectDuplicates, string regionBias, string lowPriority)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/documents", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (data != null)
            {
                content.Add(new StringRequestContent(data), "data", null);
            }
            if (collection != null)
            {
                content.Add(new StringRequestContent(collection), "collection", null);
            }
            if (workspace != null)
            {
                content.Add(new StringRequestContent(workspace), "workspace", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (customIdentifier != null)
            {
                content.Add(new StringRequestContent(customIdentifier), "customIdentifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (rejectDuplicates != null)
            {
                content.Add(new StringRequestContent(rejectDuplicates), "rejectDuplicates", null);
            }
            if (regionBias != null)
            {
                content.Add(new StringRequestContent(regionBias), "regionBias", null);
            }
            if (lowPriority != null)
            {
                content.Add(new StringRequestContent(lowPriority), "lowPriority", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Upload a document for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> URL to download the document. </param>
        /// <param name="data"> Create resume or job description directly from data. </param>
        /// <param name="collection"> The String to use. </param>
        /// <param name="workspace"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="identifier"> Deprecated in favor of `customIdentifier`. </param>
        /// <param name="customIdentifier"> Specify a custom identifier for the document if you need one, not required to be unique. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="rejectDuplicates"> The String to use. </param>
        /// <param name="regionBias"> A JSON representation of the RegionBias object. </param>
        /// <param name="lowPriority"> Explicitly mark this document as low priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a document for parsing. When successful, returns an `identifier` in the response for subsequent use with the [/documents/{identifier}](#get-/v3/documents/-identifier-) endpoint to check processing status and retrieve results.&lt;br/&gt;
        /// </remarks>
        public async Task<Response<Document>> CreateDocumentAsync(Stream file = null, string url = null, string data = null, string collection = null, string workspace = null, string wait = null, string identifier = null, string customIdentifier = null, string fileName = null, string expiryTime = null, string language = null, string rejectDuplicates = null, string regionBias = null, string lowPriority = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateDocumentRequest(file, url, data, collection, workspace, wait, identifier, customIdentifier, fileName, expiryTime, language, rejectDuplicates, regionBias, lowPriority);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Document value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Document.DeserializeDocument(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Upload a document for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> URL to download the document. </param>
        /// <param name="data"> Create resume or job description directly from data. </param>
        /// <param name="collection"> The String to use. </param>
        /// <param name="workspace"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="identifier"> Deprecated in favor of `customIdentifier`. </param>
        /// <param name="customIdentifier"> Specify a custom identifier for the document if you need one, not required to be unique. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="rejectDuplicates"> The String to use. </param>
        /// <param name="regionBias"> A JSON representation of the RegionBias object. </param>
        /// <param name="lowPriority"> Explicitly mark this document as low priority. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a document for parsing. When successful, returns an `identifier` in the response for subsequent use with the [/documents/{identifier}](#get-/v3/documents/-identifier-) endpoint to check processing status and retrieve results.&lt;br/&gt;
        /// </remarks>
        public Response<Document> CreateDocument(Stream file = null, string url = null, string data = null, string collection = null, string workspace = null, string wait = null, string identifier = null, string customIdentifier = null, string fileName = null, string expiryTime = null, string language = null, string rejectDuplicates = null, string regionBias = null, string lowPriority = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateDocumentRequest(file, url, data, collection, workspace, wait, identifier, customIdentifier, fileName, expiryTime, language, rejectDuplicates, regionBias, lowPriority);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Document value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Document.DeserializeDocument(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDocumentRequest(string identifier, DocumentFormat? format)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/documents/", false);
            uri.AppendPath(identifier, true);
            if (format != null)
            {
                uri.AppendQuery("format", format.Value.ToString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="format"> Specify which format you want the response to be. Default is &quot;json&quot;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific document. </remarks>
        public async Task<Response<Document>> GetDocumentAsync(string identifier, DocumentFormat? format = null, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetDocumentRequest(identifier, format);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Document value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Document.DeserializeDocument(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="format"> Specify which format you want the response to be. Default is &quot;json&quot;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific document. </remarks>
        public Response<Document> GetDocument(string identifier, DocumentFormat? format = null, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetDocumentRequest(identifier, format);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Document value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Document.DeserializeDocument(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDocumentRequest(string identifier, DocumentUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/documents/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update a document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="body"> Document data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update file name, expiry time, or move to another collection, etc. </remarks>
        public async Task<Response<Document>> UpdateDocumentAsync(string identifier, DocumentUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateDocumentRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Document value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Document.DeserializeDocument(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="body"> Document data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update file name, expiry time, or move to another collection, etc. </remarks>
        public Response<Document> UpdateDocument(string identifier, DocumentUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateDocumentRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Document value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Document.DeserializeDocument(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDocumentRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/documents/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified document from the database. </remarks>
        public async Task<Response> DeleteDocumentAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteDocumentRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified document from the database. </remarks>
        public Response DeleteDocument(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteDocumentRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDocumentDataRequest(string identifier, PathsO1OmciV3DocumentsIdentifierUpdateDataPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/documents/", false);
            uri.AppendPath(identifier, true);
            uri.AppendPath("/update_data", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update a document&apos;s data. </summary>
        /// <param name="identifier"> Resume or Job Description identifier. </param>
        /// <param name="body"> Resume data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// Update data of a document.
        /// Only applicable for resumes and job descriptions. For other document types, please use the `PATCH /annotations/{id}` endpoint or the `POST /annotations/batch_update` endpoint.
        /// </remarks>
        public async Task<Response<Document>> UpdateDocumentDataAsync(string identifier, PathsO1OmciV3DocumentsIdentifierUpdateDataPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateDocumentDataRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Document value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Document.DeserializeDocument(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a document&apos;s data. </summary>
        /// <param name="identifier"> Resume or Job Description identifier. </param>
        /// <param name="body"> Resume data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// Update data of a document.
        /// Only applicable for resumes and job descriptions. For other document types, please use the `PATCH /annotations/{id}` endpoint or the `POST /annotations/batch_update` endpoint.
        /// </remarks>
        public Response<Document> UpdateDocumentData(string identifier, PathsO1OmciV3DocumentsIdentifierUpdateDataPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateDocumentDataRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Document value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Document.DeserializeDocument(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBatchAddTagRequest(BatchAddTagRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/documents/batch_add_tag", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Add a tag to documents. </summary>
        /// <param name="body"> Specify the tag and the documents to tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// Add a tag to documents.
        /// Tags are used to group documents together.
        /// Tags can be used to filter documents.
        /// 
        /// </remarks>
        public async Task<Response> BatchAddTagAsync(BatchAddTagRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchAddTagRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a tag to documents. </summary>
        /// <param name="body"> Specify the tag and the documents to tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// Add a tag to documents.
        /// Tags are used to group documents together.
        /// Tags can be used to filter documents.
        /// 
        /// </remarks>
        public Response BatchAddTag(BatchAddTagRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchAddTagRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBatchRemoveTagRequest(BatchRemoveTagRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/documents/batch_remove_tag", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Remove a tag from documents. </summary>
        /// <param name="body"> Specify the tag and the documents to remove the tag from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Remove a tag from documents. </remarks>
        public async Task<Response> BatchRemoveTagAsync(BatchRemoveTagRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchRemoveTagRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a tag from documents. </summary>
        /// <param name="body"> Specify the tag and the documents to remove the tag from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Remove a tag from documents. </remarks>
        public Response BatchRemoveTag(BatchRemoveTagRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchRemoveTagRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateEditDocumentPagesRequest(string identifier, DocumentEditRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/validate/", false);
            uri.AppendPath(identifier, true);
            uri.AppendPath("/split", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Edit pages of a document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="body"> Describe how the pages should be edited. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// Split / merge / rotate / delete pages of a document.
        /// Documents with multiple pages can be splitted into multiple documents, or merged into one document.
        /// Each page can also be rotated. Edit operations will trigger re-parsing of the documents involved.
        /// 
        /// </remarks>
        public async Task<Response<IReadOnlyList<Meta>>> EditDocumentPagesAsync(string identifier, DocumentEditRequest body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateEditDocumentPagesRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Meta> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Meta> array = new List<Meta>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Meta.DeserializeMeta(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Edit pages of a document. </summary>
        /// <param name="identifier"> Document&apos;s identifier. </param>
        /// <param name="body"> Describe how the pages should be edited. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// Split / merge / rotate / delete pages of a document.
        /// Documents with multiple pages can be splitted into multiple documents, or merged into one document.
        /// Each page can also be rotated. Edit operations will trigger re-parsing of the documents involved.
        /// 
        /// </remarks>
        public Response<IReadOnlyList<Meta>> EditDocumentPages(string identifier, DocumentEditRequest body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateEditDocumentPagesRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Meta> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Meta> array = new List<Meta>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Meta.DeserializeMeta(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllExtractorsRequest(string organization, bool? includePublicExtractors, string name, bool? validatable)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/extractors", false);
            uri.AppendQuery("organization", organization, true);
            if (includePublicExtractors != null)
            {
                uri.AppendQuery("include_public_extractors", includePublicExtractors.Value, true);
            }
            if (name != null)
            {
                uri.AppendQuery("name", name, true);
            }
            if (validatable != null)
            {
                uri.AppendQuery("validatable", validatable.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all extractors. </summary>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="includePublicExtractors"> Whether to include Affinda&apos;s off-the-shelf extractors. </param>
        /// <param name="name"> Filter by name. </param>
        /// <param name="validatable"> Filter by validatable. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="organization"/> is null. </exception>
        /// <remarks> Returns your custom extractors as well as Affinda&apos;s off-the-shelf extractors. </remarks>
        public async Task<Response<IReadOnlyList<Extractor>>> GetAllExtractorsAsync(string organization, bool? includePublicExtractors = null, string name = null, bool? validatable = null, CancellationToken cancellationToken = default)
        {
            if (organization == null)
            {
                throw new ArgumentNullException(nameof(organization));
            }

            using var message = CreateGetAllExtractorsRequest(organization, includePublicExtractors, name, validatable);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Extractor> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Extractor> array = new List<Extractor>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Extractor.DeserializeExtractor(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all extractors. </summary>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="includePublicExtractors"> Whether to include Affinda&apos;s off-the-shelf extractors. </param>
        /// <param name="name"> Filter by name. </param>
        /// <param name="validatable"> Filter by validatable. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="organization"/> is null. </exception>
        /// <remarks> Returns your custom extractors as well as Affinda&apos;s off-the-shelf extractors. </remarks>
        public Response<IReadOnlyList<Extractor>> GetAllExtractors(string organization, bool? includePublicExtractors = null, string name = null, bool? validatable = null, CancellationToken cancellationToken = default)
        {
            if (organization == null)
            {
                throw new ArgumentNullException(nameof(organization));
            }

            using var message = CreateGetAllExtractorsRequest(organization, includePublicExtractors, name, validatable);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Extractor> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Extractor> array = new List<Extractor>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Extractor.DeserializeExtractor(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateExtractorRequest(ExtractorCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/extractors", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create an extractor. </summary>
        /// <param name="body"> The ExtractorCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a custom extractor. </remarks>
        public async Task<Response<Extractor>> CreateExtractorAsync(ExtractorCreate body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateExtractorRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Extractor value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Extractor.DeserializeExtractor(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create an extractor. </summary>
        /// <param name="body"> The ExtractorCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a custom extractor. </remarks>
        public Response<Extractor> CreateExtractor(ExtractorCreate body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateExtractorRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Extractor value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Extractor.DeserializeExtractor(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetExtractorRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/extractors/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific extractor. </remarks>
        public async Task<Response<Extractor>> GetExtractorAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetExtractorRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Extractor value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Extractor.DeserializeExtractor(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific extractor. </remarks>
        public Response<Extractor> GetExtractor(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetExtractorRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Extractor value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Extractor.DeserializeExtractor(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateExtractorRequest(string identifier, ExtractorUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/extractors/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update an extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="body"> Extractor data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of an extractor. </remarks>
        public async Task<Response<Extractor>> UpdateExtractorAsync(string identifier, ExtractorUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateExtractorRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Extractor value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Extractor.DeserializeExtractor(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update an extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="body"> Extractor data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of an extractor. </remarks>
        public Response<Extractor> UpdateExtractor(string identifier, ExtractorUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateExtractorRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Extractor value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Extractor.DeserializeExtractor(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteExtractorRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/extractors/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified extractor from the database. </remarks>
        public async Task<Response> DeleteExtractorAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteExtractorRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an extractor. </summary>
        /// <param name="identifier"> Extractor&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified extractor from the database. </remarks>
        public Response DeleteExtractor(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteExtractorRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllDataPointsRequest(int? offset, int? limit, string organization, bool? includePublic, string extractor, string slug, string description, string annotationContentType, IEnumerable<string> identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/data_points", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (organization != null)
            {
                uri.AppendQuery("organization", organization, true);
            }
            if (includePublic != null)
            {
                uri.AppendQuery("include_public", includePublic.Value, true);
            }
            if (extractor != null)
            {
                uri.AppendQuery("extractor", extractor, true);
            }
            if (slug != null)
            {
                uri.AppendQuery("slug", slug, true);
            }
            if (description != null)
            {
                uri.AppendQuery("description", description, true);
            }
            if (annotationContentType != null)
            {
                uri.AppendQuery("annotation_content_type", annotationContentType, true);
            }
            if (identifier != null)
            {
                uri.AppendQueryDelimited("identifier", identifier, ",", true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all data points. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="includePublic"> Allows you to include public data points in the response when you&apos;re filtering by organization. </param>
        /// <param name="extractor"> Filter by extractor. </param>
        /// <param name="slug"> Filter by slug. </param>
        /// <param name="description"> Filter by description. </param>
        /// <param name="annotationContentType"> Filter by annotation content type, e.g. text, integer, float, date, etc. </param>
        /// <param name="identifier"> Filter by specific identifiers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your custom data points as well as Affinda&apos;s off-the-shelf data points. </remarks>
        public async Task<Response<IReadOnlyList<DataPoint>>> GetAllDataPointsAsync(int? offset = null, int? limit = null, string organization = null, bool? includePublic = null, string extractor = null, string slug = null, string description = null, string annotationContentType = null, IEnumerable<string> identifier = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllDataPointsRequest(offset, limit, organization, includePublic, extractor, slug, description, annotationContentType, identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DataPoint> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<DataPoint> array = new List<DataPoint>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DataPoint.DeserializeDataPoint(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all data points. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="includePublic"> Allows you to include public data points in the response when you&apos;re filtering by organization. </param>
        /// <param name="extractor"> Filter by extractor. </param>
        /// <param name="slug"> Filter by slug. </param>
        /// <param name="description"> Filter by description. </param>
        /// <param name="annotationContentType"> Filter by annotation content type, e.g. text, integer, float, date, etc. </param>
        /// <param name="identifier"> Filter by specific identifiers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your custom data points as well as Affinda&apos;s off-the-shelf data points. </remarks>
        public Response<IReadOnlyList<DataPoint>> GetAllDataPoints(int? offset = null, int? limit = null, string organization = null, bool? includePublic = null, string extractor = null, string slug = null, string description = null, string annotationContentType = null, IEnumerable<string> identifier = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllDataPointsRequest(offset, limit, organization, includePublic, extractor, slug, description, annotationContentType, identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DataPoint> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<DataPoint> array = new List<DataPoint>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DataPoint.DeserializeDataPoint(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateDataPointRequest(DataPointCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/data_points", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create a data point. </summary>
        /// <param name="body"> The DataPointCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a custom data point. </remarks>
        public async Task<Response<DataPoint>> CreateDataPointAsync(DataPointCreate body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateDataPointRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DataPoint value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataPoint.DeserializeDataPoint(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a data point. </summary>
        /// <param name="body"> The DataPointCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a custom data point. </remarks>
        public Response<DataPoint> CreateDataPoint(DataPointCreate body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateDataPointRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DataPoint value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataPoint.DeserializeDataPoint(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataPointRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/data_points/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific data point. </summary>
        /// <param name="identifier"> Data point&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific data point. </remarks>
        public async Task<Response<DataPoint>> GetDataPointAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetDataPointRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataPoint value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataPoint.DeserializeDataPoint(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific data point. </summary>
        /// <param name="identifier"> Data point&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Return a specific data point. </remarks>
        public Response<DataPoint> GetDataPoint(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetDataPointRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataPoint value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataPoint.DeserializeDataPoint(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDataPointRequest(string identifier, DataPointUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/data_points/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update a data point. </summary>
        /// <param name="identifier"> DataPoint&apos;s identifier. </param>
        /// <param name="body"> Data point to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of a data point. </remarks>
        public async Task<Response<DataPoint>> UpdateDataPointAsync(string identifier, DataPointUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateDataPointRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataPoint value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataPoint.DeserializeDataPoint(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a data point. </summary>
        /// <param name="identifier"> DataPoint&apos;s identifier. </param>
        /// <param name="body"> Data point to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of a data point. </remarks>
        public Response<DataPoint> UpdateDataPoint(string identifier, DataPointUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateDataPointRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataPoint value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataPoint.DeserializeDataPoint(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDataPointRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/data_points/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a data point. </summary>
        /// <param name="identifier"> DataPoint&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified data point from the database. </remarks>
        public async Task<Response> DeleteDataPointAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteDataPointRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a data point. </summary>
        /// <param name="identifier"> DataPoint&apos;s identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified data point from the database. </remarks>
        public Response DeleteDataPoint(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteDataPointRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataPointChoicesRequest(string dataPoint, string collection, int? offset, int? limit, string search)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/data_point_choices", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            uri.AppendQuery("data_point", dataPoint, true);
            uri.AppendQuery("collection", collection, true);
            if (search != null)
            {
                uri.AppendQuery("search", search, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of data point choices. </summary>
        /// <param name="dataPoint"> The data point to get choices for. </param>
        /// <param name="collection"> The collection to get choices for. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="search"> Filter choices by searching for a substring. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataPoint"/> or <paramref name="collection"/> is null. </exception>
        /// <remarks> Returns available choices for a specific enum data point. </remarks>
        public async Task<Response<PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema>> GetDataPointChoicesAsync(string dataPoint, string collection, int? offset = null, int? limit = null, string search = null, CancellationToken cancellationToken = default)
        {
            if (dataPoint == null)
            {
                throw new ArgumentNullException(nameof(dataPoint));
            }
            if (collection == null)
            {
                throw new ArgumentNullException(nameof(collection));
            }

            using var message = CreateGetDataPointChoicesRequest(dataPoint, collection, offset, limit, search);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema.DeserializePathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of data point choices. </summary>
        /// <param name="dataPoint"> The data point to get choices for. </param>
        /// <param name="collection"> The collection to get choices for. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="search"> Filter choices by searching for a substring. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataPoint"/> or <paramref name="collection"/> is null. </exception>
        /// <remarks> Returns available choices for a specific enum data point. </remarks>
        public Response<PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema> GetDataPointChoices(string dataPoint, string collection, int? offset = null, int? limit = null, string search = null, CancellationToken cancellationToken = default)
        {
            if (dataPoint == null)
            {
                throw new ArgumentNullException(nameof(dataPoint));
            }
            if (collection == null)
            {
                throw new ArgumentNullException(nameof(collection));
            }

            using var message = CreateGetDataPointChoicesRequest(dataPoint, collection, offset, limit, search);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema.DeserializePathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateDataPointChoiceRequest(DataPointChoiceCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/data_point_choices", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create a data point choice. </summary>
        /// <param name="body"> The DataPointChoiceCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a custom data point choice. </remarks>
        public async Task<Response<DataPointChoice>> CreateDataPointChoiceAsync(DataPointChoiceCreate body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateDataPointChoiceRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DataPointChoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataPointChoice.DeserializeDataPointChoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a data point choice. </summary>
        /// <param name="body"> The DataPointChoiceCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create a custom data point choice. </remarks>
        public Response<DataPointChoice> CreateDataPointChoice(DataPointChoiceCreate body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateDataPointChoiceRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        DataPointChoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataPointChoice.DeserializeDataPointChoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataPointChoiceRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/data_point_choices/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific data point choice. </summary>
        /// <param name="id"> Data point choice&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific data point choice. </remarks>
        public async Task<Response<DataPointChoice>> GetDataPointChoiceAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataPointChoiceRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataPointChoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataPointChoice.DeserializeDataPointChoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific data point choice. </summary>
        /// <param name="id"> Data point choice&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific data point choice. </remarks>
        public Response<DataPointChoice> GetDataPointChoice(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataPointChoiceRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataPointChoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataPointChoice.DeserializeDataPointChoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDataPointChoiceRequest(int id, DataPointChoiceUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/data_point_choices/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update a data point choice. </summary>
        /// <param name="id"> Data point choice&apos;s ID. </param>
        /// <param name="body"> Data point choice to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of a data point choice. </remarks>
        public async Task<Response<DataPointChoice>> UpdateDataPointChoiceAsync(int id, DataPointChoiceUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateDataPointChoiceRequest(id, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataPointChoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataPointChoice.DeserializeDataPointChoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a data point choice. </summary>
        /// <param name="id"> Data point choice&apos;s ID. </param>
        /// <param name="body"> Data point choice to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of a data point choice. </remarks>
        public Response<DataPointChoice> UpdateDataPointChoice(int id, DataPointChoiceUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateDataPointChoiceRequest(id, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataPointChoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataPointChoice.DeserializeDataPointChoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDataPointChoiceRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/data_point_choices/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a data point choice. </summary>
        /// <param name="id"> Data point choice&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified data point choice from the database. </remarks>
        public async Task<Response> DeleteDataPointChoiceAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteDataPointChoiceRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a data point choice. </summary>
        /// <param name="id"> Data point choice&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified data point choice from the database. </remarks>
        public Response DeleteDataPointChoice(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteDataPointChoiceRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateReplaceDataPointChoicesRequest(DataPointChoiceReplaceRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/data_point_choices/replace", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Replace choices of a data point. </summary>
        /// <param name="body"> The DataPointChoiceReplaceRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Replace choices of a data point. Existing choices and incoming choices are matched base on their `value`. New `value` will be created, existing `value` will be updated, and `value` not in incoming choices will be deleted. </remarks>
        public async Task<Response<DataPointChoiceReplaceResponse>> ReplaceDataPointChoicesAsync(DataPointChoiceReplaceRequest body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateReplaceDataPointChoicesRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataPointChoiceReplaceResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataPointChoiceReplaceResponse.DeserializeDataPointChoiceReplaceResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Replace choices of a data point. </summary>
        /// <param name="body"> The DataPointChoiceReplaceRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Replace choices of a data point. Existing choices and incoming choices are matched base on their `value`. New `value` will be created, existing `value` will be updated, and `value` not in incoming choices will be deleted. </remarks>
        public Response<DataPointChoiceReplaceResponse> ReplaceDataPointChoices(DataPointChoiceReplaceRequest body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateReplaceDataPointChoicesRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataPointChoiceReplaceResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataPointChoiceReplaceResponse.DeserializeDataPointChoiceReplaceResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllAnnotationsRequest(string document)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/annotations", false);
            uri.AppendQuery("document", document, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all annotations. </summary>
        /// <param name="document"> Filter by document. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="document"/> is null. </exception>
        /// <remarks> Returns your annotations. </remarks>
        public async Task<Response<Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema>> GetAllAnnotationsAsync(string document, CancellationToken cancellationToken = default)
        {
            if (document == null)
            {
                throw new ArgumentNullException(nameof(document));
            }

            using var message = CreateGetAllAnnotationsRequest(document);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document0 = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema.DeserializePaths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema(document0.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all annotations. </summary>
        /// <param name="document"> Filter by document. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="document"/> is null. </exception>
        /// <remarks> Returns your annotations. </remarks>
        public Response<Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema> GetAllAnnotations(string document, CancellationToken cancellationToken = default)
        {
            if (document == null)
            {
                throw new ArgumentNullException(nameof(document));
            }

            using var message = CreateGetAllAnnotationsRequest(document);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document0 = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema.DeserializePaths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema(document0.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateAnnotationRequest(AnnotationCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/annotations", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create a annotation. </summary>
        /// <param name="body"> The AnnotationCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<Annotation>> CreateAnnotationAsync(AnnotationCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateAnnotationRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Annotation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Annotation.DeserializeAnnotation(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a annotation. </summary>
        /// <param name="body"> The AnnotationCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<Annotation> CreateAnnotation(AnnotationCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateAnnotationRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Annotation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Annotation.DeserializeAnnotation(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAnnotationRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/annotations/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific annotation. </summary>
        /// <param name="id"> Annotation&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific annotation. </remarks>
        public async Task<Response<Annotation>> GetAnnotationAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnnotationRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Annotation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Annotation.DeserializeAnnotation(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific annotation. </summary>
        /// <param name="id"> Annotation&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific annotation. </remarks>
        public Response<Annotation> GetAnnotation(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnnotationRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Annotation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Annotation.DeserializeAnnotation(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateAnnotationRequest(int id, AnnotationUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/annotations/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update an annotation. </summary>
        /// <param name="id"> Annotation&apos;s ID. </param>
        /// <param name="body"> Annotation data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of an annotation. </remarks>
        public async Task<Response<Annotation>> UpdateAnnotationAsync(int id, AnnotationUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateAnnotationRequest(id, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Annotation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Annotation.DeserializeAnnotation(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update an annotation. </summary>
        /// <param name="id"> Annotation&apos;s ID. </param>
        /// <param name="body"> Annotation data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of an annotation. </remarks>
        public Response<Annotation> UpdateAnnotation(int id, AnnotationUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateAnnotationRequest(id, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Annotation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Annotation.DeserializeAnnotation(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteAnnotationRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/annotations/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an annotation. </summary>
        /// <param name="id"> Annotation&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified annotation from the database. </remarks>
        public async Task<Response> DeleteAnnotationAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteAnnotationRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an annotation. </summary>
        /// <param name="id"> Annotation&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified annotation from the database. </remarks>
        public Response DeleteAnnotation(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteAnnotationRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBatchCreateAnnotationsRequest(IEnumerable<AnnotationCreate> body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/annotations/batch_create", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in body)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Batch create annotations. </summary>
        /// <param name="body"> The BatchCreateAnnotationsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<IReadOnlyList<Annotation>>> BatchCreateAnnotationsAsync(IEnumerable<AnnotationCreate> body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchCreateAnnotationsRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        IReadOnlyList<Annotation> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Annotation> array = new List<Annotation>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            if (item.ValueKind == JsonValueKind.Null)
                            {
                                array.Add(null);
                            }
                            else
                            {
                                array.Add(Annotation.DeserializeAnnotation(item));
                            }
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Batch create annotations. </summary>
        /// <param name="body"> The BatchCreateAnnotationsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<IReadOnlyList<Annotation>> BatchCreateAnnotations(IEnumerable<AnnotationCreate> body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchCreateAnnotationsRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        IReadOnlyList<Annotation> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Annotation> array = new List<Annotation>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            if (item.ValueKind == JsonValueKind.Null)
                            {
                                array.Add(null);
                            }
                            else
                            {
                                array.Add(Annotation.DeserializeAnnotation(item));
                            }
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBatchUpdateAnnotationsRequest(IEnumerable<AnnotationBatchUpdate> body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/annotations/batch_update", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in body)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Batch update annotations. </summary>
        /// <param name="body"> The BatchUpdateAnnotationsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<IReadOnlyList<Annotation>>> BatchUpdateAnnotationsAsync(IEnumerable<AnnotationBatchUpdate> body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchUpdateAnnotationsRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Annotation> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Annotation> array = new List<Annotation>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            if (item.ValueKind == JsonValueKind.Null)
                            {
                                array.Add(null);
                            }
                            else
                            {
                                array.Add(Annotation.DeserializeAnnotation(item));
                            }
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Batch update annotations. </summary>
        /// <param name="body"> The BatchUpdateAnnotationsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<IReadOnlyList<Annotation>> BatchUpdateAnnotations(IEnumerable<AnnotationBatchUpdate> body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchUpdateAnnotationsRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Annotation> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Annotation> array = new List<Annotation>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            if (item.ValueKind == JsonValueKind.Null)
                            {
                                array.Add(null);
                            }
                            else
                            {
                                array.Add(Annotation.DeserializeAnnotation(item));
                            }
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBatchDeleteAnnotationsRequest(IEnumerable<int> body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/annotations/batch_delete", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in body)
            {
                content.JsonWriter.WriteNumberValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Batch delete annotations. </summary>
        /// <param name="body"> The BatchDeleteAnnotationsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response> BatchDeleteAnnotationsAsync(IEnumerable<int> body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchDeleteAnnotationsRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Batch delete annotations. </summary>
        /// <param name="body"> The BatchDeleteAnnotationsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response BatchDeleteAnnotations(IEnumerable<int> body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchDeleteAnnotationsRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllTagsRequest(int? limit, int? offset, string workspace)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/tags", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (workspace != null)
            {
                uri.AppendQuery("workspace", workspace, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all tags. </summary>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your tags. </remarks>
        public async Task<Response<IReadOnlyList<Tag>>> GetAllTagsAsync(int? limit = null, int? offset = null, string workspace = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllTagsRequest(limit, offset, workspace);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Tag> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Tag> array = new List<Tag>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Tag.DeserializeTag(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all tags. </summary>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="workspace"> Filter by workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your tags. </remarks>
        public Response<IReadOnlyList<Tag>> GetAllTags(int? limit = null, int? offset = null, string workspace = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllTagsRequest(limit, offset, workspace);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Tag> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Tag> array = new List<Tag>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Tag.DeserializeTag(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateTagRequest(TagCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/tags", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create a tag. </summary>
        /// <param name="body"> The TagCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<Tag>> CreateTagAsync(TagCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateTagRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Tag value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Tag.DeserializeTag(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a tag. </summary>
        /// <param name="body"> The TagCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<Tag> CreateTag(TagCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateTagRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Tag value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Tag.DeserializeTag(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTagRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/tags/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific tag. </remarks>
        public async Task<Response<Tag>> GetTagAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTagRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tag value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Tag.DeserializeTag(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific tag. </remarks>
        public Response<Tag> GetTag(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTagRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tag value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Tag.DeserializeTag(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateTagRequest(int id, TagUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/tags/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update a tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="body"> Tag data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of an tag. </remarks>
        public async Task<Response<Tag>> UpdateTagAsync(int id, TagUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateTagRequest(id, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tag value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Tag.DeserializeTag(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="body"> Tag data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of an tag. </remarks>
        public Response<Tag> UpdateTag(int id, TagUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateTagRequest(id, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tag value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Tag.DeserializeTag(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteTagRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/tags/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified tag from the database. </remarks>
        public async Task<Response> DeleteTagAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteTagRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an tag. </summary>
        /// <param name="id"> Tag&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified tag from the database. </remarks>
        public Response DeleteTag(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteTagRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllOrganizationsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/organizations", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all organizations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the organizations. </remarks>
        public async Task<Response<IReadOnlyList<Organization>>> GetAllOrganizationsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllOrganizationsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Organization> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Organization> array = new List<Organization>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Organization.DeserializeOrganization(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all organizations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the organizations. </remarks>
        public Response<IReadOnlyList<Organization>> GetAllOrganizations(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllOrganizationsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Organization> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Organization> array = new List<Organization>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Organization.DeserializeOrganization(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrganizationRequest(string name, Stream avatar, string resthookSignatureKey)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/organizations", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            content.Add(new StringRequestContent(name), "name", null);
            if (avatar != null)
            {
                content.Add(RequestContent.Create(avatar), "avatar", null);
            }
            if (resthookSignatureKey != null)
            {
                content.Add(new StringRequestContent(resthookSignatureKey), "resthookSignatureKey", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Create a new organization. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="avatar"> Upload avatar for the organization. </param>
        /// <param name="resthookSignatureKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <remarks> Create a new organization. </remarks>
        public async Task<Response<Organization>> CreateOrganizationAsync(string name, Stream avatar = null, string resthookSignatureKey = null, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateCreateOrganizationRequest(name, avatar, resthookSignatureKey);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Organization value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Organization.DeserializeOrganization(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a new organization. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="avatar"> Upload avatar for the organization. </param>
        /// <param name="resthookSignatureKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <remarks> Create a new organization. </remarks>
        public Response<Organization> CreateOrganization(string name, Stream avatar = null, string resthookSignatureKey = null, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateCreateOrganizationRequest(name, avatar, resthookSignatureKey);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Organization value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Organization.DeserializeOrganization(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetOrganizationRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/organizations/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get detail of an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Get detail of an organization. </remarks>
        public async Task<Response<Organization>> GetOrganizationAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetOrganizationRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Organization value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Organization.DeserializeOrganization(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get detail of an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Get detail of an organization. </remarks>
        public Response<Organization> GetOrganization(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetOrganizationRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Organization value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Organization.DeserializeOrganization(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateOrganizationRequest(string identifier, string name, Stream avatar, string resthookSignatureKey)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/organizations/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (name != null)
            {
                content.Add(new StringRequestContent(name), "name", null);
            }
            if (avatar != null)
            {
                content.Add(RequestContent.Create(avatar), "avatar", null);
            }
            if (resthookSignatureKey != null)
            {
                content.Add(new StringRequestContent(resthookSignatureKey), "resthookSignatureKey", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Update an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="name"> The String to use. </param>
        /// <param name="avatar"> The Stream to use. </param>
        /// <param name="resthookSignatureKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Update the detail of an organization. </remarks>
        public async Task<Response<Organization>> UpdateOrganizationAsync(string identifier, string name = null, Stream avatar = null, string resthookSignatureKey = null, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateUpdateOrganizationRequest(identifier, name, avatar, resthookSignatureKey);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Organization value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Organization.DeserializeOrganization(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="name"> The String to use. </param>
        /// <param name="avatar"> The Stream to use. </param>
        /// <param name="resthookSignatureKey"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Update the detail of an organization. </remarks>
        public Response<Organization> UpdateOrganization(string identifier, string name = null, Stream avatar = null, string resthookSignatureKey = null, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateUpdateOrganizationRequest(identifier, name, avatar, resthookSignatureKey);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Organization value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Organization.DeserializeOrganization(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteOrganizationRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/organizations/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Delete the specified organization from the database. </remarks>
        public async Task<Response> DeleteOrganizationAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteOrganizationRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an organization. </summary>
        /// <param name="identifier"> Organization identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Delete the specified organization from the database. </remarks>
        public Response DeleteOrganization(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteOrganizationRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllOrganizationMembershipsRequest(int? offset, int? limit, string organization, OrganizationRole? role)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/organization_memberships", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (organization != null)
            {
                uri.AppendQuery("organization", organization, true);
            }
            if (role != null)
            {
                uri.AppendQuery("role", role.Value.ToString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all organization memberships. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="role"> Filter by role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the organization memberships. </remarks>
        public async Task<Response<PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema>> GetAllOrganizationMembershipsAsync(int? offset = null, int? limit = null, string organization = null, OrganizationRole? role = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllOrganizationMembershipsRequest(offset, limit, organization, role);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema.DeserializePathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all organization memberships. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="role"> Filter by role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the organization memberships. </remarks>
        public Response<PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema> GetAllOrganizationMemberships(int? offset = null, int? limit = null, string organization = null, OrganizationRole? role = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllOrganizationMembershipsRequest(offset, limit, organization, role);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema.DeserializePathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetOrganizationMembershipRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/organization_memberships/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get detail of an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Get detail of an organization membership. </remarks>
        public async Task<Response<OrganizationMembership>> GetOrganizationMembershipAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetOrganizationMembershipRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OrganizationMembership value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = OrganizationMembership.DeserializeOrganizationMembership(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get detail of an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Get detail of an organization membership. </remarks>
        public Response<OrganizationMembership> GetOrganizationMembership(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetOrganizationMembershipRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OrganizationMembership value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = OrganizationMembership.DeserializeOrganizationMembership(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateOrganizationMembershipRequest(string identifier, OrganizationMembershipUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/organization_memberships/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="body"> The OrganizationMembershipUpdate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> The admin users can use this endpoint to update the role of the members within their organization. </remarks>
        public async Task<Response<OrganizationMembership>> UpdateOrganizationMembershipAsync(string identifier, OrganizationMembershipUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateOrganizationMembershipRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OrganizationMembership value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = OrganizationMembership.DeserializeOrganizationMembership(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="body"> The OrganizationMembershipUpdate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> The admin users can use this endpoint to update the role of the members within their organization. </remarks>
        public Response<OrganizationMembership> UpdateOrganizationMembership(string identifier, OrganizationMembershipUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateOrganizationMembershipRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OrganizationMembership value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = OrganizationMembership.DeserializeOrganizationMembership(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteOrganizationMembershipRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/organization_memberships/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> The admin users can use this endpoint to remove member from their organization. Other users can also use this to leave their organization. </remarks>
        public async Task<Response> DeleteOrganizationMembershipAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteOrganizationMembershipRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an organization membership. </summary>
        /// <param name="identifier"> Membership identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> The admin users can use this endpoint to remove member from their organization. Other users can also use this to leave their organization. </remarks>
        public Response DeleteOrganizationMembership(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteOrganizationMembershipRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllInvitationsRequest(int? offset, int? limit, string organization, InvitationStatus? status, OrganizationRole? role)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/invitations", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (organization != null)
            {
                uri.AppendQuery("organization", organization, true);
            }
            if (status != null)
            {
                uri.AppendQuery("status", status.Value.ToString(), true);
            }
            if (role != null)
            {
                uri.AppendQuery("role", role.Value.ToString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all invitations. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="status"> Filter by status. </param>
        /// <param name="role"> Filter by role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get list of all invitations you created or sent to you. </remarks>
        public async Task<Response<Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema>> GetAllInvitationsAsync(int? offset = null, int? limit = null, string organization = null, InvitationStatus? status = null, OrganizationRole? role = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllInvitationsRequest(offset, limit, organization, status, role);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema.DeserializePaths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all invitations. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="status"> Filter by status. </param>
        /// <param name="role"> Filter by role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get list of all invitations you created or sent to you. </remarks>
        public Response<Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema> GetAllInvitations(int? offset = null, int? limit = null, string organization = null, InvitationStatus? status = null, OrganizationRole? role = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllInvitationsRequest(offset, limit, organization, status, role);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema.DeserializePaths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateInvitationRequest(InvitationCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/invitations", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create a new invitation. </summary>
        /// <param name="body"> Invitation to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Create a new invitation. </remarks>
        public async Task<Response<Invitation>> CreateInvitationAsync(InvitationCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateInvitationRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Invitation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invitation.DeserializeInvitation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a new invitation. </summary>
        /// <param name="body"> Invitation to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Create a new invitation. </remarks>
        public Response<Invitation> CreateInvitation(InvitationCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateInvitationRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Invitation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invitation.DeserializeInvitation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetInvitationRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/invitations/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get detail of an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Get detail of an invitation. </remarks>
        public async Task<Response<Invitation>> GetInvitationAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetInvitationRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invitation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invitation.DeserializeInvitation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get detail of an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Get detail of an invitation. </remarks>
        public Response<Invitation> GetInvitation(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetInvitationRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invitation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invitation.DeserializeInvitation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateInvitationRequest(string identifier, InvitationUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/invitations/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="body"> The InvitationUpdate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update the detail of an invitation. </remarks>
        public async Task<Response<Invitation>> UpdateInvitationAsync(string identifier, InvitationUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateInvitationRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invitation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invitation.DeserializeInvitation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="body"> The InvitationUpdate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Update the detail of an invitation. </remarks>
        public Response<Invitation> UpdateInvitation(string identifier, InvitationUpdate body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateInvitationRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invitation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invitation.DeserializeInvitation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteInvitationRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/invitations/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Delete the specified invitation from the database. </remarks>
        public async Task<Response> DeleteInvitationAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteInvitationRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an invitation. </summary>
        /// <param name="identifier"> Invitation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Delete the specified invitation from the database. </remarks>
        public Response DeleteInvitation(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteInvitationRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetInvitationByTokenRequest(string token)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/invitations/token/", false);
            uri.AppendPath(token, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get detail of an invitation by token. </summary>
        /// <param name="token"> Invitation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="token"/> is null. </exception>
        /// <remarks> Get detail of an invitation using a secret token. This allows users who have not registered/logged in to view the invitation. </remarks>
        public async Task<Response<Invitation>> GetInvitationByTokenAsync(string token, CancellationToken cancellationToken = default)
        {
            if (token == null)
            {
                throw new ArgumentNullException(nameof(token));
            }

            using var message = CreateGetInvitationByTokenRequest(token);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invitation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invitation.DeserializeInvitation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get detail of an invitation by token. </summary>
        /// <param name="token"> Invitation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="token"/> is null. </exception>
        /// <remarks> Get detail of an invitation using a secret token. This allows users who have not registered/logged in to view the invitation. </remarks>
        public Response<Invitation> GetInvitationByToken(string token, CancellationToken cancellationToken = default)
        {
            if (token == null)
            {
                throw new ArgumentNullException(nameof(token));
            }

            using var message = CreateGetInvitationByTokenRequest(token);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invitation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invitation.DeserializeInvitation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRespondToInvitationRequest(string token, InvitationResponse body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/invitations/token/", false);
            uri.AppendPath(token, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Respond to an invitation. </summary>
        /// <param name="token"> Invitation token. </param>
        /// <param name="body"> The InvitationResponse to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="token"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Choose to accept or decline an invitation. </remarks>
        public async Task<Response<Invitation>> RespondToInvitationAsync(string token, InvitationResponse body, CancellationToken cancellationToken = default)
        {
            if (token == null)
            {
                throw new ArgumentNullException(nameof(token));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRespondToInvitationRequest(token, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invitation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invitation.DeserializeInvitation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Respond to an invitation. </summary>
        /// <param name="token"> Invitation token. </param>
        /// <param name="body"> The InvitationResponse to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="token"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Choose to accept or decline an invitation. </remarks>
        public Response<Invitation> RespondToInvitation(string token, InvitationResponse body, CancellationToken cancellationToken = default)
        {
            if (token == null)
            {
                throw new ArgumentNullException(nameof(token));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRespondToInvitationRequest(token, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invitation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invitation.DeserializeInvitation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllApiUsersRequest(string organization)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/api_users", false);
            if (organization != null)
            {
                uri.AppendQuery("organization", organization, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all API users. </summary>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your API users. </remarks>
        public async Task<Response<Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema>> GetAllApiUsersAsync(string organization = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllApiUsersRequest(organization);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema.DeserializePaths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all API users. </summary>
        /// <param name="organization"> Filter by organization. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your API users. </remarks>
        public Response<Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema> GetAllApiUsers(string organization = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllApiUsersRequest(organization);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema.DeserializePaths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateApiUserRequest(ApiUserCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/api_users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create an API user. </summary>
        /// <param name="body"> The ApiUserCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<ApiUserWithKey>> CreateApiUserAsync(ApiUserCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateApiUserRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ApiUserWithKey value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiUserWithKey.DeserializeApiUserWithKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create an API user. </summary>
        /// <param name="body"> The ApiUserCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<ApiUserWithKey> CreateApiUser(ApiUserCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateApiUserRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ApiUserWithKey value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiUserWithKey.DeserializeApiUserWithKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetApiUserRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/api_users/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific API user. </summary>
        /// <param name="id"> API user&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific API user. </remarks>
        public async Task<Response<ApiUserWithoutKey>> GetApiUserAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetApiUserRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiUserWithoutKey value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiUserWithoutKey.DeserializeApiUserWithoutKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific API user. </summary>
        /// <param name="id"> API user&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific API user. </remarks>
        public Response<ApiUserWithoutKey> GetApiUser(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetApiUserRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiUserWithoutKey value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiUserWithoutKey.DeserializeApiUserWithoutKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateApiUserRequest(int id, ApiUserUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/api_users/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update an API user. </summary>
        /// <param name="id"> API user&apos;s ID. </param>
        /// <param name="body"> API user to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of an API user. </remarks>
        public async Task<Response<ApiUserWithoutKey>> UpdateApiUserAsync(int id, ApiUserUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateApiUserRequest(id, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiUserWithoutKey value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiUserWithoutKey.DeserializeApiUserWithoutKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update an API user. </summary>
        /// <param name="id"> API user&apos;s ID. </param>
        /// <param name="body"> API user to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of an API user. </remarks>
        public Response<ApiUserWithoutKey> UpdateApiUser(int id, ApiUserUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateApiUserRequest(id, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiUserWithoutKey value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiUserWithoutKey.DeserializeApiUserWithoutKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteApiUserRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/api_users/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an API user. </summary>
        /// <param name="id"> API user&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified API user from the database. </remarks>
        public async Task<Response> DeleteApiUserAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteApiUserRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an API user. </summary>
        /// <param name="id"> API user&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified API user from the database. </remarks>
        public Response DeleteApiUser(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteApiUserRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRegenerateApiKeyForApiUserRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/api_users/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/regenerate_api_key", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Regenerate API key for an API user. </summary>
        /// <param name="id"> API user&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Regenerate API key for an API user. </remarks>
        public async Task<Response<ApiUserWithKey>> RegenerateApiKeyForApiUserAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateRegenerateApiKeyForApiUserRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiUserWithKey value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiUserWithKey.DeserializeApiUserWithKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Regenerate API key for an API user. </summary>
        /// <param name="id"> API user&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Regenerate API key for an API user. </remarks>
        public Response<ApiUserWithKey> RegenerateApiKeyForApiUser(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateRegenerateApiKeyForApiUserRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiUserWithKey value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiUserWithKey.DeserializeApiUserWithKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllResthookSubscriptionsRequest(int? offset, int? limit)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resthook_subscriptions", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all resthook subscriptions. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your resthook subscriptions. </remarks>
        public async Task<Response<PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema>> GetAllResthookSubscriptionsAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResthookSubscriptionsRequest(offset, limit);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema.DeserializePathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all resthook subscriptions. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your resthook subscriptions. </remarks>
        public Response<PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema> GetAllResthookSubscriptions(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResthookSubscriptionsRequest(offset, limit);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema.DeserializePathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateResthookSubscriptionRequest(ResthookSubscriptionCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resthook_subscriptions", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create a resthook subscription. </summary>
        /// <param name="body"> The ResthookSubscriptionCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// After a subscription is successfully created, we&apos;ll send a POST request to your target URL with a `X-Hook-Secret` header. &lt;br /&gt;
        /// You need to response to this request with a 200 status code to confirm your subscribe intention. &lt;br /&gt;
        /// Then, you need to use the `X-Hook-Secret` to activate the subscription using the [/resthook_subscriptions/activate](#post-/v3/resthook_subscriptions/activate) endpoint. &lt;br /&gt;
        /// For more information and detailed instructions, [see our webhooks documentation here.](https://docs.affinda.com/docs/webhooks)
        /// </remarks>
        public async Task<Response<ResthookSubscription>> CreateResthookSubscriptionAsync(ResthookSubscriptionCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateResthookSubscriptionRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ResthookSubscription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a resthook subscription. </summary>
        /// <param name="body"> The ResthookSubscriptionCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// After a subscription is successfully created, we&apos;ll send a POST request to your target URL with a `X-Hook-Secret` header. &lt;br /&gt;
        /// You need to response to this request with a 200 status code to confirm your subscribe intention. &lt;br /&gt;
        /// Then, you need to use the `X-Hook-Secret` to activate the subscription using the [/resthook_subscriptions/activate](#post-/v3/resthook_subscriptions/activate) endpoint. &lt;br /&gt;
        /// For more information and detailed instructions, [see our webhooks documentation here.](https://docs.affinda.com/docs/webhooks)
        /// </remarks>
        public Response<ResthookSubscription> CreateResthookSubscription(ResthookSubscriptionCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateResthookSubscriptionRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ResthookSubscription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResthookSubscriptionRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resthook_subscriptions/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific resthook subscription. </summary>
        /// <param name="id"> Resthook subscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific resthook subscription. </remarks>
        public async Task<Response<ResthookSubscription>> GetResthookSubscriptionAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetResthookSubscriptionRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResthookSubscription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific resthook subscription. </summary>
        /// <param name="id"> Resthook subscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific resthook subscription. </remarks>
        public Response<ResthookSubscription> GetResthookSubscription(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetResthookSubscriptionRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResthookSubscription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateResthookSubscriptionRequest(int id, ResthookSubscriptionUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resthook_subscriptions/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="body"> ResthookSubscription data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of a resthook subscription. </remarks>
        public async Task<Response<ResthookSubscription>> UpdateResthookSubscriptionAsync(int id, ResthookSubscriptionUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResthookSubscriptionRequest(id, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResthookSubscription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="body"> ResthookSubscription data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of a resthook subscription. </remarks>
        public Response<ResthookSubscription> UpdateResthookSubscription(int id, ResthookSubscriptionUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResthookSubscriptionRequest(id, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResthookSubscription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteResthookSubscriptionRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resthook_subscriptions/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified resthook subscription from the database. </remarks>
        public async Task<Response> DeleteResthookSubscriptionAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteResthookSubscriptionRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified resthook subscription from the database. </remarks>
        public Response DeleteResthookSubscription(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteResthookSubscriptionRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateActivateResthookSubscriptionRequest(string xHookSecret)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resthook_subscriptions/activate", false);
            request.Uri = uri;
            request.Headers.Add("X-Hook-Secret", xHookSecret);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Activate a resthook subscription. </summary>
        /// <param name="xHookSecret"> The secret received when creating a subscription. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xHookSecret"/> is null. </exception>
        /// <remarks>
        /// After creating a subscription, we&apos;ll send a POST request to your target URL with a `X-Hook-Secret` header. &lt;br /&gt;
        /// You should response to this with a 200 status code, and use the value of the `X-Hook-Secret` header that you received to activate the subscription using this endpoint.
        /// </remarks>
        public async Task<Response<ResthookSubscription>> ActivateResthookSubscriptionAsync(string xHookSecret, CancellationToken cancellationToken = default)
        {
            if (xHookSecret == null)
            {
                throw new ArgumentNullException(nameof(xHookSecret));
            }

            using var message = CreateActivateResthookSubscriptionRequest(xHookSecret);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResthookSubscription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Activate a resthook subscription. </summary>
        /// <param name="xHookSecret"> The secret received when creating a subscription. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xHookSecret"/> is null. </exception>
        /// <remarks>
        /// After creating a subscription, we&apos;ll send a POST request to your target URL with a `X-Hook-Secret` header. &lt;br /&gt;
        /// You should response to this with a 200 status code, and use the value of the `X-Hook-Secret` header that you received to activate the subscription using this endpoint.
        /// </remarks>
        public Response<ResthookSubscription> ActivateResthookSubscription(string xHookSecret, CancellationToken cancellationToken = default)
        {
            if (xHookSecret == null)
            {
                throw new ArgumentNullException(nameof(xHookSecret));
            }

            using var message = CreateActivateResthookSubscriptionRequest(xHookSecret);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResthookSubscription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListOccupationGroupsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/occupation_groups", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List occupation groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the list of searchable occupation groups. </remarks>
        public async Task<Response<IReadOnlyList<OccupationGroup>>> ListOccupationGroupsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListOccupationGroupsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<OccupationGroup> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<OccupationGroup> array = new List<OccupationGroup>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(OccupationGroup.DeserializeOccupationGroup(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List occupation groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the list of searchable occupation groups. </remarks>
        public Response<IReadOnlyList<OccupationGroup>> ListOccupationGroups(CancellationToken cancellationToken = default)
        {
            using var message = CreateListOccupationGroupsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<OccupationGroup> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<OccupationGroup> array = new List<OccupationGroup>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(OccupationGroup.DeserializeOccupationGroup(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateJobDescriptionSearchRequest(JobDescriptionSearchParameters body, int? offset, int? limit)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/job_description_search", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Search through parsed job descriptions. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Searches through parsed job descriptions. You can search with custom criterias or a resume. </remarks>
        public async Task<Response<JobDescriptionSearch>> CreateJobDescriptionSearchAsync(JobDescriptionSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateJobDescriptionSearchRequest(body, offset, limit);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        JobDescriptionSearch value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescriptionSearch.DeserializeJobDescriptionSearch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Search through parsed job descriptions. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Searches through parsed job descriptions. You can search with custom criterias or a resume. </remarks>
        public Response<JobDescriptionSearch> CreateJobDescriptionSearch(JobDescriptionSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateJobDescriptionSearchRequest(body, offset, limit);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        JobDescriptionSearch value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescriptionSearch.DeserializeJobDescriptionSearch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetJobDescriptionSearchDetailRequest(string identifier, JobDescriptionSearchParameters body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/job_description_search/details/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Get search result of specific job description. </summary>
        /// <param name="identifier"> Job Description identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this job description.
        /// The `identifier` is the unique ID returned via the [/job_description_search](#post-/job_description_search) endpoint.
        /// </remarks>
        public async Task<Response<JobDescriptionSearchDetail>> GetJobDescriptionSearchDetailAsync(string identifier, JobDescriptionSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetJobDescriptionSearchDetailRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchDetail value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescriptionSearchDetail.DeserializeJobDescriptionSearchDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get search result of specific job description. </summary>
        /// <param name="identifier"> Job Description identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this job description.
        /// The `identifier` is the unique ID returned via the [/job_description_search](#post-/job_description_search) endpoint.
        /// </remarks>
        public Response<JobDescriptionSearchDetail> GetJobDescriptionSearchDetail(string identifier, JobDescriptionSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetJobDescriptionSearchDetailRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchDetail value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescriptionSearchDetail.DeserializeJobDescriptionSearchDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetJobDescriptionSearchConfigRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/job_description_search/config", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public async Task<Response<JobDescriptionSearchConfig>> GetJobDescriptionSearchConfigAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetJobDescriptionSearchConfigRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchConfig value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescriptionSearchConfig.DeserializeJobDescriptionSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public Response<JobDescriptionSearchConfig> GetJobDescriptionSearchConfig(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetJobDescriptionSearchConfigRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchConfig value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescriptionSearchConfig.DeserializeJobDescriptionSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateJobDescriptionSearchConfigRequest(JobDescriptionSearchConfig body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/job_description_search/config", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="body"> The JobDescriptionSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public async Task<Response<JobDescriptionSearchConfig>> UpdateJobDescriptionSearchConfigAsync(JobDescriptionSearchConfig body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateJobDescriptionSearchConfigRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchConfig value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescriptionSearchConfig.DeserializeJobDescriptionSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="body"> The JobDescriptionSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public Response<JobDescriptionSearchConfig> UpdateJobDescriptionSearchConfig(JobDescriptionSearchConfig body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateJobDescriptionSearchConfigRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchConfig value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescriptionSearchConfig.DeserializeJobDescriptionSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateJobDescriptionSearchEmbedUrlRequest(PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/job_description_search/embed", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create a signed URL for the embeddable job description search tool. </summary>
        /// <param name="body"> The PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the job description search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable search tool. </remarks>
        public async Task<Response<JobDescriptionSearchEmbed>> CreateJobDescriptionSearchEmbedUrlAsync(PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateJobDescriptionSearchEmbedUrlRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchEmbed value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescriptionSearchEmbed.DeserializeJobDescriptionSearchEmbed(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a signed URL for the embeddable job description search tool. </summary>
        /// <param name="body"> The PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the job description search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable search tool. </remarks>
        public Response<JobDescriptionSearchEmbed> CreateJobDescriptionSearchEmbedUrl(PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateJobDescriptionSearchEmbedUrlRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchEmbed value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescriptionSearchEmbed.DeserializeJobDescriptionSearchEmbed(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllIndexesRequest(int? offset, int? limit, Enum18? documentType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/index", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (documentType != null)
            {
                uri.AppendQuery("document_type", documentType.Value.ToString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all indexes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="documentType"> Filter indices by a document type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexes. </remarks>
        public async Task<Response<PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema>> GetAllIndexesAsync(int? offset = null, int? limit = null, Enum18? documentType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllIndexesRequest(offset, limit, documentType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema.DeserializePathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all indexes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="documentType"> Filter indices by a document type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexes. </remarks>
        public Response<PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema> GetAllIndexes(int? offset = null, int? limit = null, Enum18? documentType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllIndexesRequest(offset, limit, documentType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema.DeserializePathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateIndexRequest(string name, string documentType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/index", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (name != null)
            {
                content.Add(new StringRequestContent(name), "name", null);
            }
            if (documentType != null)
            {
                content.Add(new StringRequestContent(documentType), "documentType", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Create a new index. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="documentType"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an index for the search tool. </remarks>
        public async Task<Response<Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema>> CreateIndexAsync(string name = null, string documentType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateIndexRequest(name, documentType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema.DeserializePaths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a new index. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="documentType"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an index for the search tool. </remarks>
        public Response<Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema> CreateIndex(string name = null, string documentType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateIndexRequest(name, documentType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema.DeserializePaths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteIndexRequest(string name)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/index/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <remarks> Deletes the specified index from the database. </remarks>
        public async Task<Response> DeleteIndexAsync(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateDeleteIndexRequest(name);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <remarks> Deletes the specified index from the database. </remarks>
        public Response DeleteIndex(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateDeleteIndexRequest(name);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllIndexDocumentsRequest(string name)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/index/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/documents", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get indexed documents for a specific index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <remarks> Returns all the indexed documents for that index. </remarks>
        public async Task<Response<PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema>> GetAllIndexDocumentsAsync(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateGetAllIndexDocumentsRequest(name);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema.DeserializePathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get indexed documents for a specific index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <remarks> Returns all the indexed documents for that index. </remarks>
        public Response<PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema> GetAllIndexDocuments(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateGetAllIndexDocumentsRequest(name);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema.DeserializePathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateIndexDocumentRequest(string name, PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/index/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/documents", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Index a new document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create an indexed document for the search tool. </remarks>
        public async Task<Response<PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema>> CreateIndexDocumentAsync(string name, PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateIndexDocumentRequest(name, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema.DeserializePathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Index a new document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create an indexed document for the search tool. </remarks>
        public Response<PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema> CreateIndexDocument(string name, PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateIndexDocumentRequest(name, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema.DeserializePathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteIndexDocumentRequest(string name, string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/index/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/documents/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an indexed document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="identifier"/> is null. </exception>
        /// <remarks> Delete the specified indexed document from the database. </remarks>
        public async Task<Response> DeleteIndexDocumentAsync(string name, string identifier, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteIndexDocumentRequest(name, identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an indexed document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="identifier"/> is null. </exception>
        /// <remarks> Delete the specified indexed document from the database. </remarks>
        public Response DeleteIndexDocument(string name, string identifier, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteIndexDocumentRequest(name, identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateResumeSearchRequest(ResumeSearchParameters body, int? offset, int? limit)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resume_search", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Search through parsed resumes. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Searches through parsed resumes. Users have 3 options to create a search:&lt;br /&gt;&lt;br /&gt; 1.	Match to a job description - a parsed job description is used to find candidates that suit it&lt;br /&gt; 2.	Match to a resume - a parsed resume is used to find other candidates that have similar attributes&lt;br /&gt; 3.	Search using custom criteria&lt;br /&gt;&lt;br /&gt; Users should only populate 1 of jobDescription, resume or the custom criteria. </remarks>
        public async Task<Response<ResumeSearch>> CreateResumeSearchAsync(ResumeSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateResumeSearchRequest(body, offset, limit);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ResumeSearch value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearch.DeserializeResumeSearch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Search through parsed resumes. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Searches through parsed resumes. Users have 3 options to create a search:&lt;br /&gt;&lt;br /&gt; 1.	Match to a job description - a parsed job description is used to find candidates that suit it&lt;br /&gt; 2.	Match to a resume - a parsed resume is used to find other candidates that have similar attributes&lt;br /&gt; 3.	Search using custom criteria&lt;br /&gt;&lt;br /&gt; Users should only populate 1 of jobDescription, resume or the custom criteria. </remarks>
        public Response<ResumeSearch> CreateResumeSearch(ResumeSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateResumeSearchRequest(body, offset, limit);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ResumeSearch value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearch.DeserializeResumeSearch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchDetailRequest(string identifier, ResumeSearchParameters body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resume_search/details/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Get search result of specific resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this resume.
        /// The `identifier` is the unique ID returned via the [/resume_search](#post-/resume_search) endpoint.
        /// </remarks>
        public async Task<Response<ResumeSearchDetail>> GetResumeSearchDetailAsync(string identifier, ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetResumeSearchDetailRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchDetail value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchDetail.DeserializeResumeSearchDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get search result of specific resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this resume.
        /// The `identifier` is the unique ID returned via the [/resume_search](#post-/resume_search) endpoint.
        /// </remarks>
        public Response<ResumeSearchDetail> GetResumeSearchDetail(string identifier, ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetResumeSearchDetailRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchDetail value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchDetail.DeserializeResumeSearchDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchMatchRequest(string resume, string jobDescription, string index, string searchExpression, float? jobTitlesWeight, float? yearsExperienceWeight, float? locationsWeight, float? languagesWeight, float? skillsWeight, float? educationWeight, float? searchExpressionWeight, float? socCodesWeight, float? managementLevelWeight)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resume_search/match", false);
            uri.AppendQuery("resume", resume, true);
            uri.AppendQuery("job_description", jobDescription, true);
            if (index != null)
            {
                uri.AppendQuery("index", index, true);
            }
            if (searchExpression != null)
            {
                uri.AppendQuery("search_expression", searchExpression, true);
            }
            if (jobTitlesWeight != null)
            {
                uri.AppendQuery("job_titles_weight", jobTitlesWeight.Value, true);
            }
            if (yearsExperienceWeight != null)
            {
                uri.AppendQuery("years_experience_weight", yearsExperienceWeight.Value, true);
            }
            if (locationsWeight != null)
            {
                uri.AppendQuery("locations_weight", locationsWeight.Value, true);
            }
            if (languagesWeight != null)
            {
                uri.AppendQuery("languages_weight", languagesWeight.Value, true);
            }
            if (skillsWeight != null)
            {
                uri.AppendQuery("skills_weight", skillsWeight.Value, true);
            }
            if (educationWeight != null)
            {
                uri.AppendQuery("education_weight", educationWeight.Value, true);
            }
            if (searchExpressionWeight != null)
            {
                uri.AppendQuery("search_expression_weight", searchExpressionWeight.Value, true);
            }
            if (socCodesWeight != null)
            {
                uri.AppendQuery("soc_codes_weight", socCodesWeight.Value, true);
            }
            if (managementLevelWeight != null)
            {
                uri.AppendQuery("management_level_weight", managementLevelWeight.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Match a single resume and job description. </summary>
        /// <param name="resume"> Identify the resume to match. </param>
        /// <param name="jobDescription"> Identify the job description to match. </param>
        /// <param name="index"> Optionally, specify an index to search in. If not specified, will search in all indexes. </param>
        /// <param name="searchExpression"> Add keywords to the search criteria. </param>
        /// <param name="jobTitlesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="yearsExperienceWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="locationsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="languagesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="skillsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="educationWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="searchExpressionWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="socCodesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="managementLevelWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resume"/> or <paramref name="jobDescription"/> is null. </exception>
        /// <remarks> Get the matching score between a resume and a job description. The score ranges between 0 and 1, with 0 being not a match at all, and 1 being perfect match.&lt;br/&gt; Note, this score will not directly match the score returned from POST [/resume_search/details/{identifier}](#post-/resume_search/details/-identifier-). </remarks>
        public async Task<Response<ResumeSearchMatch>> GetResumeSearchMatchAsync(string resume, string jobDescription, string index = null, string searchExpression = null, float? jobTitlesWeight = null, float? yearsExperienceWeight = null, float? locationsWeight = null, float? languagesWeight = null, float? skillsWeight = null, float? educationWeight = null, float? searchExpressionWeight = null, float? socCodesWeight = null, float? managementLevelWeight = null, CancellationToken cancellationToken = default)
        {
            if (resume == null)
            {
                throw new ArgumentNullException(nameof(resume));
            }
            if (jobDescription == null)
            {
                throw new ArgumentNullException(nameof(jobDescription));
            }

            using var message = CreateGetResumeSearchMatchRequest(resume, jobDescription, index, searchExpression, jobTitlesWeight, yearsExperienceWeight, locationsWeight, languagesWeight, skillsWeight, educationWeight, searchExpressionWeight, socCodesWeight, managementLevelWeight);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchMatch value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchMatch.DeserializeResumeSearchMatch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Match a single resume and job description. </summary>
        /// <param name="resume"> Identify the resume to match. </param>
        /// <param name="jobDescription"> Identify the job description to match. </param>
        /// <param name="index"> Optionally, specify an index to search in. If not specified, will search in all indexes. </param>
        /// <param name="searchExpression"> Add keywords to the search criteria. </param>
        /// <param name="jobTitlesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="yearsExperienceWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="locationsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="languagesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="skillsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="educationWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="searchExpressionWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="socCodesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="managementLevelWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resume"/> or <paramref name="jobDescription"/> is null. </exception>
        /// <remarks> Get the matching score between a resume and a job description. The score ranges between 0 and 1, with 0 being not a match at all, and 1 being perfect match.&lt;br/&gt; Note, this score will not directly match the score returned from POST [/resume_search/details/{identifier}](#post-/resume_search/details/-identifier-). </remarks>
        public Response<ResumeSearchMatch> GetResumeSearchMatch(string resume, string jobDescription, string index = null, string searchExpression = null, float? jobTitlesWeight = null, float? yearsExperienceWeight = null, float? locationsWeight = null, float? languagesWeight = null, float? skillsWeight = null, float? educationWeight = null, float? searchExpressionWeight = null, float? socCodesWeight = null, float? managementLevelWeight = null, CancellationToken cancellationToken = default)
        {
            if (resume == null)
            {
                throw new ArgumentNullException(nameof(resume));
            }
            if (jobDescription == null)
            {
                throw new ArgumentNullException(nameof(jobDescription));
            }

            using var message = CreateGetResumeSearchMatchRequest(resume, jobDescription, index, searchExpression, jobTitlesWeight, yearsExperienceWeight, locationsWeight, languagesWeight, skillsWeight, educationWeight, searchExpressionWeight, socCodesWeight, managementLevelWeight);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchMatch value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchMatch.DeserializeResumeSearchMatch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchConfigRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resume_search/config", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public async Task<Response<ResumeSearchConfig>> GetResumeSearchConfigAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetResumeSearchConfigRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchConfig value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchConfig.DeserializeResumeSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public Response<ResumeSearchConfig> GetResumeSearchConfig(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetResumeSearchConfigRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchConfig value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchConfig.DeserializeResumeSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateResumeSearchConfigRequest(ResumeSearchConfig body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resume_search/config", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="body"> The ResumeSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public async Task<Response<ResumeSearchConfig>> UpdateResumeSearchConfigAsync(ResumeSearchConfig body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResumeSearchConfigRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchConfig value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchConfig.DeserializeResumeSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="body"> The ResumeSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public Response<ResumeSearchConfig> UpdateResumeSearchConfig(ResumeSearchConfig body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResumeSearchConfigRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchConfig value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchConfig.DeserializeResumeSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateResumeSearchEmbedUrlRequest(Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resume_search/embed", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create a signed URL for the embeddable resume search tool. </summary>
        /// <param name="body"> The Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the resume search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable resume search tool. </remarks>
        public async Task<Response<ResumeSearchEmbed>> CreateResumeSearchEmbedUrlAsync(Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeSearchEmbedUrlRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchEmbed value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchEmbed.DeserializeResumeSearchEmbed(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a signed URL for the embeddable resume search tool. </summary>
        /// <param name="body"> The Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the resume search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable resume search tool. </remarks>
        public Response<ResumeSearchEmbed> CreateResumeSearchEmbedUrl(Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeSearchEmbedUrlRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchEmbed value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchEmbed.DeserializeResumeSearchEmbed(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchSuggestionJobTitleRequest(IEnumerable<string> jobTitles)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resume_search/suggestion_job_title", false);
            foreach (var param in jobTitles)
            {
                uri.AppendQuery("job_titles", param, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get job title suggestions based on provided job title(s). </summary>
        /// <param name="jobTitles"> Job title to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobTitles"/> is null. </exception>
        /// <remarks> Provided one or more job titles, get related suggestions for your search. </remarks>
        public async Task<Response<IReadOnlyList<string>>> GetResumeSearchSuggestionJobTitleAsync(IEnumerable<string> jobTitles, CancellationToken cancellationToken = default)
        {
            if (jobTitles == null)
            {
                throw new ArgumentNullException(nameof(jobTitles));
            }

            using var message = CreateGetResumeSearchSuggestionJobTitleRequest(jobTitles);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<string> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<string> array = new List<string>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(item.GetString());
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get job title suggestions based on provided job title(s). </summary>
        /// <param name="jobTitles"> Job title to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobTitles"/> is null. </exception>
        /// <remarks> Provided one or more job titles, get related suggestions for your search. </remarks>
        public Response<IReadOnlyList<string>> GetResumeSearchSuggestionJobTitle(IEnumerable<string> jobTitles, CancellationToken cancellationToken = default)
        {
            if (jobTitles == null)
            {
                throw new ArgumentNullException(nameof(jobTitles));
            }

            using var message = CreateGetResumeSearchSuggestionJobTitleRequest(jobTitles);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<string> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<string> array = new List<string>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(item.GetString());
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchSuggestionSkillRequest(IEnumerable<string> skills)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v3/resume_search/suggestion_skill", false);
            foreach (var param in skills)
            {
                uri.AppendQuery("skills", param, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get skill suggestions based on provided skill(s). </summary>
        /// <param name="skills"> Skill to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="skills"/> is null. </exception>
        /// <remarks> Provided one or more skills, get related suggestions for your search. </remarks>
        public async Task<Response<IReadOnlyList<string>>> GetResumeSearchSuggestionSkillAsync(IEnumerable<string> skills, CancellationToken cancellationToken = default)
        {
            if (skills == null)
            {
                throw new ArgumentNullException(nameof(skills));
            }

            using var message = CreateGetResumeSearchSuggestionSkillRequest(skills);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<string> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<string> array = new List<string>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(item.GetString());
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get skill suggestions based on provided skill(s). </summary>
        /// <param name="skills"> Skill to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="skills"/> is null. </exception>
        /// <remarks> Provided one or more skills, get related suggestions for your search. </remarks>
        public Response<IReadOnlyList<string>> GetResumeSearchSuggestionSkill(IEnumerable<string> skills, CancellationToken cancellationToken = default)
        {
            if (skills == null)
            {
                throw new ArgumentNullException(nameof(skills));
            }

            using var message = CreateGetResumeSearchSuggestionSkillRequest(skills);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<string> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<string> array = new List<string>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(item.GetString());
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
