// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Affinda.API.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Affinda.API
{
    internal partial class AffindaAPIRestClient
    {
        private Uri endpoint;
        private int? limit;
        private int? offset;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of AffindaAPIRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="limit"> The numbers of documents to return, defaults to 300. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        public AffindaAPIRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, int? limit = null, int? offset = null)
        {
            this.endpoint = endpoint ?? new Uri("https://api.affinda.com/v1");
            this.limit = limit;
            this.offset = offset;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetAllResumesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resumes", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the resume summaries for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllResumesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the resume summaries for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllResumes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateResumeRequest(Stream file, string identifier, string fileName, string url, string wait, string language, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resumes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary>
        /// Uploads a resume for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#operation/getResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> CreateResumeAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeRequest(file, identifier, fileName, url, wait, language, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Resume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Uploads a resume for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#operation/getResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> CreateResume(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeRequest(file, identifier, fileName, url, wait, language, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Resume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#operation/createResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Resume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#operation/createResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Resume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<RequestError>> DeleteResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<RequestError> DeleteResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllRedactedResumesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/redacted_resumes", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the redacted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllRedactedResumesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllRedactedResumesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the redacted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllRedactedResumes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllRedactedResumesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateRedactedResumeRequest(Stream file, string identifier, string fileName, string url, string language, string wait, string redactHeadshot, string redactPersonalDetails, string redactWorkDetails, string redactEducationDetails, string redactReferees, string redactLocations, string redactDates, string redactGender, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/redacted_resumes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (redactHeadshot != null)
            {
                content.Add(new StringRequestContent(redactHeadshot), "redactHeadshot", null);
            }
            if (redactPersonalDetails != null)
            {
                content.Add(new StringRequestContent(redactPersonalDetails), "redactPersonalDetails", null);
            }
            if (redactWorkDetails != null)
            {
                content.Add(new StringRequestContent(redactWorkDetails), "redactWorkDetails", null);
            }
            if (redactEducationDetails != null)
            {
                content.Add(new StringRequestContent(redactEducationDetails), "redactEducationDetails", null);
            }
            if (redactReferees != null)
            {
                content.Add(new StringRequestContent(redactReferees), "redactReferees", null);
            }
            if (redactLocations != null)
            {
                content.Add(new StringRequestContent(redactLocations), "redactLocations", null);
            }
            if (redactDates != null)
            {
                content.Add(new StringRequestContent(redactDates), "redactDates", null);
            }
            if (redactGender != null)
            {
                content.Add(new StringRequestContent(redactGender), "redactGender", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Uploads a resume for redacting. </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="redactHeadshot"> Whether to redact headshot. </param>
        /// <param name="redactPersonalDetails"> Whether to redact personal details (e.g. name, address). </param>
        /// <param name="redactWorkDetails"> Whether to redact work details (e.g. company names). </param>
        /// <param name="redactEducationDetails"> Whether to redact education details (e.g. university names). </param>
        /// <param name="redactReferees"> Whether to redact referee details. </param>
        /// <param name="redactLocations"> Whether to redact location names. </param>
        /// <param name="redactDates"> Whether to redact dates. </param>
        /// <param name="redactGender"> Whether to redact gender. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> CreateRedactedResumeAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, string redactHeadshot = null, string redactPersonalDetails = null, string redactWorkDetails = null, string redactEducationDetails = null, string redactReferees = null, string redactLocations = null, string redactDates = null, string redactGender = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateRedactedResumeRequest(file, identifier, fileName, url, language, wait, redactHeadshot, redactPersonalDetails, redactWorkDetails, redactEducationDetails, redactReferees, redactLocations, redactDates, redactGender, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        RedactedResume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Uploads a resume for redacting. </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="redactHeadshot"> Whether to redact headshot. </param>
        /// <param name="redactPersonalDetails"> Whether to redact personal details (e.g. name, address). </param>
        /// <param name="redactWorkDetails"> Whether to redact work details (e.g. company names). </param>
        /// <param name="redactEducationDetails"> Whether to redact education details (e.g. university names). </param>
        /// <param name="redactReferees"> Whether to redact referee details. </param>
        /// <param name="redactLocations"> Whether to redact location names. </param>
        /// <param name="redactDates"> Whether to redact dates. </param>
        /// <param name="redactGender"> Whether to redact gender. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> CreateRedactedResume(Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, string redactHeadshot = null, string redactPersonalDetails = null, string redactWorkDetails = null, string redactEducationDetails = null, string redactReferees = null, string redactLocations = null, string redactDates = null, string redactGender = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateRedactedResumeRequest(file, identifier, fileName, url, language, wait, redactHeadshot, redactPersonalDetails, redactWorkDetails, redactEducationDetails, redactReferees, redactLocations, redactDates, redactGender, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        RedactedResume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRedactedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/redacted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#operation/createRedactedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetRedactedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RedactedResume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#operation/createRedactedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetRedactedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RedactedResume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRedactedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/redacted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<RequestError>> DeleteRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteRedactedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<RequestError> DeleteRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteRedactedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllResumeFormatsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resume_formats", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the resume formats. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllResumeFormatsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumeFormatsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema.DeserializePaths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the resume formats. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllResumeFormats(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumeFormatsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema.DeserializePaths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllReformattedResumesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/reformatted_resumes", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the reformatted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllReformattedResumesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllReformattedResumesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the reformatted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllReformattedResumes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllReformattedResumesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateReformattedResumeRequest(string resumeFormat, Stream file, string identifier, string fileName, string url, string language, string wait)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/reformatted_resumes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            content.Add(new StringRequestContent(resumeFormat), "resumeFormat", null);
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Upload a resume for reformatting. </summary>
        /// <param name="resumeFormat"> The ResumeFormat to use. </param>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resumeFormat"/> is null. </exception>
        public async Task<Response<object>> CreateReformattedResumeAsync(string resumeFormat, Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, CancellationToken cancellationToken = default)
        {
            if (resumeFormat == null)
            {
                throw new ArgumentNullException(nameof(resumeFormat));
            }

            using var message = CreateCreateReformattedResumeRequest(resumeFormat, file, identifier, fileName, url, language, wait);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        ReformattedResume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ReformattedResume.DeserializeReformattedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Upload a resume for reformatting. </summary>
        /// <param name="resumeFormat"> The ResumeFormat to use. </param>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resumeFormat"/> is null. </exception>
        public Response<object> CreateReformattedResume(string resumeFormat, Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, CancellationToken cancellationToken = default)
        {
            if (resumeFormat == null)
            {
                throw new ArgumentNullException(nameof(resumeFormat));
            }

            using var message = CreateCreateReformattedResumeRequest(resumeFormat, file, identifier, fileName, url, language, wait);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        ReformattedResume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ReformattedResume.DeserializeReformattedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReformattedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/reformatted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the reformatting results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/reformatted_resumes](#operation/createReformattedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetReformattedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetReformattedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReformattedResume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ReformattedResume.DeserializeReformattedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the reformatting results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/reformatted_resumes](#operation/createReformattedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetReformattedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetReformattedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReformattedResume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ReformattedResume.DeserializeReformattedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteReformattedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/reformatted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<RequestError>> DeleteReformattedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteReformattedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<RequestError> DeleteReformattedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteReformattedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllInvoicesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/invoices", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the invoice summaries for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllInvoicesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllInvoicesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllInvoicesResults value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GetAllInvoicesResults.DeserializeGetAllInvoicesResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the invoice summaries for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllInvoices(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllInvoicesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllInvoicesResults value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GetAllInvoicesResults.DeserializeGetAllInvoicesResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateInvoiceRequest(Stream file, string identifier, string fileName, string url, string wait, string language, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/invoices", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary>
        /// Uploads an invoice for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/invoices/{identifier}](#operation/getInvoice) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> URL to file to download and process. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> CreateInvoiceAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateInvoiceRequest(file, identifier, fileName, url, wait, language, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Invoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Uploads an invoice for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/invoices/{identifier}](#operation/getInvoice) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> URL to file to download and process. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> CreateInvoice(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateInvoiceRequest(file, identifier, fileName, url, wait, language, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Invoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetInvoiceRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/invoices/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the parse results for that invoice if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the invoice via the [/invoices](#operation/createInvoice) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetInvoiceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetInvoiceRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the parse results for that invoice if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the invoice via the [/invoices](#operation/createInvoice) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetInvoice(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetInvoiceRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteInvoiceRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/invoices/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete the specified invoice from the database. </summary>
        /// <param name="identifier"> Invoice identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<RequestError>> DeleteInvoiceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteInvoiceRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete the specified invoice from the database. </summary>
        /// <param name="identifier"> Invoice identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<RequestError> DeleteInvoice(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteInvoiceRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
