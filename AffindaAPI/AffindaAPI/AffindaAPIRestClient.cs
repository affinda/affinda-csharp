// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Affinda.API.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Affinda.API
{
    internal partial class AffindaAPIRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly int? _offset;
        private readonly int? _limit;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of AffindaAPIRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public AffindaAPIRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, int? offset = null, int? limit = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.affinda.com/v2");
            _offset = offset;
            _limit = limit;
        }

        internal HttpMessage CreateGetAllResumesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resumes", false);
            if (_offset != null)
            {
                uri.AppendQuery("offset", _offset.Value, true);
            }
            if (_limit != null)
            {
                uri.AppendQuery("limit", _limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the resume summaries for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllResumesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the resume summaries for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllResumes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateResumeRequest(Stream file, string url, string data, string identifier, string fileName, string wait, string language, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resumes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (data != null)
            {
                content.Add(new StringRequestContent(data), "data", null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary>
        /// Uploads a resume for parsing.
        /// Provide `file` for uploading a resume file, or `url` for getting resume file from an url, or `data` if you want to upload resume data directly without parsing any resume file.
        /// For uploading resume data, the `data` argument provided must be a JSON-encoded string.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#operation/getResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="data"> A JSON-encoded string of the `ResumeData` object. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> CreateResumeAsync(Stream file = null, string url = null, string data = null, string identifier = null, string fileName = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeRequest(file, url, data, identifier, fileName, wait, language, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Resume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Uploads a resume for parsing.
        /// Provide `file` for uploading a resume file, or `url` for getting resume file from an url, or `data` if you want to upload resume data directly without parsing any resume file.
        /// For uploading resume data, the `data` argument provided must be a JSON-encoded string.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#operation/getResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="data"> A JSON-encoded string of the `ResumeData` object. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> CreateResume(Stream file = null, string url = null, string data = null, string identifier = null, string fileName = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeRequest(file, url, data, identifier, fileName, wait, language, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Resume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#operation/createResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Resume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#operation/createResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Resume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateResumeDataRequest(string identifier, ResumeData body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary>
        /// Update data of a parsed resume.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#operation/createResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Resume data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> UpdateResumeDataAsync(string identifier, ResumeData body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResumeDataRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ResumeData.DeserializeResumeData(document.RootElement);
                        }
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Update data of a parsed resume.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#operation/createResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Resume data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        public Response<object> UpdateResumeData(string identifier, ResumeData body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResumeDataRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ResumeData.DeserializeResumeData(document.RootElement);
                        }
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<RequestError>> DeleteResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<RequestError> DeleteResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllRedactedResumesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/redacted_resumes", false);
            if (_offset != null)
            {
                uri.AppendQuery("offset", _offset.Value, true);
            }
            if (_limit != null)
            {
                uri.AppendQuery("limit", _limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the redacted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllRedactedResumesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllRedactedResumesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the redacted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllRedactedResumes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllRedactedResumesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateRedactedResumeRequest(Stream file, string identifier, string fileName, string url, string language, string wait, string redactHeadshot, string redactPersonalDetails, string redactWorkDetails, string redactEducationDetails, string redactReferees, string redactLocations, string redactDates, string redactGender, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/redacted_resumes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (redactHeadshot != null)
            {
                content.Add(new StringRequestContent(redactHeadshot), "redactHeadshot", null);
            }
            if (redactPersonalDetails != null)
            {
                content.Add(new StringRequestContent(redactPersonalDetails), "redactPersonalDetails", null);
            }
            if (redactWorkDetails != null)
            {
                content.Add(new StringRequestContent(redactWorkDetails), "redactWorkDetails", null);
            }
            if (redactEducationDetails != null)
            {
                content.Add(new StringRequestContent(redactEducationDetails), "redactEducationDetails", null);
            }
            if (redactReferees != null)
            {
                content.Add(new StringRequestContent(redactReferees), "redactReferees", null);
            }
            if (redactLocations != null)
            {
                content.Add(new StringRequestContent(redactLocations), "redactLocations", null);
            }
            if (redactDates != null)
            {
                content.Add(new StringRequestContent(redactDates), "redactDates", null);
            }
            if (redactGender != null)
            {
                content.Add(new StringRequestContent(redactGender), "redactGender", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Uploads a resume for redacting. </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="redactHeadshot"> Whether to redact headshot. </param>
        /// <param name="redactPersonalDetails"> Whether to redact personal details (e.g. name, address). </param>
        /// <param name="redactWorkDetails"> Whether to redact work details (e.g. company names). </param>
        /// <param name="redactEducationDetails"> Whether to redact education details (e.g. university names). </param>
        /// <param name="redactReferees"> Whether to redact referee details. </param>
        /// <param name="redactLocations"> Whether to redact location names. </param>
        /// <param name="redactDates"> Whether to redact dates. </param>
        /// <param name="redactGender"> Whether to redact gender. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> CreateRedactedResumeAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, string redactHeadshot = null, string redactPersonalDetails = null, string redactWorkDetails = null, string redactEducationDetails = null, string redactReferees = null, string redactLocations = null, string redactDates = null, string redactGender = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateRedactedResumeRequest(file, identifier, fileName, url, language, wait, redactHeadshot, redactPersonalDetails, redactWorkDetails, redactEducationDetails, redactReferees, redactLocations, redactDates, redactGender, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        RedactedResume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Uploads a resume for redacting. </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="redactHeadshot"> Whether to redact headshot. </param>
        /// <param name="redactPersonalDetails"> Whether to redact personal details (e.g. name, address). </param>
        /// <param name="redactWorkDetails"> Whether to redact work details (e.g. company names). </param>
        /// <param name="redactEducationDetails"> Whether to redact education details (e.g. university names). </param>
        /// <param name="redactReferees"> Whether to redact referee details. </param>
        /// <param name="redactLocations"> Whether to redact location names. </param>
        /// <param name="redactDates"> Whether to redact dates. </param>
        /// <param name="redactGender"> Whether to redact gender. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> CreateRedactedResume(Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, string redactHeadshot = null, string redactPersonalDetails = null, string redactWorkDetails = null, string redactEducationDetails = null, string redactReferees = null, string redactLocations = null, string redactDates = null, string redactGender = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateRedactedResumeRequest(file, identifier, fileName, url, language, wait, redactHeadshot, redactPersonalDetails, redactWorkDetails, redactEducationDetails, redactReferees, redactLocations, redactDates, redactGender, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        RedactedResume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRedactedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/redacted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#operation/createRedactedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetRedactedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RedactedResume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#operation/createRedactedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetRedactedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RedactedResume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRedactedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/redacted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<RequestError>> DeleteRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteRedactedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<RequestError> DeleteRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteRedactedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllResumeFormatsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resume_formats", false);
            if (_offset != null)
            {
                uri.AppendQuery("offset", _offset.Value, true);
            }
            if (_limit != null)
            {
                uri.AppendQuery("limit", _limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the resume formats. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllResumeFormatsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumeFormatsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema.DeserializePaths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the resume formats. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllResumeFormats(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumeFormatsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema.DeserializePaths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllReformattedResumesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/reformatted_resumes", false);
            if (_offset != null)
            {
                uri.AppendQuery("offset", _offset.Value, true);
            }
            if (_limit != null)
            {
                uri.AppendQuery("limit", _limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the reformatted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllReformattedResumesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllReformattedResumesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the reformatted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllReformattedResumes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllReformattedResumesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllDocumentsResults value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GetAllDocumentsResults.DeserializeGetAllDocumentsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateReformattedResumeRequest(string resumeFormat, Stream file, string identifier, string fileName, string url, string language, string wait)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/reformatted_resumes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            content.Add(new StringRequestContent(resumeFormat), "resumeFormat", null);
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Upload a resume for reformatting. </summary>
        /// <param name="resumeFormat"> The ResumeFormat to use. </param>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resumeFormat"/> is null. </exception>
        public async Task<Response<object>> CreateReformattedResumeAsync(string resumeFormat, Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, CancellationToken cancellationToken = default)
        {
            if (resumeFormat == null)
            {
                throw new ArgumentNullException(nameof(resumeFormat));
            }

            using var message = CreateCreateReformattedResumeRequest(resumeFormat, file, identifier, fileName, url, language, wait);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        ReformattedResume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ReformattedResume.DeserializeReformattedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Upload a resume for reformatting. </summary>
        /// <param name="resumeFormat"> The ResumeFormat to use. </param>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resumeFormat"/> is null. </exception>
        public Response<object> CreateReformattedResume(string resumeFormat, Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, CancellationToken cancellationToken = default)
        {
            if (resumeFormat == null)
            {
                throw new ArgumentNullException(nameof(resumeFormat));
            }

            using var message = CreateCreateReformattedResumeRequest(resumeFormat, file, identifier, fileName, url, language, wait);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        ReformattedResume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ReformattedResume.DeserializeReformattedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReformattedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/reformatted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the reformatting results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/reformatted_resumes](#operation/createReformattedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetReformattedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetReformattedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReformattedResume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ReformattedResume.DeserializeReformattedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the reformatting results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/reformatted_resumes](#operation/createReformattedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetReformattedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetReformattedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReformattedResume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ReformattedResume.DeserializeReformattedResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteReformattedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/reformatted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<RequestError>> DeleteReformattedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteReformattedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<RequestError> DeleteReformattedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteReformattedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateResumeSearchRequest(ResumeSearchParameters body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resume_search", false);
            if (_offset != null)
            {
                uri.AppendQuery("offset", _offset.Value, true);
            }
            if (_limit != null)
            {
                uri.AppendQuery("limit", _limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary>
        /// Searches through parsed resumes. You can search with custom criterias, a job description, or a resume.
        /// When searching with a job description, a parsed job description is used to find candidates that suit it.
        /// When searching with a resume, a parsed resume is used to find other candidates that have similar attributes.
        /// </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> CreateResumeSearchAsync(ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateResumeSearchRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ResumeSearch value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearch.DeserializeResumeSearch(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Searches through parsed resumes. You can search with custom criterias, a job description, or a resume.
        /// When searching with a job description, a parsed job description is used to find candidates that suit it.
        /// When searching with a resume, a parsed resume is used to find other candidates that have similar attributes.
        /// </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> CreateResumeSearch(ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateResumeSearchRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ResumeSearch value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearch.DeserializeResumeSearch(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchDetailRequest(string identifier, ResumeSearchParameters body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resume_search/details/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this resume.
        /// The `identifier` is the unique ID returned via the [/resume_search](#operation/createResumeSearch) endpoint.
        /// </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> GetResumeSearchDetailAsync(string identifier, ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetResumeSearchDetailRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchDetail value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchDetail.DeserializeResumeSearchDetail(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this resume.
        /// The `identifier` is the unique ID returned via the [/resume_search](#operation/createResumeSearch) endpoint.
        /// </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        public Response<object> GetResumeSearchDetail(string identifier, ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetResumeSearchDetailRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchDetail value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchDetail.DeserializeResumeSearchDetail(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchMatchRequest(string resumeIdentifier, string jobDescriptionIdentifier, string indexName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resume_search/match", false);
            uri.AppendQuery("resume_identifier", resumeIdentifier, true);
            uri.AppendQuery("job_description_identifier", jobDescriptionIdentifier, true);
            if (indexName != null)
            {
                uri.AppendQuery("index_name", indexName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the matching score between a resume and a job description. The score ranges between 0 and 1, with 0 being not a match at all, and 1 being perfect match. </summary>
        /// <param name="resumeIdentifier"> Identify the resume to match. </param>
        /// <param name="jobDescriptionIdentifier"> Identify the job description to match. </param>
        /// <param name="indexName"> Optionally, specify an index to search in. If not specified, will search in all indexes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resumeIdentifier"/> or <paramref name="jobDescriptionIdentifier"/> is null. </exception>
        public async Task<Response<object>> GetResumeSearchMatchAsync(string resumeIdentifier, string jobDescriptionIdentifier, string indexName = null, CancellationToken cancellationToken = default)
        {
            if (resumeIdentifier == null)
            {
                throw new ArgumentNullException(nameof(resumeIdentifier));
            }
            if (jobDescriptionIdentifier == null)
            {
                throw new ArgumentNullException(nameof(jobDescriptionIdentifier));
            }

            using var message = CreateGetResumeSearchMatchRequest(resumeIdentifier, jobDescriptionIdentifier, indexName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchMatch value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchMatch.DeserializeResumeSearchMatch(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the matching score between a resume and a job description. The score ranges between 0 and 1, with 0 being not a match at all, and 1 being perfect match. </summary>
        /// <param name="resumeIdentifier"> Identify the resume to match. </param>
        /// <param name="jobDescriptionIdentifier"> Identify the job description to match. </param>
        /// <param name="indexName"> Optionally, specify an index to search in. If not specified, will search in all indexes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resumeIdentifier"/> or <paramref name="jobDescriptionIdentifier"/> is null. </exception>
        public Response<object> GetResumeSearchMatch(string resumeIdentifier, string jobDescriptionIdentifier, string indexName = null, CancellationToken cancellationToken = default)
        {
            if (resumeIdentifier == null)
            {
                throw new ArgumentNullException(nameof(resumeIdentifier));
            }
            if (jobDescriptionIdentifier == null)
            {
                throw new ArgumentNullException(nameof(jobDescriptionIdentifier));
            }

            using var message = CreateGetResumeSearchMatchRequest(resumeIdentifier, jobDescriptionIdentifier, indexName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchMatch value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchMatch.DeserializeResumeSearchMatch(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllJobDescriptionsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/job_descriptions", false);
            if (_offset != null)
            {
                uri.AppendQuery("offset", _offset.Value, true);
            }
            if (_limit != null)
            {
                uri.AppendQuery("limit", _limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the job descriptions for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllJobDescriptionsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllJobDescriptionsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllJobDescriptionsResults value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GetAllJobDescriptionsResults.DeserializeGetAllJobDescriptionsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the job descriptions for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllJobDescriptions(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllJobDescriptionsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllJobDescriptionsResults value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GetAllJobDescriptionsResults.DeserializeGetAllJobDescriptionsResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateJobDescriptionRequest(Stream file, string identifier, string fileName, string url, string wait, string language, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/job_descriptions", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary>
        /// Uploads a job description for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/job_descriptions/{identifier}](#operation/getResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> CreateJobDescriptionAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateJobDescriptionRequest(file, identifier, fileName, url, wait, language, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        JobDescription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescription.DeserializeJobDescription(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Uploads a job description for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/job_descriptions/{identifier}](#operation/getResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> CreateJobDescription(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateJobDescriptionRequest(file, identifier, fileName, url, wait, language, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        JobDescription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescription.DeserializeJobDescription(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetJobDescriptionRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/job_descriptions/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the results for that job description if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/job_descriptions](#operation/createJobDescription) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetJobDescriptionAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetJobDescriptionRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescription.DeserializeJobDescription(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the results for that job description if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/job_descriptions](#operation/createJobDescription) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetJobDescription(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetJobDescriptionRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescription.DeserializeJobDescription(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteJobDescriptionRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/job_descriptions/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes the specified job description from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<RequestError>> DeleteJobDescriptionAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteJobDescriptionRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the specified job description from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<RequestError> DeleteJobDescription(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteJobDescriptionRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllIndexesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/index", false);
            if (_offset != null)
            {
                uri.AppendQuery("offset", _offset.Value, true);
            }
            if (_limit != null)
            {
                uri.AppendQuery("limit", _limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the indexes. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllIndexesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllIndexesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema.DeserializePaths6Pypg5IndexGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the indexes. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllIndexes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllIndexesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema.DeserializePaths6Pypg5IndexGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateIndexRequest(string name)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/index", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (name != null)
            {
                content.Add(new StringRequestContent(name), "name", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Create an index for the search tool. </summary>
        /// <param name="name"> The PostContentSchemaName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> CreateIndexAsync(string name = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateIndexRequest(name);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema.DeserializePaths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create an index for the search tool. </summary>
        /// <param name="name"> The PostContentSchemaName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> CreateIndex(string name = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateIndexRequest(name);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema.DeserializePaths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteIndexRequest(string name)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/index/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes the specified index from the database. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public async Task<Response<RequestError>> DeleteIndexAsync(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateDeleteIndexRequest(name);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the specified index from the database. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public Response<RequestError> DeleteIndex(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateDeleteIndexRequest(name);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllIndexDocumentsRequest(string name)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/index/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/documents", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the indexed documents for that index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public async Task<Response<object>> GetAllIndexDocumentsAsync(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateGetAllIndexDocumentsRequest(name);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema.DeserializePathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the indexed documents for that index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public Response<object> GetAllIndexDocuments(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateGetAllIndexDocumentsRequest(name);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema.DeserializePathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateIndexDocumentRequest(string name, PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/index/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/documents", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create an indexed document for the search tool. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> CreateIndexDocumentAsync(string name, PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateIndexDocumentRequest(name, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema.DeserializePathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create an indexed document for the search tool. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="body"/> is null. </exception>
        public Response<object> CreateIndexDocument(string name, PathsGpptmIndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateIndexDocumentRequest(name, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema.DeserializePathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteIndexDocumentRequest(string name, string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/index/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/documents/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete the specified indexed document from the database. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="identifier"/> is null. </exception>
        public async Task<Response<RequestError>> DeleteIndexDocumentAsync(string name, string identifier, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteIndexDocumentRequest(name, identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete the specified indexed document from the database. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="identifier"/> is null. </exception>
        public Response<RequestError> DeleteIndexDocument(string name, string identifier, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteIndexDocumentRequest(name, identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllInvoicesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/invoices", false);
            if (_offset != null)
            {
                uri.AppendQuery("offset", _offset.Value, true);
            }
            if (_limit != null)
            {
                uri.AppendQuery("limit", _limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the invoice summaries for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllInvoicesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllInvoicesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllInvoicesResults value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GetAllInvoicesResults.DeserializeGetAllInvoicesResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the invoice summaries for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllInvoices(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllInvoicesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetAllInvoicesResults value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GetAllInvoicesResults.DeserializeGetAllInvoicesResults(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateInvoiceRequest(Stream file, string identifier, string fileName, string url, string wait, string language, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/invoices", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary>
        /// Uploads an invoice for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/invoices/{identifier}](#operation/getInvoice) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> CreateInvoiceAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateInvoiceRequest(file, identifier, fileName, url, wait, language, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Invoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Uploads an invoice for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/invoices/{identifier}](#operation/getInvoice) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> The binary to use. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="wait"> The Wait to use. </param>
        /// <param name="language"> The Language to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> CreateInvoice(Stream file = null, string identifier = null, string fileName = null, string url = null, string wait = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateInvoiceRequest(file, identifier, fileName, url, wait, language, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Invoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetInvoiceRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/invoices/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the parse results for that invoice if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the invoice via the [/invoices](#operation/createInvoice) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetInvoiceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetInvoiceRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the parse results for that invoice if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the invoice via the [/invoices](#operation/createInvoice) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetInvoice(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetInvoiceRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteInvoiceRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/invoices/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete the specified invoice from the database. </summary>
        /// <param name="identifier"> Invoice identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<RequestError>> DeleteInvoiceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteInvoiceRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete the specified invoice from the database. </summary>
        /// <param name="identifier"> Invoice identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<RequestError> DeleteInvoice(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteInvoiceRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((RequestError)null, message.Response);
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListOccupationGroupsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/occupation_groups", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> TODO TODO TODO. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> ListOccupationGroupsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListOccupationGroupsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<OccupationGroup> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<OccupationGroup> array = new List<OccupationGroup>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(OccupationGroup.DeserializeOccupationGroup(item));
                        }
                        value = array;
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> TODO TODO TODO. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> ListOccupationGroups(CancellationToken cancellationToken = default)
        {
            using var message = CreateListOccupationGroupsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<OccupationGroup> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<OccupationGroup> array = new List<OccupationGroup>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(OccupationGroup.DeserializeOccupationGroup(item));
                        }
                        value = array;
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllUsersRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/users", false);
            if (_offset != null)
            {
                uri.AppendQuery("offset", _offset.Value, true);
            }
            if (_limit != null)
            {
                uri.AppendQuery("limit", _limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the users. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllUsersAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllUsersRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema.DeserializePathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the users. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllUsers(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllUsersRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema.DeserializePathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateUserRequest(string username, string id, string name, string email)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (id != null)
            {
                content.Add(new StringRequestContent(id), "id", null);
            }
            if (name != null)
            {
                content.Add(new StringRequestContent(name), "name", null);
            }
            content.Add(new StringRequestContent(username), "username", null);
            if (email != null)
            {
                content.Add(new StringRequestContent(email), "email", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Create an user as part of your account. </summary>
        /// <param name="username"> The UserUsername to use. </param>
        /// <param name="id"> The UserId to use. </param>
        /// <param name="name"> The UserName to use. </param>
        /// <param name="email"> The UserEmail to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/> is null. </exception>
        public async Task<Response<object>> CreateUserAsync(string username, string id = null, string name = null, string email = null, CancellationToken cancellationToken = default)
        {
            if (username == null)
            {
                throw new ArgumentNullException(nameof(username));
            }

            using var message = CreateCreateUserRequest(username, id, name, email);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema.DeserializePathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create an user as part of your account. </summary>
        /// <param name="username"> The UserUsername to use. </param>
        /// <param name="id"> The UserId to use. </param>
        /// <param name="name"> The UserName to use. </param>
        /// <param name="email"> The UserEmail to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/> is null. </exception>
        public Response<object> CreateUser(string username, string id = null, string name = null, string email = null, CancellationToken cancellationToken = default)
        {
            if (username == null)
            {
                throw new ArgumentNullException(nameof(username));
            }

            using var message = CreateCreateUserRequest(username, id, name, email);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema.DeserializePathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
