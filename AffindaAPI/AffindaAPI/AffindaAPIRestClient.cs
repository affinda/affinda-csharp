// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Affinda.API.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Affinda.API
{
    internal partial class AffindaAPIRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Region? _region;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of AffindaAPIRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="region"> region - server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public AffindaAPIRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Region? region = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _region = region ?? Region.Api;
        }

        internal HttpMessage CreateGetAllResumesRequest(int? offset, int? limit)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resumes", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all resumes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the resume summaries for that user, limited to 300 per page. </remarks>
        public async Task<Response<Paths14VxierV2ResumesGetResponses200ContentApplicationJsonSchema>> GetAllResumesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumesRequest(offset, limit);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths14VxierV2ResumesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths14VxierV2ResumesGetResponses200ContentApplicationJsonSchema.DeserializePaths14VxierV2ResumesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all resumes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the resume summaries for that user, limited to 300 per page. </remarks>
        public Response<Paths14VxierV2ResumesGetResponses200ContentApplicationJsonSchema> GetAllResumes(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumesRequest(offset, limit);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths14VxierV2ResumesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths14VxierV2ResumesGetResponses200ContentApplicationJsonSchema.DeserializePaths14VxierV2ResumesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateResumeRequest(Stream file, string url, string data, string identifier, string fileName, string wait, string rejectDuplicates, string language, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resumes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (data != null)
            {
                content.Add(new StringRequestContent(data), "data", null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (rejectDuplicates != null)
            {
                content.Add(new StringRequestContent(rejectDuplicates), "rejectDuplicates", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Upload a resume for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> URL to download the resume. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="rejectDuplicates"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a resume for parsing. When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#get-/resumes/-identifier-) endpoint to check processing status and retrieve results.&lt;br/&gt;
        /// Resumes can be uploaded as a file or a URL. In addition, data can be added directly if users want to upload directly without parsing any resume file. For uploading resume data, the `data` argument provided must be a JSON-encoded string. Data uploads will not impact upon parsing credits.
        /// </remarks>
        public async Task<Response<Resume>> CreateResumeAsync(Stream file = null, string url = null, string data = null, string identifier = null, string fileName = null, string wait = null, string rejectDuplicates = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeRequest(file, url, data, identifier, fileName, wait, rejectDuplicates, language, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Resume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Upload a resume for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> URL to download the resume. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="rejectDuplicates"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a resume for parsing. When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#get-/resumes/-identifier-) endpoint to check processing status and retrieve results.&lt;br/&gt;
        /// Resumes can be uploaded as a file or a URL. In addition, data can be added directly if users want to upload directly without parsing any resume file. For uploading resume data, the `data` argument provided must be a JSON-encoded string. Data uploads will not impact upon parsing credits.
        /// </remarks>
        public Response<Resume> CreateResume(Stream file = null, string url = null, string data = null, string identifier = null, string fileName = null, string wait = null, string rejectDuplicates = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeRequest(file, url, data, identifier, fileName, wait, rejectDuplicates, language, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Resume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeRequest(string identifier, string format)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resumes/", false);
            uri.AppendPath(identifier, true);
            if (format != null)
            {
                uri.AppendQuery("format", format, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get parse results for a specific resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="format"> Set this to &quot;hr-xml&quot; to get the response in HR-XML format. Currently the only supported value for this parameter is &quot;hr-xml&quot;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#post-/resumes) endpoint.
        /// </remarks>
        public async Task<Response<object>> GetResumeAsync(string identifier, string format = null, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetResumeRequest(identifier, format);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Resume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get parse results for a specific resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="format"> Set this to &quot;hr-xml&quot; to get the response in HR-XML format. Currently the only supported value for this parameter is &quot;hr-xml&quot;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#post-/resumes) endpoint.
        /// </remarks>
        public Response<object> GetResume(string identifier, string format = null, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetResumeRequest(identifier, format);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Resume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                case 404:
                    {
                        RequestError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestError.DeserializeRequestError(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateResumeDataRequest(string identifier, ResumeData body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Update a resume&apos;s data. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Resume data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// Update data of a parsed resume.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#post-/resumes) endpoint.
        /// </remarks>
        public async Task<Response<ResumeData>> UpdateResumeDataAsync(string identifier, ResumeData body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResumeDataRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ResumeData.DeserializeResumeData(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a resume&apos;s data. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Resume data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// Update data of a parsed resume.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#post-/resumes) endpoint.
        /// </remarks>
        public Response<ResumeData> UpdateResumeData(string identifier, ResumeData body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResumeDataRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ResumeData.DeserializeResumeData(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified resume from the database. </remarks>
        public async Task<Response> DeleteResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified resume from the database. </remarks>
        public Response DeleteResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllRedactedResumesRequest(int? offset, int? limit)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/redacted_resumes", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all redacted resumes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the redacted resume information for that resume. </remarks>
        public async Task<Response<Paths1D957B5V2RedactedResumesGetResponses200ContentApplicationJsonSchema>> GetAllRedactedResumesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllRedactedResumesRequest(offset, limit);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1D957B5V2RedactedResumesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1D957B5V2RedactedResumesGetResponses200ContentApplicationJsonSchema.DeserializePaths1D957B5V2RedactedResumesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all redacted resumes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the redacted resume information for that resume. </remarks>
        public Response<Paths1D957B5V2RedactedResumesGetResponses200ContentApplicationJsonSchema> GetAllRedactedResumes(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllRedactedResumesRequest(offset, limit);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1D957B5V2RedactedResumesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1D957B5V2RedactedResumesGetResponses200ContentApplicationJsonSchema.DeserializePaths1D957B5V2RedactedResumesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateRedactedResumeRequest(Stream file, string identifier, string fileName, string url, string language, string wait, string redactHeadshot, string redactPersonalDetails, string redactWorkDetails, string redactEducationDetails, string redactReferees, string redactLocations, string redactDates, string redactGender, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/redacted_resumes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (redactHeadshot != null)
            {
                content.Add(new StringRequestContent(redactHeadshot), "redactHeadshot", null);
            }
            if (redactPersonalDetails != null)
            {
                content.Add(new StringRequestContent(redactPersonalDetails), "redactPersonalDetails", null);
            }
            if (redactWorkDetails != null)
            {
                content.Add(new StringRequestContent(redactWorkDetails), "redactWorkDetails", null);
            }
            if (redactEducationDetails != null)
            {
                content.Add(new StringRequestContent(redactEducationDetails), "redactEducationDetails", null);
            }
            if (redactReferees != null)
            {
                content.Add(new StringRequestContent(redactReferees), "redactReferees", null);
            }
            if (redactLocations != null)
            {
                content.Add(new StringRequestContent(redactLocations), "redactLocations", null);
            }
            if (redactDates != null)
            {
                content.Add(new StringRequestContent(redactDates), "redactDates", null);
            }
            if (redactGender != null)
            {
                content.Add(new StringRequestContent(redactGender), "redactGender", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Upload a resume for redacting. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="url"> URL to download the resume. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="redactHeadshot"> Whether to redact headshot. </param>
        /// <param name="redactPersonalDetails"> Whether to redact personal details (e.g. name, address). </param>
        /// <param name="redactWorkDetails"> Whether to redact work details (e.g. company names). </param>
        /// <param name="redactEducationDetails"> Whether to redact education details (e.g. university names). </param>
        /// <param name="redactReferees"> Whether to redact referee details. </param>
        /// <param name="redactLocations"> Whether to redact location names. </param>
        /// <param name="redactDates"> Whether to redact dates. </param>
        /// <param name="redactGender"> Whether to redact gender. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Uploads a resume for redacting. </remarks>
        public async Task<Response<RedactedResume>> CreateRedactedResumeAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, string redactHeadshot = null, string redactPersonalDetails = null, string redactWorkDetails = null, string redactEducationDetails = null, string redactReferees = null, string redactLocations = null, string redactDates = null, string redactGender = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateRedactedResumeRequest(file, identifier, fileName, url, language, wait, redactHeadshot, redactPersonalDetails, redactWorkDetails, redactEducationDetails, redactReferees, redactLocations, redactDates, redactGender, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        RedactedResume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Upload a resume for redacting. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="url"> URL to download the resume. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="redactHeadshot"> Whether to redact headshot. </param>
        /// <param name="redactPersonalDetails"> Whether to redact personal details (e.g. name, address). </param>
        /// <param name="redactWorkDetails"> Whether to redact work details (e.g. company names). </param>
        /// <param name="redactEducationDetails"> Whether to redact education details (e.g. university names). </param>
        /// <param name="redactReferees"> Whether to redact referee details. </param>
        /// <param name="redactLocations"> Whether to redact location names. </param>
        /// <param name="redactDates"> Whether to redact dates. </param>
        /// <param name="redactGender"> Whether to redact gender. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Uploads a resume for redacting. </remarks>
        public Response<RedactedResume> CreateRedactedResume(Stream file = null, string identifier = null, string fileName = null, string url = null, string language = null, string wait = null, string redactHeadshot = null, string redactPersonalDetails = null, string redactWorkDetails = null, string redactEducationDetails = null, string redactReferees = null, string redactLocations = null, string redactDates = null, string redactGender = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateRedactedResumeRequest(file, identifier, fileName, url, language, wait, redactHeadshot, redactPersonalDetails, redactWorkDetails, redactEducationDetails, redactReferees, redactLocations, redactDates, redactGender, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        RedactedResume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRedactedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/redacted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get redaction results for a specific resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#post-/redacted_resumes) endpoint.
        /// </remarks>
        public async Task<Response<RedactedResume>> GetRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetRedactedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RedactedResume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get redaction results for a specific resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#post-/redacted_resumes) endpoint.
        /// </remarks>
        public Response<RedactedResume> GetRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetRedactedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RedactedResume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RedactedResume.DeserializeRedactedResume(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRedactedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/redacted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a redacted resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified resume from the database. </remarks>
        public async Task<Response> DeleteRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteRedactedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a redacted resume. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified resume from the database. </remarks>
        public Response DeleteRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteRedactedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllInvoicesRequest(int? offset, int? limit)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/invoices", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all invoices. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the invoice summaries for that user, limited to 300 per page. </remarks>
        public async Task<Response<PathsGfm23QV2InvoicesGetResponses200ContentApplicationJsonSchema>> GetAllInvoicesAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllInvoicesRequest(offset, limit);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsGfm23QV2InvoicesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsGfm23QV2InvoicesGetResponses200ContentApplicationJsonSchema.DeserializePathsGfm23QV2InvoicesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all invoices. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the invoice summaries for that user, limited to 300 per page. </remarks>
        public Response<PathsGfm23QV2InvoicesGetResponses200ContentApplicationJsonSchema> GetAllInvoices(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllInvoicesRequest(offset, limit);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsGfm23QV2InvoicesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsGfm23QV2InvoicesGetResponses200ContentApplicationJsonSchema.DeserializePathsGfm23QV2InvoicesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateInvoiceRequest(Stream file, string url, string identifier, string fileName, string wait, string rejectDuplicates, string language, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/invoices", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (rejectDuplicates != null)
            {
                content.Add(new StringRequestContent(rejectDuplicates), "rejectDuplicates", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Upload an invoice for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> URL to download the invoice. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="rejectDuplicates"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads an invoice for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/invoices/{identifier}](#get-/invoices/-identifier-) endpoint to check processing status and retrieve results.
        /// </remarks>
        public async Task<Response<Invoice>> CreateInvoiceAsync(Stream file = null, string url = null, string identifier = null, string fileName = null, string wait = null, string rejectDuplicates = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateInvoiceRequest(file, url, identifier, fileName, wait, rejectDuplicates, language, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Invoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Upload an invoice for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> URL to download the invoice. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="rejectDuplicates"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads an invoice for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/invoices/{identifier}](#get-/invoices/-identifier-) endpoint to check processing status and retrieve results.
        /// </remarks>
        public Response<Invoice> CreateInvoice(Stream file = null, string url = null, string identifier = null, string fileName = null, string wait = null, string rejectDuplicates = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateInvoiceRequest(file, url, identifier, fileName, wait, rejectDuplicates, language, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Invoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetInvoiceRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/invoices/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get parse results for a specific invoice. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// Returns all the parse results for that invoice if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the invoice via the [/invoices](#post-/invoices) endpoint.
        /// </remarks>
        public async Task<Response<Invoice>> GetInvoiceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetInvoiceRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get parse results for a specific invoice. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// Returns all the parse results for that invoice if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the invoice via the [/invoices](#post-/invoices) endpoint.
        /// </remarks>
        public Response<Invoice> GetInvoice(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetInvoiceRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteInvoiceRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/invoices/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an invoice. </summary>
        /// <param name="identifier"> Invoice identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Delete the specified invoice from the database. Note, any invoices deleted from the database will no longer be used in any tailored customer models. </remarks>
        public async Task<Response> DeleteInvoiceAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteInvoiceRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an invoice. </summary>
        /// <param name="identifier"> Invoice identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Delete the specified invoice from the database. Note, any invoices deleted from the database will no longer be used in any tailored customer models. </remarks>
        public Response DeleteInvoice(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteInvoiceRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllJobDescriptionsRequest(int? offset, int? limit)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/job_descriptions", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all job descriptions. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the job descriptions for that user, limited to 300 per page. </remarks>
        public async Task<Response<PathsChbpqfV2JobDescriptionsGetResponses200ContentApplicationJsonSchema>> GetAllJobDescriptionsAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllJobDescriptionsRequest(offset, limit);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsChbpqfV2JobDescriptionsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsChbpqfV2JobDescriptionsGetResponses200ContentApplicationJsonSchema.DeserializePathsChbpqfV2JobDescriptionsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all job descriptions. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the job descriptions for that user, limited to 300 per page. </remarks>
        public Response<PathsChbpqfV2JobDescriptionsGetResponses200ContentApplicationJsonSchema> GetAllJobDescriptions(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllJobDescriptionsRequest(offset, limit);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsChbpqfV2JobDescriptionsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsChbpqfV2JobDescriptionsGetResponses200ContentApplicationJsonSchema.DeserializePathsChbpqfV2JobDescriptionsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateJobDescriptionRequest(Stream file, string url, string identifier, string fileName, string wait, string rejectDuplicates, string language, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/job_descriptions", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", fileName ?? "null.pdf" , null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (wait != null)
            {
                content.Add(new StringRequestContent(wait), "wait", null);
            }
            if (rejectDuplicates != null)
            {
                content.Add(new StringRequestContent(rejectDuplicates), "rejectDuplicates", null);
            }
            if (language != null)
            {
                content.Add(new StringRequestContent(language), "language", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Upload a job description for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> URL to download the job description. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="rejectDuplicates"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a job description for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/job_descriptions/{identifier}](#get-/job_descriptions/-identifier-) endpoint to check processing status and retrieve results.
        /// Job Descriptions can be uploaded as a file or a URL. In addition, data can be added directly if users want to upload directly without parsing any resume file. For uploading resume data, the `data` argument provided must be a JSON-encoded string. Data uploads will not impact upon parsing credits.
        /// </remarks>
        public async Task<Response<JobDescription>> CreateJobDescriptionAsync(Stream file = null, string url = null, string identifier = null, string fileName = null, string wait = null, string rejectDuplicates = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateJobDescriptionRequest(file, url, identifier, fileName, wait, rejectDuplicates, language, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        JobDescription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescription.DeserializeJobDescription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Upload a job description for parsing. </summary>
        /// <param name="file"> The Stream to use. </param>
        /// <param name="url"> URL to download the job description. </param>
        /// <param name="identifier"> The String to use. </param>
        /// <param name="fileName"> The String to use. </param>
        /// <param name="wait"> The String to use. </param>
        /// <param name="rejectDuplicates"> The String to use. </param>
        /// <param name="language"> The String to use. </param>
        /// <param name="expiryTime"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Uploads a job description for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/job_descriptions/{identifier}](#get-/job_descriptions/-identifier-) endpoint to check processing status and retrieve results.
        /// Job Descriptions can be uploaded as a file or a URL. In addition, data can be added directly if users want to upload directly without parsing any resume file. For uploading resume data, the `data` argument provided must be a JSON-encoded string. Data uploads will not impact upon parsing credits.
        /// </remarks>
        public Response<JobDescription> CreateJobDescription(Stream file = null, string url = null, string identifier = null, string fileName = null, string wait = null, string rejectDuplicates = null, string language = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateJobDescriptionRequest(file, url, identifier, fileName, wait, rejectDuplicates, language, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        JobDescription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescription.DeserializeJobDescription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetJobDescriptionRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/job_descriptions/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get job description results for a specific job description file. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// Returns all the results for that job description if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/job_descriptions](#post-/job_descriptions) endpoint.
        /// </remarks>
        public async Task<Response<JobDescription>> GetJobDescriptionAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetJobDescriptionRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescription.DeserializeJobDescription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get job description results for a specific job description file. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// Returns all the results for that job description if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/job_descriptions](#post-/job_descriptions) endpoint.
        /// </remarks>
        public Response<JobDescription> GetJobDescription(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetJobDescriptionRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescription.DeserializeJobDescription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateJobDescriptionDataRequest(string identifier, JobDescriptionData body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/job_descriptions/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Update a job description&apos;s data. </summary>
        /// <param name="identifier"> Job description identifier. </param>
        /// <param name="body"> Job description data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// Update data of a job description.
        /// The `identifier` is the unique ID returned after POST-ing the job description via the [/job_descriptions](#post-/job_descriptions) endpoint.
        /// </remarks>
        public async Task<Response<JobDescriptionData>> UpdateJobDescriptionDataAsync(string identifier, JobDescriptionData body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateJobDescriptionDataRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = JobDescriptionData.DeserializeJobDescriptionData(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a job description&apos;s data. </summary>
        /// <param name="identifier"> Job description identifier. </param>
        /// <param name="body"> Job description data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// Update data of a job description.
        /// The `identifier` is the unique ID returned after POST-ing the job description via the [/job_descriptions](#post-/job_descriptions) endpoint.
        /// </remarks>
        public Response<JobDescriptionData> UpdateJobDescriptionData(string identifier, JobDescriptionData body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateJobDescriptionDataRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = JobDescriptionData.DeserializeJobDescriptionData(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteJobDescriptionRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/job_descriptions/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a job description. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified job description from the database. </remarks>
        public async Task<Response> DeleteJobDescriptionAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteJobDescriptionRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a job description. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks> Deletes the specified job description from the database. </remarks>
        public Response DeleteJobDescription(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteJobDescriptionRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateJobDescriptionSearchRequest(JobDescriptionSearchParameters body, int? offset, int? limit)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/job_description_search", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Search through parsed job descriptions. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Searches through parsed job descriptions. You can search with custom criterias or a resume. </remarks>
        public async Task<Response<JobDescriptionSearch>> CreateJobDescriptionSearchAsync(JobDescriptionSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateJobDescriptionSearchRequest(body, offset, limit);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        JobDescriptionSearch value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescriptionSearch.DeserializeJobDescriptionSearch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Search through parsed job descriptions. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Searches through parsed job descriptions. You can search with custom criterias or a resume. </remarks>
        public Response<JobDescriptionSearch> CreateJobDescriptionSearch(JobDescriptionSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateJobDescriptionSearchRequest(body, offset, limit);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        JobDescriptionSearch value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescriptionSearch.DeserializeJobDescriptionSearch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetJobDescriptionSearchDetailRequest(string identifier, JobDescriptionSearchParameters body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/job_description_search/details/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Get search result of specific job description. </summary>
        /// <param name="identifier"> Job Description identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this job description.
        /// The `identifier` is the unique ID returned via the [/job_description_search](#post-/job_description_search) endpoint.
        /// </remarks>
        public async Task<Response<JobDescriptionSearchDetail>> GetJobDescriptionSearchDetailAsync(string identifier, JobDescriptionSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetJobDescriptionSearchDetailRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchDetail value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescriptionSearchDetail.DeserializeJobDescriptionSearchDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get search result of specific job description. </summary>
        /// <param name="identifier"> Job Description identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this job description.
        /// The `identifier` is the unique ID returned via the [/job_description_search](#post-/job_description_search) endpoint.
        /// </remarks>
        public Response<JobDescriptionSearchDetail> GetJobDescriptionSearchDetail(string identifier, JobDescriptionSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetJobDescriptionSearchDetailRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchDetail value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescriptionSearchDetail.DeserializeJobDescriptionSearchDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetJobDescriptionSearchConfigRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/job_description_search/config", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public async Task<Response<JobDescriptionSearchConfig>> GetJobDescriptionSearchConfigAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetJobDescriptionSearchConfigRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchConfig value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescriptionSearchConfig.DeserializeJobDescriptionSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public Response<JobDescriptionSearchConfig> GetJobDescriptionSearchConfig(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetJobDescriptionSearchConfigRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchConfig value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescriptionSearchConfig.DeserializeJobDescriptionSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateJobDescriptionSearchConfigRequest(JobDescriptionSearchConfig body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/job_description_search/config", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="body"> The JobDescriptionSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public async Task<Response<JobDescriptionSearchConfig>> UpdateJobDescriptionSearchConfigAsync(JobDescriptionSearchConfig body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateJobDescriptionSearchConfigRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchConfig value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescriptionSearchConfig.DeserializeJobDescriptionSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable job description search tool. </summary>
        /// <param name="body"> The JobDescriptionSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable job description search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public Response<JobDescriptionSearchConfig> UpdateJobDescriptionSearchConfig(JobDescriptionSearchConfig body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateJobDescriptionSearchConfigRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchConfig value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescriptionSearchConfig.DeserializeJobDescriptionSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateJobDescriptionSearchEmbedUrlRequest(Paths15O3Zn5V2JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/job_description_search/embed", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create a signed URL for the embeddable job description search tool. </summary>
        /// <param name="body"> The Paths15O3Zn5V2JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the job description search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable search tool. </remarks>
        public async Task<Response<JobDescriptionSearchEmbed>> CreateJobDescriptionSearchEmbedUrlAsync(Paths15O3Zn5V2JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateJobDescriptionSearchEmbedUrlRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchEmbed value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDescriptionSearchEmbed.DeserializeJobDescriptionSearchEmbed(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a signed URL for the embeddable job description search tool. </summary>
        /// <param name="body"> The Paths15O3Zn5V2JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the job description search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable search tool. </remarks>
        public Response<JobDescriptionSearchEmbed> CreateJobDescriptionSearchEmbedUrl(Paths15O3Zn5V2JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateJobDescriptionSearchEmbedUrlRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDescriptionSearchEmbed value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDescriptionSearchEmbed.DeserializeJobDescriptionSearchEmbed(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateResumeSearchRequest(ResumeSearchParameters body, int? offset, int? limit)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resume_search", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Search through parsed resumes. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Searches through parsed resumes. Users have 3 options to create a search:&lt;br /&gt;&lt;br /&gt; 1.	Match to a job description - a parsed job description is used to find candidates that suit it&lt;br /&gt; 2.	Match to a resume - a parsed resume is used to find other candidates that have similar attributes&lt;br /&gt; 3.	Search using custom criteria&lt;br /&gt;&lt;br /&gt; Users should only populate 1 of jobDescription, resume or the custom criteria. </remarks>
        public async Task<Response<ResumeSearch>> CreateResumeSearchAsync(ResumeSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateResumeSearchRequest(body, offset, limit);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ResumeSearch value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearch.DeserializeResumeSearch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Search through parsed resumes. </summary>
        /// <param name="body"> Search parameters. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Searches through parsed resumes. Users have 3 options to create a search:&lt;br /&gt;&lt;br /&gt; 1.	Match to a job description - a parsed job description is used to find candidates that suit it&lt;br /&gt; 2.	Match to a resume - a parsed resume is used to find other candidates that have similar attributes&lt;br /&gt; 3.	Search using custom criteria&lt;br /&gt;&lt;br /&gt; Users should only populate 1 of jobDescription, resume or the custom criteria. </remarks>
        public Response<ResumeSearch> CreateResumeSearch(ResumeSearchParameters body, int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateResumeSearchRequest(body, offset, limit);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ResumeSearch value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearch.DeserializeResumeSearch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchDetailRequest(string identifier, ResumeSearchParameters body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resume_search/details/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Get search result of specific resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this resume.
        /// The `identifier` is the unique ID returned via the [/resume_search](#post-/resume_search) endpoint.
        /// </remarks>
        public async Task<Response<ResumeSearchDetail>> GetResumeSearchDetailAsync(string identifier, ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetResumeSearchDetailRequest(identifier, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchDetail value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchDetail.DeserializeResumeSearchDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get search result of specific resume. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="body"> Search parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="body"/> is null. </exception>
        /// <remarks>
        /// This contains more detailed information about the matching score of the search criteria, or which search criteria is missing in this resume.
        /// The `identifier` is the unique ID returned via the [/resume_search](#post-/resume_search) endpoint.
        /// </remarks>
        public Response<ResumeSearchDetail> GetResumeSearchDetail(string identifier, ResumeSearchParameters body, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetResumeSearchDetailRequest(identifier, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchDetail value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchDetail.DeserializeResumeSearchDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchMatchRequest(string resume, string jobDescription, string index, string searchExpression, float? jobTitlesWeight, float? yearsExperienceWeight, float? locationsWeight, float? languagesWeight, float? skillsWeight, float? educationWeight, float? searchExpressionWeight, float? socCodesWeight, float? managementLevelWeight)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resume_search/match", false);
            uri.AppendQuery("resume", resume, true);
            uri.AppendQuery("job_description", jobDescription, true);
            if (index != null)
            {
                uri.AppendQuery("index", index, true);
            }
            if (searchExpression != null)
            {
                uri.AppendQuery("search_expression", searchExpression, true);
            }
            if (jobTitlesWeight != null)
            {
                uri.AppendQuery("job_titles_weight", jobTitlesWeight.Value, true);
            }
            if (yearsExperienceWeight != null)
            {
                uri.AppendQuery("years_experience_weight", yearsExperienceWeight.Value, true);
            }
            if (locationsWeight != null)
            {
                uri.AppendQuery("locations_weight", locationsWeight.Value, true);
            }
            if (languagesWeight != null)
            {
                uri.AppendQuery("languages_weight", languagesWeight.Value, true);
            }
            if (skillsWeight != null)
            {
                uri.AppendQuery("skills_weight", skillsWeight.Value, true);
            }
            if (educationWeight != null)
            {
                uri.AppendQuery("education_weight", educationWeight.Value, true);
            }
            if (searchExpressionWeight != null)
            {
                uri.AppendQuery("search_expression_weight", searchExpressionWeight.Value, true);
            }
            if (socCodesWeight != null)
            {
                uri.AppendQuery("soc_codes_weight", socCodesWeight.Value, true);
            }
            if (managementLevelWeight != null)
            {
                uri.AppendQuery("management_level_weight", managementLevelWeight.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Match a single resume and job description. </summary>
        /// <param name="resume"> Identify the resume to match. </param>
        /// <param name="jobDescription"> Identify the job description to match. </param>
        /// <param name="index"> Optionally, specify an index to search in. If not specified, will search in all indexes. </param>
        /// <param name="searchExpression"> Add keywords to the search criteria. </param>
        /// <param name="jobTitlesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="yearsExperienceWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="locationsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="languagesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="skillsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="educationWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="searchExpressionWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="socCodesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="managementLevelWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resume"/> or <paramref name="jobDescription"/> is null. </exception>
        /// <remarks> Get the matching score between a resume and a job description. The score ranges between 0 and 1, with 0 being not a match at all, and 1 being perfect match.&lt;br/&gt; Note, this score will not directly match the score returned from POST [/resume_search/details/{identifier}](#post-/resume_search/details/-identifier-). </remarks>
        public async Task<Response<ResumeSearchMatch>> GetResumeSearchMatchAsync(string resume, string jobDescription, string index = null, string searchExpression = null, float? jobTitlesWeight = null, float? yearsExperienceWeight = null, float? locationsWeight = null, float? languagesWeight = null, float? skillsWeight = null, float? educationWeight = null, float? searchExpressionWeight = null, float? socCodesWeight = null, float? managementLevelWeight = null, CancellationToken cancellationToken = default)
        {
            if (resume == null)
            {
                throw new ArgumentNullException(nameof(resume));
            }
            if (jobDescription == null)
            {
                throw new ArgumentNullException(nameof(jobDescription));
            }

            using var message = CreateGetResumeSearchMatchRequest(resume, jobDescription, index, searchExpression, jobTitlesWeight, yearsExperienceWeight, locationsWeight, languagesWeight, skillsWeight, educationWeight, searchExpressionWeight, socCodesWeight, managementLevelWeight);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchMatch value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchMatch.DeserializeResumeSearchMatch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Match a single resume and job description. </summary>
        /// <param name="resume"> Identify the resume to match. </param>
        /// <param name="jobDescription"> Identify the job description to match. </param>
        /// <param name="index"> Optionally, specify an index to search in. If not specified, will search in all indexes. </param>
        /// <param name="searchExpression"> Add keywords to the search criteria. </param>
        /// <param name="jobTitlesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="yearsExperienceWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="locationsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="languagesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="skillsWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="educationWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="searchExpressionWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="socCodesWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="managementLevelWeight"> How important is this criteria to the matching score, range from 0 to 1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resume"/> or <paramref name="jobDescription"/> is null. </exception>
        /// <remarks> Get the matching score between a resume and a job description. The score ranges between 0 and 1, with 0 being not a match at all, and 1 being perfect match.&lt;br/&gt; Note, this score will not directly match the score returned from POST [/resume_search/details/{identifier}](#post-/resume_search/details/-identifier-). </remarks>
        public Response<ResumeSearchMatch> GetResumeSearchMatch(string resume, string jobDescription, string index = null, string searchExpression = null, float? jobTitlesWeight = null, float? yearsExperienceWeight = null, float? locationsWeight = null, float? languagesWeight = null, float? skillsWeight = null, float? educationWeight = null, float? searchExpressionWeight = null, float? socCodesWeight = null, float? managementLevelWeight = null, CancellationToken cancellationToken = default)
        {
            if (resume == null)
            {
                throw new ArgumentNullException(nameof(resume));
            }
            if (jobDescription == null)
            {
                throw new ArgumentNullException(nameof(jobDescription));
            }

            using var message = CreateGetResumeSearchMatchRequest(resume, jobDescription, index, searchExpression, jobTitlesWeight, yearsExperienceWeight, locationsWeight, languagesWeight, skillsWeight, educationWeight, searchExpressionWeight, socCodesWeight, managementLevelWeight);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchMatch value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchMatch.DeserializeResumeSearchMatch(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchConfigRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resume_search/config", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public async Task<Response<ResumeSearchConfig>> GetResumeSearchConfigAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetResumeSearchConfigRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchConfig value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchConfig.DeserializeResumeSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public Response<ResumeSearchConfig> GetResumeSearchConfig(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetResumeSearchConfigRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchConfig value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchConfig.DeserializeResumeSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateResumeSearchConfigRequest(ResumeSearchConfig body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resume_search/config", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="body"> The ResumeSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public async Task<Response<ResumeSearchConfig>> UpdateResumeSearchConfigAsync(ResumeSearchConfig body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResumeSearchConfigRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchConfig value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchConfig.DeserializeResumeSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the config for the logged in user&apos;s embeddable resume search tool. </summary>
        /// <param name="body"> The ResumeSearchConfig to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update configurations such as which fields can be displayed in the logged in user&apos;s embeddable resume search tool, what are their weights, what is the maximum number of results that can be returned, etc. </remarks>
        public Response<ResumeSearchConfig> UpdateResumeSearchConfig(ResumeSearchConfig body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResumeSearchConfigRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchConfig value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchConfig.DeserializeResumeSearchConfig(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateResumeSearchEmbedUrlRequest(Paths23Ubd8V2ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resume_search/embed", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create a signed URL for the embeddable resume search tool. </summary>
        /// <param name="body"> The Paths23Ubd8V2ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the resume search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable resume search tool. </remarks>
        public async Task<Response<ResumeSearchEmbed>> CreateResumeSearchEmbedUrlAsync(Paths23Ubd8V2ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeSearchEmbedUrlRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchEmbed value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResumeSearchEmbed.DeserializeResumeSearchEmbed(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a signed URL for the embeddable resume search tool. </summary>
        /// <param name="body"> The Paths23Ubd8V2ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create and return a signed URL of the resume search tool which then can be embedded on a web page. An optional parameter `config_override` can be passed to override the user-level configurations of the embeddable resume search tool. </remarks>
        public Response<ResumeSearchEmbed> CreateResumeSearchEmbedUrl(Paths23Ubd8V2ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeSearchEmbedUrlRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResumeSearchEmbed value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResumeSearchEmbed.DeserializeResumeSearchEmbed(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchSuggestionJobTitleRequest(IEnumerable<string> jobTitles)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resume_search/suggestion_job_title", false);
            foreach (var param in jobTitles)
            {
                uri.AppendQuery("job_titles", param, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get job title suggestions based on provided job title(s). </summary>
        /// <param name="jobTitles"> Job title to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobTitles"/> is null. </exception>
        /// <remarks> Provided one or more job titles, get related suggestions for your search. </remarks>
        public async Task<Response<IReadOnlyList<string>>> GetResumeSearchSuggestionJobTitleAsync(IEnumerable<string> jobTitles, CancellationToken cancellationToken = default)
        {
            if (jobTitles == null)
            {
                throw new ArgumentNullException(nameof(jobTitles));
            }

            using var message = CreateGetResumeSearchSuggestionJobTitleRequest(jobTitles);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<string> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<string> array = new List<string>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(item.GetString());
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get job title suggestions based on provided job title(s). </summary>
        /// <param name="jobTitles"> Job title to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobTitles"/> is null. </exception>
        /// <remarks> Provided one or more job titles, get related suggestions for your search. </remarks>
        public Response<IReadOnlyList<string>> GetResumeSearchSuggestionJobTitle(IEnumerable<string> jobTitles, CancellationToken cancellationToken = default)
        {
            if (jobTitles == null)
            {
                throw new ArgumentNullException(nameof(jobTitles));
            }

            using var message = CreateGetResumeSearchSuggestionJobTitleRequest(jobTitles);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<string> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<string> array = new List<string>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(item.GetString());
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeSearchSuggestionSkillRequest(IEnumerable<string> skills)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resume_search/suggestion_skill", false);
            foreach (var param in skills)
            {
                uri.AppendQuery("skills", param, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get skill suggestions based on provided skill(s). </summary>
        /// <param name="skills"> Skill to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="skills"/> is null. </exception>
        /// <remarks> Provided one or more skills, get related suggestions for your search. </remarks>
        public async Task<Response<IReadOnlyList<string>>> GetResumeSearchSuggestionSkillAsync(IEnumerable<string> skills, CancellationToken cancellationToken = default)
        {
            if (skills == null)
            {
                throw new ArgumentNullException(nameof(skills));
            }

            using var message = CreateGetResumeSearchSuggestionSkillRequest(skills);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<string> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<string> array = new List<string>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(item.GetString());
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get skill suggestions based on provided skill(s). </summary>
        /// <param name="skills"> Skill to query suggestions for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="skills"/> is null. </exception>
        /// <remarks> Provided one or more skills, get related suggestions for your search. </remarks>
        public Response<IReadOnlyList<string>> GetResumeSearchSuggestionSkill(IEnumerable<string> skills, CancellationToken cancellationToken = default)
        {
            if (skills == null)
            {
                throw new ArgumentNullException(nameof(skills));
            }

            using var message = CreateGetResumeSearchSuggestionSkillRequest(skills);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<string> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<string> array = new List<string>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(item.GetString());
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllIndexesRequest(int? offset, int? limit, Enum3? documentType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/index", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (documentType != null)
            {
                uri.AppendQuery("document_type", documentType.Value.ToString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all indexes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="documentType"> Filter indices by a document type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexes. </remarks>
        public async Task<Response<Paths18Iqsr4V2IndexGetResponses200ContentApplicationJsonSchema>> GetAllIndexesAsync(int? offset = null, int? limit = null, Enum3? documentType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllIndexesRequest(offset, limit, documentType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths18Iqsr4V2IndexGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths18Iqsr4V2IndexGetResponses200ContentApplicationJsonSchema.DeserializePaths18Iqsr4V2IndexGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all indexes. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="documentType"> Filter indices by a document type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns all the indexes. </remarks>
        public Response<Paths18Iqsr4V2IndexGetResponses200ContentApplicationJsonSchema> GetAllIndexes(int? offset = null, int? limit = null, Enum3? documentType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllIndexesRequest(offset, limit, documentType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths18Iqsr4V2IndexGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths18Iqsr4V2IndexGetResponses200ContentApplicationJsonSchema.DeserializePaths18Iqsr4V2IndexGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateIndexRequest(string name, string documentType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/index", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (name != null)
            {
                content.Add(new StringRequestContent(name), "name", null);
            }
            if (documentType != null)
            {
                content.Add(new StringRequestContent(documentType), "documentType", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Create a new index. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="documentType"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an index for the search tool. </remarks>
        public async Task<Response<Paths1Sikw07V2IndexPostResponses201ContentApplicationJsonSchema>> CreateIndexAsync(string name = null, string documentType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateIndexRequest(name, documentType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths1Sikw07V2IndexPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1Sikw07V2IndexPostResponses201ContentApplicationJsonSchema.DeserializePaths1Sikw07V2IndexPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a new index. </summary>
        /// <param name="name"> The String to use. </param>
        /// <param name="documentType"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create an index for the search tool. </remarks>
        public Response<Paths1Sikw07V2IndexPostResponses201ContentApplicationJsonSchema> CreateIndex(string name = null, string documentType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateIndexRequest(name, documentType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths1Sikw07V2IndexPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1Sikw07V2IndexPostResponses201ContentApplicationJsonSchema.DeserializePaths1Sikw07V2IndexPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteIndexRequest(string name)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/index/", false);
            uri.AppendPath(name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <remarks> Deletes the specified index from the database. </remarks>
        public async Task<Response> DeleteIndexAsync(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateDeleteIndexRequest(name);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <remarks> Deletes the specified index from the database. </remarks>
        public Response DeleteIndex(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateDeleteIndexRequest(name);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllIndexDocumentsRequest(string name)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/index/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/documents", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get indexed documents for a specific index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <remarks> Returns all the indexed documents for that index. </remarks>
        public async Task<Response<PathsAf7Nd4V2IndexNameDocumentsGetResponses200ContentApplicationJsonSchema>> GetAllIndexDocumentsAsync(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateGetAllIndexDocumentsRequest(name);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsAf7Nd4V2IndexNameDocumentsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsAf7Nd4V2IndexNameDocumentsGetResponses200ContentApplicationJsonSchema.DeserializePathsAf7Nd4V2IndexNameDocumentsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get indexed documents for a specific index. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <remarks> Returns all the indexed documents for that index. </remarks>
        public Response<PathsAf7Nd4V2IndexNameDocumentsGetResponses200ContentApplicationJsonSchema> GetAllIndexDocuments(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var message = CreateGetAllIndexDocumentsRequest(name);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsAf7Nd4V2IndexNameDocumentsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsAf7Nd4V2IndexNameDocumentsGetResponses200ContentApplicationJsonSchema.DeserializePathsAf7Nd4V2IndexNameDocumentsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateIndexDocumentRequest(string name, PathsYg099PV2IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/index/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/documents", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Index a new document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create an indexed document for the search tool. </remarks>
        public async Task<Response<Paths14R8PdgV2IndexNameDocumentsPostResponses201ContentApplicationJsonSchema>> CreateIndexDocumentAsync(string name, PathsYg099PV2IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateIndexDocumentRequest(name, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths14R8PdgV2IndexNameDocumentsPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths14R8PdgV2IndexNameDocumentsPostResponses201ContentApplicationJsonSchema.DeserializePaths14R8PdgV2IndexNameDocumentsPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Index a new document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="body"> Document to index. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="body"/> is null. </exception>
        /// <remarks> Create an indexed document for the search tool. </remarks>
        public Response<Paths14R8PdgV2IndexNameDocumentsPostResponses201ContentApplicationJsonSchema> CreateIndexDocument(string name, PathsYg099PV2IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema body, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateIndexDocumentRequest(name, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths14R8PdgV2IndexNameDocumentsPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths14R8PdgV2IndexNameDocumentsPostResponses201ContentApplicationJsonSchema.DeserializePaths14R8PdgV2IndexNameDocumentsPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteIndexDocumentRequest(string name, string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/index/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/documents/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an indexed document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="identifier"/> is null. </exception>
        /// <remarks> Delete the specified indexed document from the database. </remarks>
        public async Task<Response> DeleteIndexDocumentAsync(string name, string identifier, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteIndexDocumentRequest(name, identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete an indexed document. </summary>
        /// <param name="name"> Index name. </param>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="identifier"/> is null. </exception>
        /// <remarks> Delete the specified indexed document from the database. </remarks>
        public Response DeleteIndexDocument(string name, string identifier, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteIndexDocumentRequest(name, identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListOccupationGroupsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/occupation_groups", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List occupation groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the list of searchable occupation groups. </remarks>
        public async Task<Response<IReadOnlyList<OccupationGroup>>> ListOccupationGroupsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListOccupationGroupsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<OccupationGroup> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<OccupationGroup> array = new List<OccupationGroup>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(OccupationGroup.DeserializeOccupationGroup(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List occupation groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns the list of searchable occupation groups. </remarks>
        public Response<IReadOnlyList<OccupationGroup>> ListOccupationGroups(CancellationToken cancellationToken = default)
        {
            using var message = CreateListOccupationGroupsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<OccupationGroup> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<OccupationGroup> array = new List<OccupationGroup>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(OccupationGroup.DeserializeOccupationGroup(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllResthookSubscriptionsRequest(int? offset, int? limit)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resthook_subscriptions", false);
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get list of all resthook subscriptions. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your resthook subscriptions. </remarks>
        public async Task<Response<PathsMda0LlV2ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema>> GetAllResthookSubscriptionsAsync(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResthookSubscriptionsRequest(offset, limit);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsMda0LlV2ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsMda0LlV2ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema.DeserializePathsMda0LlV2ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of all resthook subscriptions. </summary>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        /// <param name="limit"> The numbers of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Returns your resthook subscriptions. </remarks>
        public Response<PathsMda0LlV2ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema> GetAllResthookSubscriptions(int? offset = null, int? limit = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResthookSubscriptionsRequest(offset, limit);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsMda0LlV2ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsMda0LlV2ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema.DeserializePathsMda0LlV2ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateResthookSubscriptionRequest(ResthookSubscriptionCreate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resthook_subscriptions", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Create a resthook subscriptions. </summary>
        /// <param name="body"> The ResthookSubscriptionCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<ResthookSubscription>> CreateResthookSubscriptionAsync(ResthookSubscriptionCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateResthookSubscriptionRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ResthookSubscription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a resthook subscriptions. </summary>
        /// <param name="body"> The ResthookSubscriptionCreate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<ResthookSubscription> CreateResthookSubscription(ResthookSubscriptionCreate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateResthookSubscriptionRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        ResthookSubscription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResthookSubscriptionRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resthook_subscriptions/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get specific resthook subscription. </summary>
        /// <param name="id"> Resthook subscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific resthook subscription. </remarks>
        public async Task<Response<ResthookSubscription>> GetResthookSubscriptionAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetResthookSubscriptionRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResthookSubscription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get specific resthook subscription. </summary>
        /// <param name="id"> Resthook subscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Return a specific resthook subscription. </remarks>
        public Response<ResthookSubscription> GetResthookSubscription(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetResthookSubscriptionRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResthookSubscription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateResthookSubscriptionRequest(int id, ResthookSubscriptionUpdate body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resthook_subscriptions/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="body"> ResthookSubscription data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of a resthook subscription. </remarks>
        public async Task<Response<ResthookSubscription>> UpdateResthookSubscriptionAsync(int id, ResthookSubscriptionUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResthookSubscriptionRequest(id, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResthookSubscription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="body"> ResthookSubscription data to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <remarks> Update data of a resthook subscription. </remarks>
        public Response<ResthookSubscription> UpdateResthookSubscription(int id, ResthookSubscriptionUpdate body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateResthookSubscriptionRequest(id, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResthookSubscription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResthookSubscription.DeserializeResthookSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteResthookSubscriptionRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region.Value.ToString(), true);
            uri.AppendRaw(".affinda.com", false);
            uri.AppendPath("/v2/resthook_subscriptions/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified resthook subscription from the database. </remarks>
        public async Task<Response> DeleteResthookSubscriptionAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteResthookSubscriptionRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a resthook subscription. </summary>
        /// <param name="id"> ResthookSubscription&apos;s ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Deletes the specified resthook subscription from the database. </remarks>
        public Response DeleteResthookSubscription(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteResthookSubscriptionRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
