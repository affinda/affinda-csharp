// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class UrlAnnotationParsed : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Url))
            {
                if (Url != null)
                {
                    writer.WritePropertyName("url");
                    writer.WriteStringValue(Url);
                }
                else
                {
                    writer.WriteNull("url");
                }
            }
            if (Optional.IsDefined(Domain))
            {
                if (Domain != null)
                {
                    writer.WritePropertyName("domain");
                    writer.WriteStringValue(Domain);
                }
                else
                {
                    writer.WriteNull("domain");
                }
            }
            writer.WriteEndObject();
        }

        internal static UrlAnnotationParsed DeserializeUrlAnnotationParsed(JsonElement element)
        {
            Optional<string> url = default;
            Optional<string> domain = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("url"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        url = null;
                        continue;
                    }
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("domain"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        domain = null;
                        continue;
                    }
                    domain = property.Value.GetString();
                    continue;
                }
            }
            return new UrlAnnotationParsed(url.Value, domain.Value);
        }
    }
}
