// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class CollectionField : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Label))
            {
                writer.WritePropertyName("label");
                writer.WriteStringValue(Label);
            }
            if (Optional.IsDefined(Mandatory))
            {
                writer.WritePropertyName("mandatory");
                writer.WriteBooleanValue(Mandatory.Value);
            }
            if (Optional.IsDefined(ShowDropdown))
            {
                writer.WritePropertyName("showDropdown");
                writer.WriteBooleanValue(ShowDropdown.Value);
            }
            if (Optional.IsDefined(DisplayEnumValue))
            {
                writer.WritePropertyName("displayEnumValue");
                writer.WriteBooleanValue(DisplayEnumValue.Value);
            }
            if (Optional.IsDefined(AutoValidationThreshold))
            {
                if (AutoValidationThreshold != null)
                {
                    writer.WritePropertyName("autoValidationThreshold");
                    writer.WriteNumberValue(AutoValidationThreshold.Value);
                }
                else
                {
                    writer.WriteNull("autoValidationThreshold");
                }
            }
            if (Optional.IsDefined(DataSource))
            {
                if (DataSource != null)
                {
                    writer.WritePropertyName("dataSource");
                    writer.WriteStringValue(DataSource);
                }
                else
                {
                    writer.WriteNull("dataSource");
                }
            }
            if (Optional.IsDefined(Mapping))
            {
                if (Mapping != null)
                {
                    writer.WritePropertyName("mapping");
                    writer.WriteStringValue(Mapping);
                }
                else
                {
                    writer.WriteNull("mapping");
                }
            }
            if (Optional.IsDefined(DisplayRawText))
            {
                if (DisplayRawText != null)
                {
                    writer.WritePropertyName("displayRawText");
                    writer.WriteStringValue(DisplayRawText);
                }
                else
                {
                    writer.WriteNull("displayRawText");
                }
            }
            writer.WriteEndObject();
        }

        internal static CollectionField DeserializeCollectionField(JsonElement element)
        {
            Optional<string> label = default;
            Optional<bool> mandatory = default;
            Optional<bool> showDropdown = default;
            Optional<bool> displayEnumValue = default;
            Optional<float?> autoValidationThreshold = default;
            Optional<string> dataSource = default;
            Optional<string> mapping = default;
            Optional<string> displayRawText = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("label"))
                {
                    label = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mandatory"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    mandatory = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("showDropdown"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    showDropdown = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("displayEnumValue"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    displayEnumValue = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("autoValidationThreshold"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        autoValidationThreshold = null;
                        continue;
                    }
                    autoValidationThreshold = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("dataSource"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dataSource = null;
                        continue;
                    }
                    dataSource = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mapping"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        mapping = null;
                        continue;
                    }
                    mapping = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayRawText"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        displayRawText = null;
                        continue;
                    }
                    displayRawText = property.Value.GetString();
                    continue;
                }
            }
            return new CollectionField(label.Value, Optional.ToNullable(mandatory), Optional.ToNullable(showDropdown), Optional.ToNullable(displayEnumValue), Optional.ToNullable(autoValidationThreshold), dataSource.Value, mapping.Value, displayRawText.Value);
        }
    }
}
