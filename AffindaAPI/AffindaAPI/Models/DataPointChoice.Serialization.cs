// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class DataPointChoice : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id");
            writer.WriteNumberValue(Id);
            writer.WritePropertyName("label");
            writer.WriteStringValue(Label);
            writer.WritePropertyName("value");
            writer.WriteStringValue(Value);
            if (Optional.IsCollectionDefined(Synonyms))
            {
                if (Synonyms != null)
                {
                    writer.WritePropertyName("synonyms");
                    writer.WriteStartArray();
                    foreach (var item in Synonyms)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("synonyms");
                }
            }
            if (Optional.IsDefined(Description))
            {
                if (Description != null)
                {
                    writer.WritePropertyName("description");
                    writer.WriteStringValue(Description);
                }
                else
                {
                    writer.WriteNull("description");
                }
            }
            writer.WriteEndObject();
        }

        internal static DataPointChoice DeserializeDataPointChoice(JsonElement element)
        {
            int id = default;
            string label = default;
            string value = default;
            Optional<IList<string>> synonyms = default;
            Optional<string> description = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("label"))
                {
                    label = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("synonyms"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        synonyms = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    synonyms = array;
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        description = null;
                        continue;
                    }
                    description = property.Value.GetString();
                    continue;
                }
            }
            return new DataPointChoice(id, label, value, Optional.ToList(synonyms), description.Value);
        }
    }
}
