// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Affinda.API.Models
{
    /// <summary> The DataPoint. </summary>
    public partial class DataPoint
    {
        /// <summary> Initializes a new instance of DataPoint. </summary>
        /// <param name="identifier"> Uniquely identify a data point. </param>
        /// <param name="name"></param>
        /// <param name="annotationContentType"></param>
        /// <param name="extractor"> Extractor&apos;s ID. </param>
        /// <param name="similarTo"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/>, <paramref name="name"/> or <paramref name="similarTo"/> is null. </exception>
        internal DataPoint(string identifier, string name, AnnotationContentType annotationContentType, int extractor, IEnumerable<string> similarTo)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (similarTo == null)
            {
                throw new ArgumentNullException(nameof(similarTo));
            }

            Identifier = identifier;
            Name = name;
            AnnotationContentType = annotationContentType;
            Extractor = extractor;
            SimilarTo = similarTo.ToList();
            Choices = new ChangeTrackingList<DataPointChoicesItem>();
            Children = new ChangeTrackingList<DataPoint>();
        }

        /// <summary> Initializes a new instance of DataPoint. </summary>
        /// <param name="identifier"> Uniquely identify a data point. </param>
        /// <param name="name"></param>
        /// <param name="slug"></param>
        /// <param name="description"></param>
        /// <param name="annotationContentType"></param>
        /// <param name="organization"></param>
        /// <param name="extractor"> Extractor&apos;s ID. </param>
        /// <param name="multiple"></param>
        /// <param name="noRect"></param>
        /// <param name="similarTo"></param>
        /// <param name="choices"></param>
        /// <param name="children"></param>
        internal DataPoint(string identifier, string name, string slug, string description, AnnotationContentType annotationContentType, Organization organization, int extractor, bool? multiple, bool? noRect, IReadOnlyList<string> similarTo, IReadOnlyList<DataPointChoicesItem> choices, IReadOnlyList<DataPoint> children)
        {
            Identifier = identifier;
            Name = name;
            Slug = slug;
            Description = description;
            AnnotationContentType = annotationContentType;
            Organization = organization;
            Extractor = extractor;
            Multiple = multiple;
            NoRect = noRect;
            SimilarTo = similarTo;
            Choices = choices;
            Children = children;
        }

        /// <summary> Uniquely identify a data point. </summary>
        public string Identifier { get; }
        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the slug. </summary>
        public string Slug { get; }
        /// <summary> Gets the description. </summary>
        public string Description { get; }
        /// <summary> Gets the annotation content type. </summary>
        public AnnotationContentType AnnotationContentType { get; }
        /// <summary> Gets the organization. </summary>
        public Organization Organization { get; }
        /// <summary> Extractor&apos;s ID. </summary>
        public int Extractor { get; }
        /// <summary> Gets the multiple. </summary>
        public bool? Multiple { get; }
        /// <summary> Gets the no rect. </summary>
        public bool? NoRect { get; }
        /// <summary> Gets the similar to. </summary>
        public IReadOnlyList<string> SimilarTo { get; }
        /// <summary> Gets the choices. </summary>
        public IReadOnlyList<DataPointChoicesItem> Choices { get; }
        /// <summary> Gets the children. </summary>
        public IReadOnlyList<DataPoint> Children { get; }
    }
}
