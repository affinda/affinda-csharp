// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Affinda.API.Models
{
    /// <summary> The GetAllDocumentsResultsV2. </summary>
    public partial class GetAllDocumentsResultsV2
    {
        /// <summary> Initializes a new instance of GetAllDocumentsResultsV2. </summary>
        /// <param name="count"> Number of documents in result. </param>
        /// <param name="results"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="results"/> is null. </exception>
        internal GetAllDocumentsResultsV2(int count, IEnumerable<Meta> results)
        {
            if (results == null)
            {
                throw new ArgumentNullException(nameof(results));
            }

            Count = count;
            Results = results.ToList();
        }

        /// <summary> Initializes a new instance of GetAllDocumentsResultsV2. </summary>
        /// <param name="count"> Number of documents in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        internal GetAllDocumentsResultsV2(int count, string next, string previous, IReadOnlyList<Meta> results)
        {
            Count = count;
            Next = next;
            Previous = previous;
            Results = results;
        }

        /// <summary> Number of documents in result. </summary>
        public int Count { get; }
        /// <summary> URL to request next page of results. </summary>
        public string Next { get; }
        /// <summary> URL to request previous page of results. </summary>
        public string Previous { get; }
        /// <summary> Gets the results. </summary>
        public IReadOnlyList<Meta> Results { get; }
    }
}
