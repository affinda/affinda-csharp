// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class ExpectedRemunerationAnnotationV2UpdateParsed : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Minimum))
            {
                if (Minimum != null)
                {
                    writer.WritePropertyName("minimum");
                    writer.WriteNumberValue(Minimum.Value);
                }
                else
                {
                    writer.WriteNull("minimum");
                }
            }
            if (Optional.IsDefined(Maximum))
            {
                if (Maximum != null)
                {
                    writer.WritePropertyName("maximum");
                    writer.WriteNumberValue(Maximum.Value);
                }
                else
                {
                    writer.WriteNull("maximum");
                }
            }
            if (Optional.IsDefined(Currency))
            {
                if (Currency != null)
                {
                    writer.WritePropertyName("currency");
                    writer.WriteStringValue(Currency);
                }
                else
                {
                    writer.WriteNull("currency");
                }
            }
            if (Optional.IsDefined(Unit))
            {
                if (Unit != null)
                {
                    writer.WritePropertyName("unit");
                    writer.WriteStringValue(Unit);
                }
                else
                {
                    writer.WriteNull("unit");
                }
            }
            writer.WriteEndObject();
        }

        internal static ExpectedRemunerationAnnotationV2UpdateParsed DeserializeExpectedRemunerationAnnotationV2UpdateParsed(JsonElement element)
        {
            Optional<float?> minimum = default;
            Optional<float?> maximum = default;
            Optional<string> currency = default;
            Optional<string> unit = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("minimum"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        minimum = null;
                        continue;
                    }
                    minimum = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("maximum"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maximum = null;
                        continue;
                    }
                    maximum = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("currency"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        currency = null;
                        continue;
                    }
                    currency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unit"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        unit = null;
                        continue;
                    }
                    unit = property.Value.GetString();
                    continue;
                }
            }
            return new ExpectedRemunerationAnnotationV2UpdateParsed(Optional.ToNullable(minimum), Optional.ToNullable(maximum), currency.Value, unit.Value);
        }
    }
}
