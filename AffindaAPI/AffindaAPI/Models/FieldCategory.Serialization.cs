// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class FieldCategory : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("label");
            writer.WriteStringValue(Label);
            writer.WritePropertyName("enabledFields");
            writer.WriteStartArray();
            foreach (var item in EnabledFields)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("disabledFields");
            writer.WriteStartArray();
            foreach (var item in DisabledFields)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static FieldCategory DeserializeFieldCategory(JsonElement element)
        {
            string label = default;
            IList<Field> enabledFields = default;
            IList<Field> disabledFields = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("label"))
                {
                    label = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enabledFields"))
                {
                    List<Field> array = new List<Field>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Field.DeserializeField(item));
                    }
                    enabledFields = array;
                    continue;
                }
                if (property.NameEquals("disabledFields"))
                {
                    List<Field> array = new List<Field>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Field.DeserializeField(item));
                    }
                    disabledFields = array;
                    continue;
                }
            }
            return new FieldCategory(label, enabledFields, disabledFields);
        }
    }
}
