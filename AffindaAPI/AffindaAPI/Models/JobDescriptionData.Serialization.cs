// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class JobDescriptionData
    {
        internal static JobDescriptionData DeserializeJobDescriptionData(JsonElement element)
        {
            Optional<Annotation> contactEmail = default;
            Optional<Annotation> contactName = default;
            Optional<Annotation> contactPhone = default;
            Optional<DateAnnotation> startDate = default;
            Optional<DateAnnotation> endDate = default;
            Optional<Annotation> jobType = default;
            Optional<IReadOnlyList<LanguageAnnotation>> languages = default;
            Optional<IReadOnlyList<SkillAnnotation>> skills = default;
            Optional<Annotation> organizationName = default;
            Optional<Annotation> organizationWebsite = default;
            Optional<Annotation> educationLevel = default;
            Optional<Annotation> educationAccreditation = default;
            Optional<ExpectedRemunerationAnnotation> expectedRemuneration = default;
            Optional<LocationAnnotation> location = default;
            Optional<IReadOnlyList<Annotation>> certifications = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("contactEmail"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        contactEmail = null;
                        continue;
                    }
                    contactEmail = Annotation.DeserializeAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("contactName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        contactName = null;
                        continue;
                    }
                    contactName = Annotation.DeserializeAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("contactPhone"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        contactPhone = null;
                        continue;
                    }
                    contactPhone = Annotation.DeserializeAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("startDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startDate = DateAnnotation.DeserializeDateAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("endDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endDate = DateAnnotation.DeserializeDateAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("jobType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        jobType = null;
                        continue;
                    }
                    jobType = Annotation.DeserializeAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("languages"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LanguageAnnotation> array = new List<LanguageAnnotation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LanguageAnnotation.DeserializeLanguageAnnotation(item));
                    }
                    languages = array;
                    continue;
                }
                if (property.NameEquals("skills"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<SkillAnnotation> array = new List<SkillAnnotation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SkillAnnotation.DeserializeSkillAnnotation(item));
                    }
                    skills = array;
                    continue;
                }
                if (property.NameEquals("organizationName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        organizationName = null;
                        continue;
                    }
                    organizationName = Annotation.DeserializeAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("organizationWebsite"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        organizationWebsite = null;
                        continue;
                    }
                    organizationWebsite = Annotation.DeserializeAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("educationLevel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        educationLevel = null;
                        continue;
                    }
                    educationLevel = Annotation.DeserializeAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("educationAccreditation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        educationAccreditation = null;
                        continue;
                    }
                    educationAccreditation = Annotation.DeserializeAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("expectedRemuneration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    expectedRemuneration = ExpectedRemunerationAnnotation.DeserializeExpectedRemunerationAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    location = LocationAnnotation.DeserializeLocationAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("certifications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Annotation> array = new List<Annotation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(Annotation.DeserializeAnnotation(item));
                        }
                    }
                    certifications = array;
                    continue;
                }
            }
            return new JobDescriptionData(contactEmail.Value, contactName.Value, contactPhone.Value, startDate.Value, endDate.Value, jobType.Value, Optional.ToList(languages), Optional.ToList(skills), organizationName.Value, organizationWebsite.Value, educationLevel.Value, educationAccreditation.Value, expectedRemuneration.Value, location.Value, Optional.ToList(certifications));
        }
    }
}
