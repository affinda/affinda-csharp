// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Affinda.API.Models
{
    /// <summary> Visibility &quot;organization&quot; means everyone in the organization can access the workspace. Visibility &quot;private&quot; means only people explicitly added can access the workspace. </summary>
    public readonly partial struct WorkspaceVisibility : IEquatable<WorkspaceVisibility>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkspaceVisibility"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkspaceVisibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OrganizationValue = "organization";
        private const string PrivateValue = "private";

        /// <summary> organization. </summary>
        public static WorkspaceVisibility Organization { get; } = new WorkspaceVisibility(OrganizationValue);
        /// <summary> private. </summary>
        public static WorkspaceVisibility Private { get; } = new WorkspaceVisibility(PrivateValue);
        /// <summary> Determines if two <see cref="WorkspaceVisibility"/> values are the same. </summary>
        public static bool operator ==(WorkspaceVisibility left, WorkspaceVisibility right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkspaceVisibility"/> values are not the same. </summary>
        public static bool operator !=(WorkspaceVisibility left, WorkspaceVisibility right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WorkspaceVisibility"/>. </summary>
        public static implicit operator WorkspaceVisibility(string value) => new WorkspaceVisibility(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkspaceVisibility other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkspaceVisibility other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
