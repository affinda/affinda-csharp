// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class ResumeSearchParameters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("indices");
            writer.WriteStartArray();
            foreach (var item in Indices)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(JobDescription))
            {
                if (JobDescription != null)
                {
                    writer.WritePropertyName("jobDescription");
                    writer.WriteStringValue(JobDescription);
                }
                else
                {
                    writer.WriteNull("jobDescription");
                }
            }
            if (Optional.IsDefined(Resume))
            {
                if (Resume != null)
                {
                    writer.WritePropertyName("resume");
                    writer.WriteStringValue(Resume);
                }
                else
                {
                    writer.WriteNull("resume");
                }
            }
            if (Optional.IsCollectionDefined(JobTitles))
            {
                writer.WritePropertyName("jobTitles");
                writer.WriteStartArray();
                foreach (var item in JobTitles)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(JobTitlesCurrentOnly))
            {
                writer.WritePropertyName("jobTitlesCurrentOnly");
                writer.WriteBooleanValue(JobTitlesCurrentOnly.Value);
            }
            if (Optional.IsDefined(JobTitlesRequired))
            {
                writer.WritePropertyName("jobTitlesRequired");
                writer.WriteBooleanValue(JobTitlesRequired.Value);
            }
            if (Optional.IsDefined(JobTitlesWeight))
            {
                writer.WritePropertyName("jobTitlesWeight");
                writer.WriteNumberValue(JobTitlesWeight.Value);
            }
            if (Optional.IsDefined(YearsExperienceMin))
            {
                if (YearsExperienceMin != null)
                {
                    writer.WritePropertyName("yearsExperienceMin");
                    writer.WriteNumberValue(YearsExperienceMin.Value);
                }
                else
                {
                    writer.WriteNull("yearsExperienceMin");
                }
            }
            if (Optional.IsDefined(YearsExperienceMax))
            {
                if (YearsExperienceMax != null)
                {
                    writer.WritePropertyName("yearsExperienceMax");
                    writer.WriteNumberValue(YearsExperienceMax.Value);
                }
                else
                {
                    writer.WriteNull("yearsExperienceMax");
                }
            }
            if (Optional.IsDefined(YearsExperienceRequired))
            {
                writer.WritePropertyName("yearsExperienceRequired");
                writer.WriteBooleanValue(YearsExperienceRequired.Value);
            }
            if (Optional.IsDefined(YearsExperienceWeight))
            {
                writer.WritePropertyName("yearsExperienceWeight");
                writer.WriteNumberValue(YearsExperienceWeight.Value);
            }
            if (Optional.IsCollectionDefined(Locations))
            {
                writer.WritePropertyName("locations");
                writer.WriteStartArray();
                foreach (var item in Locations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LocationsWeight))
            {
                writer.WritePropertyName("locationsWeight");
                writer.WriteNumberValue(LocationsWeight.Value);
            }
            if (Optional.IsDefined(LocationsRequired))
            {
                writer.WritePropertyName("locationsRequired");
                writer.WriteBooleanValue(LocationsRequired.Value);
            }
            if (Optional.IsCollectionDefined(Skills))
            {
                writer.WritePropertyName("skills");
                writer.WriteStartArray();
                foreach (var item in Skills)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SkillsWeight))
            {
                writer.WritePropertyName("skillsWeight");
                writer.WriteNumberValue(SkillsWeight.Value);
            }
            if (Optional.IsCollectionDefined(Languages))
            {
                writer.WritePropertyName("languages");
                writer.WriteStartArray();
                foreach (var item in Languages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LanguagesWeight))
            {
                writer.WritePropertyName("languagesWeight");
                writer.WriteNumberValue(LanguagesWeight.Value);
            }
            if (Optional.IsCollectionDefined(Institutions))
            {
                writer.WritePropertyName("institutions");
                writer.WriteStartArray();
                foreach (var item in Institutions)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(InstitutionsRequired))
            {
                writer.WritePropertyName("institutionsRequired");
                writer.WriteBooleanValue(InstitutionsRequired.Value);
            }
            if (Optional.IsCollectionDefined(Degrees))
            {
                writer.WritePropertyName("degrees");
                writer.WriteStartArray();
                foreach (var item in Degrees)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DegreesRequired))
            {
                writer.WritePropertyName("degreesRequired");
                writer.WriteBooleanValue(DegreesRequired.Value);
            }
            if (Optional.IsCollectionDefined(HighestDegreeTypes))
            {
                writer.WritePropertyName("highestDegreeTypes");
                writer.WriteStartArray();
                foreach (var item in HighestDegreeTypes)
                {
                    writer.WriteStringValue(item.Value.ToSerialString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(HighestDegreeTypesRequired))
            {
                writer.WritePropertyName("highestDegreeTypesRequired");
                writer.WriteBooleanValue(HighestDegreeTypesRequired.Value);
            }
            if (Optional.IsDefined(IsCurrentStudent))
            {
                writer.WritePropertyName("isCurrentStudent");
                writer.WriteBooleanValue(IsCurrentStudent.Value);
            }
            if (Optional.IsDefined(IsCurrentStudentRequired))
            {
                writer.WritePropertyName("isCurrentStudentRequired");
                writer.WriteBooleanValue(IsCurrentStudentRequired.Value);
            }
            if (Optional.IsDefined(IsRecentGraduate))
            {
                writer.WritePropertyName("isRecentGraduate");
                writer.WriteBooleanValue(IsRecentGraduate.Value);
            }
            if (Optional.IsDefined(IsRecentGraduateRequired))
            {
                writer.WritePropertyName("isRecentGraduateRequired");
                writer.WriteBooleanValue(IsRecentGraduateRequired.Value);
            }
            if (Optional.IsDefined(IsTopStudent))
            {
                writer.WritePropertyName("isTopStudent");
                writer.WriteBooleanValue(IsTopStudent.Value);
            }
            if (Optional.IsDefined(IsTopStudentRequired))
            {
                writer.WritePropertyName("isTopStudentRequired");
                writer.WriteBooleanValue(IsTopStudentRequired.Value);
            }
            if (Optional.IsDefined(EducationWeight))
            {
                writer.WritePropertyName("educationWeight");
                writer.WriteNumberValue(EducationWeight.Value);
            }
            if (Optional.IsDefined(SearchExpression))
            {
                if (SearchExpression != null)
                {
                    writer.WritePropertyName("searchExpression");
                    writer.WriteStringValue(SearchExpression);
                }
                else
                {
                    writer.WriteNull("searchExpression");
                }
            }
            if (Optional.IsDefined(SearchExpressionRequired))
            {
                writer.WritePropertyName("searchExpressionRequired");
                writer.WriteBooleanValue(SearchExpressionRequired.Value);
            }
            if (Optional.IsDefined(SearchExpressionWeight))
            {
                writer.WritePropertyName("searchExpressionWeight");
                writer.WriteNumberValue(SearchExpressionWeight.Value);
            }
            if (Optional.IsCollectionDefined(SocCodes))
            {
                writer.WritePropertyName("socCodes");
                writer.WriteStartArray();
                foreach (var item in SocCodes)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SocCodesWeight))
            {
                writer.WritePropertyName("socCodesWeight");
                writer.WriteNumberValue(SocCodesWeight.Value);
            }
            if (Optional.IsDefined(SocCodesRequired))
            {
                writer.WritePropertyName("socCodesRequired");
                writer.WriteBooleanValue(SocCodesRequired.Value);
            }
            if (Optional.IsDefined(ManagementLevel))
            {
                if (ManagementLevel != null)
                {
                    writer.WritePropertyName("managementLevel");
                    writer.WriteStringValue(ManagementLevel.Value.ToSerialString());
                }
                else
                {
                    writer.WriteNull("managementLevel");
                }
            }
            if (Optional.IsDefined(ManagementLevelRequired))
            {
                writer.WritePropertyName("managementLevelRequired");
                writer.WriteBooleanValue(ManagementLevelRequired.Value);
            }
            if (Optional.IsDefined(ManagementLevelWeight))
            {
                writer.WritePropertyName("managementLevelWeight");
                writer.WriteNumberValue(ManagementLevelWeight.Value);
            }
            writer.WriteEndObject();
        }

        internal static ResumeSearchParameters DeserializeResumeSearchParameters(JsonElement element)
        {
            IList<string> indices = default;
            Optional<string> jobDescription = default;
            Optional<string> resume = default;
            Optional<IList<string>> jobTitles = default;
            Optional<bool> jobTitlesCurrentOnly = default;
            Optional<bool> jobTitlesRequired = default;
            Optional<float> jobTitlesWeight = default;
            Optional<int?> yearsExperienceMin = default;
            Optional<int?> yearsExperienceMax = default;
            Optional<bool> yearsExperienceRequired = default;
            Optional<float> yearsExperienceWeight = default;
            Optional<IList<ResumeSearchParametersLocation>> locations = default;
            Optional<float> locationsWeight = default;
            Optional<bool> locationsRequired = default;
            Optional<IList<ResumeSearchParametersSkill>> skills = default;
            Optional<float> skillsWeight = default;
            Optional<IList<ResumeSearchParametersSkill>> languages = default;
            Optional<float> languagesWeight = default;
            Optional<IList<string>> institutions = default;
            Optional<bool> institutionsRequired = default;
            Optional<IList<string>> degrees = default;
            Optional<bool> degreesRequired = default;
            Optional<IList<EducationLevel?>> highestDegreeTypes = default;
            Optional<bool> highestDegreeTypesRequired = default;
            Optional<bool> isCurrentStudent = default;
            Optional<bool> isCurrentStudentRequired = default;
            Optional<bool> isRecentGraduate = default;
            Optional<bool> isRecentGraduateRequired = default;
            Optional<bool> isTopStudent = default;
            Optional<bool> isTopStudentRequired = default;
            Optional<float> educationWeight = default;
            Optional<string> searchExpression = default;
            Optional<bool> searchExpressionRequired = default;
            Optional<float> searchExpressionWeight = default;
            Optional<IList<int>> socCodes = default;
            Optional<float> socCodesWeight = default;
            Optional<bool> socCodesRequired = default;
            Optional<ManagementLevel?> managementLevel = default;
            Optional<bool> managementLevelRequired = default;
            Optional<float> managementLevelWeight = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("indices"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    indices = array;
                    continue;
                }
                if (property.NameEquals("jobDescription"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        jobDescription = null;
                        continue;
                    }
                    jobDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resume"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        resume = null;
                        continue;
                    }
                    resume = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobTitles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    jobTitles = array;
                    continue;
                }
                if (property.NameEquals("jobTitlesCurrentOnly"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobTitlesCurrentOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("jobTitlesRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobTitlesRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("jobTitlesWeight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobTitlesWeight = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("yearsExperienceMin"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        yearsExperienceMin = null;
                        continue;
                    }
                    yearsExperienceMin = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("yearsExperienceMax"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        yearsExperienceMax = null;
                        continue;
                    }
                    yearsExperienceMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("yearsExperienceRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    yearsExperienceRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("yearsExperienceWeight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    yearsExperienceWeight = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("locations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResumeSearchParametersLocation> array = new List<ResumeSearchParametersLocation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResumeSearchParametersLocation.DeserializeResumeSearchParametersLocation(item));
                    }
                    locations = array;
                    continue;
                }
                if (property.NameEquals("locationsWeight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    locationsWeight = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("locationsRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    locationsRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("skills"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResumeSearchParametersSkill> array = new List<ResumeSearchParametersSkill>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResumeSearchParametersSkill.DeserializeResumeSearchParametersSkill(item));
                    }
                    skills = array;
                    continue;
                }
                if (property.NameEquals("skillsWeight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    skillsWeight = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("languages"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResumeSearchParametersSkill> array = new List<ResumeSearchParametersSkill>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResumeSearchParametersSkill.DeserializeResumeSearchParametersSkill(item));
                    }
                    languages = array;
                    continue;
                }
                if (property.NameEquals("languagesWeight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    languagesWeight = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("institutions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    institutions = array;
                    continue;
                }
                if (property.NameEquals("institutionsRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    institutionsRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("degrees"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    degrees = array;
                    continue;
                }
                if (property.NameEquals("degreesRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    degreesRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("highestDegreeTypes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<EducationLevel?> array = new List<EducationLevel?>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString().ToEducationLevel());
                        }
                    }
                    highestDegreeTypes = array;
                    continue;
                }
                if (property.NameEquals("highestDegreeTypesRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    highestDegreeTypesRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isCurrentStudent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isCurrentStudent = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isCurrentStudentRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isCurrentStudentRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isRecentGraduate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isRecentGraduate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isRecentGraduateRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isRecentGraduateRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isTopStudent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isTopStudent = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isTopStudentRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isTopStudentRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("educationWeight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    educationWeight = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("searchExpression"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        searchExpression = null;
                        continue;
                    }
                    searchExpression = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("searchExpressionRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    searchExpressionRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("searchExpressionWeight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    searchExpressionWeight = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("socCodes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    socCodes = array;
                    continue;
                }
                if (property.NameEquals("socCodesWeight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    socCodesWeight = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("socCodesRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    socCodesRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("managementLevel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        managementLevel = null;
                        continue;
                    }
                    managementLevel = property.Value.GetString().ToManagementLevel();
                    continue;
                }
                if (property.NameEquals("managementLevelRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    managementLevelRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("managementLevelWeight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    managementLevelWeight = property.Value.GetSingle();
                    continue;
                }
            }
            return new ResumeSearchParameters(indices, jobDescription.Value, resume.Value, Optional.ToList(jobTitles), Optional.ToNullable(jobTitlesCurrentOnly), Optional.ToNullable(jobTitlesRequired), Optional.ToNullable(jobTitlesWeight), Optional.ToNullable(yearsExperienceMin), Optional.ToNullable(yearsExperienceMax), Optional.ToNullable(yearsExperienceRequired), Optional.ToNullable(yearsExperienceWeight), Optional.ToList(locations), Optional.ToNullable(locationsWeight), Optional.ToNullable(locationsRequired), Optional.ToList(skills), Optional.ToNullable(skillsWeight), Optional.ToList(languages), Optional.ToNullable(languagesWeight), Optional.ToList(institutions), Optional.ToNullable(institutionsRequired), Optional.ToList(degrees), Optional.ToNullable(degreesRequired), Optional.ToList(highestDegreeTypes), Optional.ToNullable(highestDegreeTypesRequired), Optional.ToNullable(isCurrentStudent), Optional.ToNullable(isCurrentStudentRequired), Optional.ToNullable(isRecentGraduate), Optional.ToNullable(isRecentGraduateRequired), Optional.ToNullable(isTopStudent), Optional.ToNullable(isTopStudentRequired), Optional.ToNullable(educationWeight), searchExpression.Value, Optional.ToNullable(searchExpressionRequired), Optional.ToNullable(searchExpressionWeight), Optional.ToList(socCodes), Optional.ToNullable(socCodesWeight), Optional.ToNullable(socCodesRequired), Optional.ToNullable(managementLevel), Optional.ToNullable(managementLevelRequired), Optional.ToNullable(managementLevelWeight));
        }
    }
}
