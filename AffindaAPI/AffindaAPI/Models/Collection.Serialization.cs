// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class Collection
    {
        internal static Collection DeserializeCollection(JsonElement element)
        {
            string identifier = default;
            Optional<string> name = default;
            Optional<CollectionWorkspace> workspace = default;
            Optional<Extractor> extractor = default;
            Optional<float> autoValidationThreshold = default;
            Optional<IReadOnlyList<FieldGroup>> fields = default;
            Optional<bool> fieldsConfigured = default;
            Optional<CollectionDateFormatPreference?> dateFormatPreference = default;
            Optional<bool?> dateFormatFromDocument = default;
            Optional<IReadOnlyDictionary<string, object>> extractorConfig = default;
            Optional<int?> unvalidatedDocsCount = default;
            Optional<int?> confirmedDocsCount = default;
            Optional<string> ingestEmail = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identifier"))
                {
                    identifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("workspace"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    workspace = CollectionWorkspace.DeserializeCollectionWorkspace(property.Value);
                    continue;
                }
                if (property.NameEquals("extractor"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    extractor = Extractor.DeserializeExtractor(property.Value);
                    continue;
                }
                if (property.NameEquals("autoValidationThreshold"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    autoValidationThreshold = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("fields"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        fields = null;
                        continue;
                    }
                    List<FieldGroup> array = new List<FieldGroup>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FieldGroup.DeserializeFieldGroup(item));
                    }
                    fields = array;
                    continue;
                }
                if (property.NameEquals("fieldsConfigured"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fieldsConfigured = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("dateFormatPreference"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dateFormatPreference = null;
                        continue;
                    }
                    dateFormatPreference = new CollectionDateFormatPreference(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dateFormatFromDocument"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dateFormatFromDocument = null;
                        continue;
                    }
                    dateFormatFromDocument = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("extractorConfig"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        extractorConfig = null;
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    extractorConfig = dictionary;
                    continue;
                }
                if (property.NameEquals("unvalidatedDocsCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        unvalidatedDocsCount = null;
                        continue;
                    }
                    unvalidatedDocsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("confirmedDocsCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        confirmedDocsCount = null;
                        continue;
                    }
                    confirmedDocsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ingestEmail"))
                {
                    ingestEmail = property.Value.GetString();
                    continue;
                }
            }
            return new Collection(identifier, name.Value, workspace.Value, extractor.Value, Optional.ToNullable(autoValidationThreshold), Optional.ToList(fields), Optional.ToNullable(fieldsConfigured), Optional.ToNullable(dateFormatPreference), Optional.ToNullable(dateFormatFromDocument), Optional.ToDictionary(extractorConfig), Optional.ToNullable(unvalidatedDocsCount), Optional.ToNullable(confirmedDocsCount), ingestEmail.Value);
        }
    }
}
