// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Affinda.API.Models
{
    /// <summary> The DocumentState. </summary>
    public readonly partial struct DocumentState : IEquatable<DocumentState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DocumentState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UploadedValue = "uploaded";
        private const string ReviewValue = "review";
        private const string ValidatedValue = "validated";
        private const string ArchivedValue = "archived";
        private const string RejectedValue = "rejected";

        /// <summary> uploaded. </summary>
        public static DocumentState Uploaded { get; } = new DocumentState(UploadedValue);
        /// <summary> review. </summary>
        public static DocumentState Review { get; } = new DocumentState(ReviewValue);
        /// <summary> validated. </summary>
        public static DocumentState Validated { get; } = new DocumentState(ValidatedValue);
        /// <summary> archived. </summary>
        public static DocumentState Archived { get; } = new DocumentState(ArchivedValue);
        /// <summary> rejected. </summary>
        public static DocumentState Rejected { get; } = new DocumentState(RejectedValue);
        /// <summary> Determines if two <see cref="DocumentState"/> values are the same. </summary>
        public static bool operator ==(DocumentState left, DocumentState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DocumentState"/> values are not the same. </summary>
        public static bool operator !=(DocumentState left, DocumentState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DocumentState"/>. </summary>
        public static implicit operator DocumentState(string value) => new DocumentState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DocumentState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
