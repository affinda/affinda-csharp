// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Affinda.API.Models
{
    /// <summary> The Enum17. </summary>
    public readonly partial struct Enum17 : IEquatable<Enum17>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Enum17"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Enum17(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ResumesValue = "resumes";
        private const string JobDescriptionsValue = "job_descriptions";

        /// <summary> resumes. </summary>
        public static Enum17 Resumes { get; } = new Enum17(ResumesValue);
        /// <summary> job_descriptions. </summary>
        public static Enum17 JobDescriptions { get; } = new Enum17(JobDescriptionsValue);
        /// <summary> Determines if two <see cref="Enum17"/> values are the same. </summary>
        public static bool operator ==(Enum17 left, Enum17 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Enum17"/> values are not the same. </summary>
        public static bool operator !=(Enum17 left, Enum17 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Enum17"/>. </summary>
        public static implicit operator Enum17(string value) => new Enum17(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Enum17 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Enum17 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
