// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class InvoiceMeta
    {
        internal static InvoiceMeta DeserializeInvoiceMeta(JsonElement element)
        {
            Optional<string> clientVerifiedDt = default;
            Optional<string> reviewUrl = default;
            string identifier = default;
            Optional<string> fileName = default;
            bool ready = default;
            Optional<DateTimeOffset?> readyDt = default;
            bool failed = default;
            Optional<string> expiryTime = default;
            Optional<string> language = default;
            Optional<string> pdf = default;
            Optional<SplitRelation> parentDocument = default;
            Optional<IReadOnlyList<SplitRelation>> childDocuments = default;
            Optional<IReadOnlyList<PageMeta>> pages = default;
            IReadOnlyDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clientVerifiedDt"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        clientVerifiedDt = null;
                        continue;
                    }
                    clientVerifiedDt = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reviewUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        reviewUrl = null;
                        continue;
                    }
                    reviewUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("identifier"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        identifier = null;
                        continue;
                    }
                    identifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        fileName = null;
                        continue;
                    }
                    fileName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ready"))
                {
                    ready = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("readyDt"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        readyDt = null;
                        continue;
                    }
                    readyDt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("failed"))
                {
                    failed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("expiryTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        expiryTime = null;
                        continue;
                    }
                    expiryTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("language"))
                {
                    language = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pdf"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        pdf = null;
                        continue;
                    }
                    pdf = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parentDocument"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        parentDocument = null;
                        continue;
                    }
                    parentDocument = SplitRelation.DeserializeSplitRelation(property.Value);
                    continue;
                }
                if (property.NameEquals("childDocuments"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<SplitRelation> array = new List<SplitRelation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SplitRelation.DeserializeSplitRelation(item));
                    }
                    childDocuments = array;
                    continue;
                }
                if (property.NameEquals("pages"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PageMeta> array = new List<PageMeta>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PageMeta.DeserializePageMeta(item));
                    }
                    pages = array;
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new InvoiceMeta(identifier, fileName.Value, ready, Optional.ToNullable(readyDt), failed, expiryTime.Value, language.Value, pdf.Value, parentDocument.Value, Optional.ToList(childDocuments), Optional.ToList(pages), additionalProperties, clientVerifiedDt.Value, reviewUrl.Value);
        }
    }
}
