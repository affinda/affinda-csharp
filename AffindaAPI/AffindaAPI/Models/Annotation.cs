// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Affinda.API.Models
{
    /// <summary> The Annotation. </summary>
    public partial class Annotation
    {
        /// <summary> Initializes a new instance of Annotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"> x/y coordinates for the rectangular bounding box containing the data. </param>
        /// <param name="rectangles"></param>
        /// <param name="pageIndex"> The page number within the document, starting from 0. </param>
        /// <param name="raw"> Raw data extracted from the before any post-processing. </param>
        /// <param name="confidence"> The overall confidence that the model&apos;s prediction is correct. </param>
        /// <param name="classificationConfidence"> The model&apos;s confidence that the text has been classified correctly. </param>
        /// <param name="textExtractionConfidence"> If the document was submitted as an image, this is the confidence that the text in the image has been correctly read by the model. </param>
        /// <param name="isVerified"> Indicates whether the data has been validated, either by a human using our validation tool or through auto-validation rules. </param>
        /// <param name="isClientVerified"> Indicates whether the data has been validated by a human. </param>
        /// <param name="isAutoVerified"> Indicates whether the data has been auto-validated. </param>
        /// <param name="dataPoint"></param>
        /// <param name="contentType"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataPoint"/> or <paramref name="contentType"/> is null. </exception>
        public Annotation(int id, Rectangle rectangle, IEnumerable<Rectangle> rectangles, int? pageIndex, string raw, float? confidence, float? classificationConfidence, float? textExtractionConfidence, bool isVerified, bool isClientVerified, bool isAutoVerified, string dataPoint, string contentType)
        {
            if (dataPoint == null)
            {
                throw new ArgumentNullException(nameof(dataPoint));
            }
            if (contentType == null)
            {
                throw new ArgumentNullException(nameof(contentType));
            }

            Id = id;
            Rectangle = rectangle;
            Rectangles = rectangles?.ToList();
            PageIndex = pageIndex;
            Raw = raw;
            Confidence = confidence;
            ClassificationConfidence = classificationConfidence;
            TextExtractionConfidence = textExtractionConfidence;
            IsVerified = isVerified;
            IsClientVerified = isClientVerified;
            IsAutoVerified = isAutoVerified;
            DataPoint = dataPoint;
            ContentType = contentType;
            AdditionalProperties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Initializes a new instance of Annotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"> x/y coordinates for the rectangular bounding box containing the data. </param>
        /// <param name="rectangles"></param>
        /// <param name="pageIndex"> The page number within the document, starting from 0. </param>
        /// <param name="raw"> Raw data extracted from the before any post-processing. </param>
        /// <param name="confidence"> The overall confidence that the model&apos;s prediction is correct. </param>
        /// <param name="classificationConfidence"> The model&apos;s confidence that the text has been classified correctly. </param>
        /// <param name="textExtractionConfidence"> If the document was submitted as an image, this is the confidence that the text in the image has been correctly read by the model. </param>
        /// <param name="isVerified"> Indicates whether the data has been validated, either by a human using our validation tool or through auto-validation rules. </param>
        /// <param name="isClientVerified"> Indicates whether the data has been validated by a human. </param>
        /// <param name="isAutoVerified"> Indicates whether the data has been auto-validated. </param>
        /// <param name="dataPoint"></param>
        /// <param name="contentType"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        internal Annotation(int id, Rectangle rectangle, IList<Rectangle> rectangles, int? pageIndex, string raw, float? confidence, float? classificationConfidence, float? textExtractionConfidence, bool isVerified, bool isClientVerified, bool isAutoVerified, string dataPoint, string contentType, IDictionary<string, object> additionalProperties)
        {
            Id = id;
            Rectangle = rectangle;
            Rectangles = rectangles;
            PageIndex = pageIndex;
            Raw = raw;
            Confidence = confidence;
            ClassificationConfidence = classificationConfidence;
            TextExtractionConfidence = textExtractionConfidence;
            IsVerified = isVerified;
            IsClientVerified = isClientVerified;
            IsAutoVerified = isAutoVerified;
            DataPoint = dataPoint;
            ContentType = contentType;
            AdditionalProperties = additionalProperties;
        }

        /// <summary> Gets or sets the id. </summary>
        public int Id { get; set; }
        /// <summary> x/y coordinates for the rectangular bounding box containing the data. </summary>
        public Rectangle Rectangle { get; set; }
        /// <summary> Gets or sets the rectangles. </summary>
        public IList<Rectangle> Rectangles { get; set; }
        /// <summary> The page number within the document, starting from 0. </summary>
        public int? PageIndex { get; set; }
        /// <summary> Raw data extracted from the before any post-processing. </summary>
        public string Raw { get; set; }
        /// <summary> The overall confidence that the model&apos;s prediction is correct. </summary>
        public float? Confidence { get; set; }
        /// <summary> The model&apos;s confidence that the text has been classified correctly. </summary>
        public float? ClassificationConfidence { get; set; }
        /// <summary> If the document was submitted as an image, this is the confidence that the text in the image has been correctly read by the model. </summary>
        public float? TextExtractionConfidence { get; set; }
        /// <summary> Indicates whether the data has been validated, either by a human using our validation tool or through auto-validation rules. </summary>
        public bool IsVerified { get; set; }
        /// <summary> Indicates whether the data has been validated by a human. </summary>
        public bool IsClientVerified { get; set; }
        /// <summary> Indicates whether the data has been auto-validated. </summary>
        public bool IsAutoVerified { get; set; }
        /// <summary> Gets or sets the data point. </summary>
        public string DataPoint { get; set; }
        /// <summary> Gets or sets the content type. </summary>
        public string ContentType { get; set; }
        /// <summary> Additional Properties. </summary>
        public IDictionary<string, object> AdditionalProperties { get; }
    }
}
