// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Affinda.API.Models
{
    /// <summary> The Annotation. </summary>
    public partial class Annotation
    {
        /// <summary> Initializes a new instance of Annotation. </summary>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"> The overall confidence that the model&apos;s prediction is correct. </param>
        /// <param name="classificationConfidence"> The model&apos;s confidence that the text has been classified correctly. </param>
        /// <param name="textExtractionConfidence"> If the document was submitted as an image, this is the confidence that the text in the image has been correctly read by the model. </param>
        /// <param name="isVerified"></param>
        /// <param name="classification"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="classification"/> is null. </exception>
        internal Annotation(Rectangle rectangle, int? pageIndex, string raw, float? confidence, float? classificationConfidence, float? textExtractionConfidence, bool isVerified, string classification)
        {
            if (classification == null)
            {
                throw new ArgumentNullException(nameof(classification));
            }

            Rectangle = rectangle;
            Rectangles = new ChangeTrackingList<Rectangle>();
            PageIndex = pageIndex;
            Raw = raw;
            Confidence = confidence;
            ClassificationConfidence = classificationConfidence;
            TextExtractionConfidence = textExtractionConfidence;
            IsVerified = isVerified;
            Classification = classification;
            AdditionalProperties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Initializes a new instance of Annotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"></param>
        /// <param name="rectangles"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"> The overall confidence that the model&apos;s prediction is correct. </param>
        /// <param name="classificationConfidence"> The model&apos;s confidence that the text has been classified correctly. </param>
        /// <param name="textExtractionConfidence"> If the document was submitted as an image, this is the confidence that the text in the image has been correctly read by the model. </param>
        /// <param name="isVerified"></param>
        /// <param name="isClientVerified"></param>
        /// <param name="isAutoVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        internal Annotation(int? id, Rectangle rectangle, IReadOnlyList<Rectangle> rectangles, int? pageIndex, string raw, float? confidence, float? classificationConfidence, float? textExtractionConfidence, bool isVerified, bool? isClientVerified, bool? isAutoVerified, string classification, IReadOnlyDictionary<string, object> additionalProperties)
        {
            Id = id;
            Rectangle = rectangle;
            Rectangles = rectangles;
            PageIndex = pageIndex;
            Raw = raw;
            Confidence = confidence;
            ClassificationConfidence = classificationConfidence;
            TextExtractionConfidence = textExtractionConfidence;
            IsVerified = isVerified;
            IsClientVerified = isClientVerified;
            IsAutoVerified = isAutoVerified;
            Classification = classification;
            AdditionalProperties = additionalProperties;
        }

        /// <summary> Gets the id. </summary>
        public int? Id { get; }
        /// <summary> Gets the rectangle. </summary>
        public Rectangle Rectangle { get; }
        /// <summary> Gets the rectangles. </summary>
        public IReadOnlyList<Rectangle> Rectangles { get; }
        /// <summary> Gets the page index. </summary>
        public int? PageIndex { get; }
        /// <summary> Gets the raw. </summary>
        public string Raw { get; }
        /// <summary> The overall confidence that the model&apos;s prediction is correct. </summary>
        public float? Confidence { get; }
        /// <summary> The model&apos;s confidence that the text has been classified correctly. </summary>
        public float? ClassificationConfidence { get; }
        /// <summary> If the document was submitted as an image, this is the confidence that the text in the image has been correctly read by the model. </summary>
        public float? TextExtractionConfidence { get; }
        /// <summary> Gets the is verified. </summary>
        public bool IsVerified { get; }
        /// <summary> Gets the is client verified. </summary>
        public bool? IsClientVerified { get; }
        /// <summary> Gets the is auto verified. </summary>
        public bool? IsAutoVerified { get; }
        /// <summary> Gets the classification. </summary>
        public string Classification { get; }
        /// <summary> Additional Properties. </summary>
        public IReadOnlyDictionary<string, object> AdditionalProperties { get; }
    }
}
