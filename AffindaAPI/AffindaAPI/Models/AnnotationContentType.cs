// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Affinda.API.Models
{
    /// <summary> The different data types of annotations. </summary>
    public readonly partial struct AnnotationContentType : IEquatable<AnnotationContentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnnotationContentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnnotationContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TextValue = "text";
        private const string IntegerValue = "integer";
        private const string FloatValue = "float";
        private const string DecimalValue = "decimal";
        private const string DateValue = "date";
        private const string DatetimeValue = "datetime";
        private const string BooleanValue = "boolean";
        private const string EnumValue = "enum";
        private const string LocationValue = "location";
        private const string JsonValue = "json";
        private const string TableValue = "table";
        private const string CellValue = "cell";
        private const string ExpectedremunerationValue = "expectedremuneration";
        private const string JobtitleValue = "jobtitle";
        private const string LanguageValue = "language";
        private const string SkillValue = "skill";
        private const string YearsexperienceValue = "yearsexperience";
        private const string GroupValue = "group";
        private const string TableDeprecatedValue = "table_deprecated";

        /// <summary> text. </summary>
        public static AnnotationContentType Text { get; } = new AnnotationContentType(TextValue);
        /// <summary> integer. </summary>
        public static AnnotationContentType Integer { get; } = new AnnotationContentType(IntegerValue);
        /// <summary> float. </summary>
        public static AnnotationContentType Float { get; } = new AnnotationContentType(FloatValue);
        /// <summary> decimal. </summary>
        public static AnnotationContentType Decimal { get; } = new AnnotationContentType(DecimalValue);
        /// <summary> date. </summary>
        public static AnnotationContentType Date { get; } = new AnnotationContentType(DateValue);
        /// <summary> datetime. </summary>
        public static AnnotationContentType Datetime { get; } = new AnnotationContentType(DatetimeValue);
        /// <summary> boolean. </summary>
        public static AnnotationContentType Boolean { get; } = new AnnotationContentType(BooleanValue);
        /// <summary> enum. </summary>
        public static AnnotationContentType Enum { get; } = new AnnotationContentType(EnumValue);
        /// <summary> location. </summary>
        public static AnnotationContentType Location { get; } = new AnnotationContentType(LocationValue);
        /// <summary> json. </summary>
        public static AnnotationContentType Json { get; } = new AnnotationContentType(JsonValue);
        /// <summary> table. </summary>
        public static AnnotationContentType Table { get; } = new AnnotationContentType(TableValue);
        /// <summary> cell. </summary>
        public static AnnotationContentType Cell { get; } = new AnnotationContentType(CellValue);
        /// <summary> expectedremuneration. </summary>
        public static AnnotationContentType Expectedremuneration { get; } = new AnnotationContentType(ExpectedremunerationValue);
        /// <summary> jobtitle. </summary>
        public static AnnotationContentType Jobtitle { get; } = new AnnotationContentType(JobtitleValue);
        /// <summary> language. </summary>
        public static AnnotationContentType Language { get; } = new AnnotationContentType(LanguageValue);
        /// <summary> skill. </summary>
        public static AnnotationContentType Skill { get; } = new AnnotationContentType(SkillValue);
        /// <summary> yearsexperience. </summary>
        public static AnnotationContentType Yearsexperience { get; } = new AnnotationContentType(YearsexperienceValue);
        /// <summary> group. </summary>
        public static AnnotationContentType Group { get; } = new AnnotationContentType(GroupValue);
        /// <summary> table_deprecated. </summary>
        public static AnnotationContentType TableDeprecated { get; } = new AnnotationContentType(TableDeprecatedValue);
        /// <summary> Determines if two <see cref="AnnotationContentType"/> values are the same. </summary>
        public static bool operator ==(AnnotationContentType left, AnnotationContentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnnotationContentType"/> values are not the same. </summary>
        public static bool operator !=(AnnotationContentType left, AnnotationContentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AnnotationContentType"/>. </summary>
        public static implicit operator AnnotationContentType(string value) => new AnnotationContentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnnotationContentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnnotationContentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
