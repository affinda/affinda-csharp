// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Affinda.API.Models
{
    /// <summary> region - server parameter. </summary>
    public readonly partial struct Region : IEquatable<Region>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Region"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Region(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ApiValue = "api";
        private const string ApiEu1Value = "api.eu1";
        private const string ApiUs1Value = "api.us1";

        /// <summary> api. </summary>
        public static Region Api { get; } = new Region(ApiValue);
        /// <summary> api.eu1. </summary>
        public static Region ApiEu1 { get; } = new Region(ApiEu1Value);
        /// <summary> api.us1. </summary>
        public static Region ApiUs1 { get; } = new Region(ApiUs1Value);
        /// <summary> Determines if two <see cref="Region"/> values are the same. </summary>
        public static bool operator ==(Region left, Region right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Region"/> values are not the same. </summary>
        public static bool operator !=(Region left, Region right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Region"/>. </summary>
        public static implicit operator Region(string value) => new Region(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Region other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Region other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
