// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class DataPoint
    {
        internal static DataPoint DeserializeDataPoint(JsonElement element)
        {
            string identifier = default;
            string name = default;
            string slug = default;
            Optional<string> description = default;
            AnnotationContentType annotationContentType = default;
            Organization organization = default;
            string extractor = default;
            Optional<bool> multiple = default;
            Optional<bool> noRect = default;
            Optional<string> parent = default;
            Optional<IReadOnlyList<DataPoint>> children = default;
            Optional<IReadOnlyList<MappingDataSource>> availableDataSources = default;
            Optional<string> mappingDataSource = default;
            Optional<bool> manualEntry = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identifier"))
                {
                    identifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("slug"))
                {
                    slug = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        description = null;
                        continue;
                    }
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("annotationContentType"))
                {
                    annotationContentType = new AnnotationContentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("organization"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        organization = null;
                        continue;
                    }
                    organization = Organization.DeserializeOrganization(property.Value);
                    continue;
                }
                if (property.NameEquals("extractor"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        extractor = null;
                        continue;
                    }
                    extractor = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("multiple"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    multiple = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("noRect"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    noRect = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("parent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        parent = null;
                        continue;
                    }
                    parent = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("children"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DataPoint> array = new List<DataPoint>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeDataPoint(item));
                    }
                    children = array;
                    continue;
                }
                if (property.NameEquals("availableDataSources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MappingDataSource> array = new List<MappingDataSource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.MappingDataSource.DeserializeMappingDataSource(item));
                    }
                    availableDataSources = array;
                    continue;
                }
                if (property.NameEquals("mappingDataSource"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        mappingDataSource = null;
                        continue;
                    }
                    mappingDataSource = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("manualEntry"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    manualEntry = property.Value.GetBoolean();
                    continue;
                }
            }
            return new DataPoint(identifier, name, slug, description.Value, annotationContentType, organization, extractor, Optional.ToNullable(multiple), Optional.ToNullable(noRect), parent.Value, Optional.ToList(children), Optional.ToList(availableDataSources), mappingDataSource.Value, Optional.ToNullable(manualEntry));
        }
    }
}
