// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class ResumeData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                if (Name != null)
                {
                    writer.WritePropertyName("name");
                    writer.WriteObjectValue(Name);
                }
                else
                {
                    writer.WriteNull("name");
                }
            }
            if (Optional.IsCollectionDefined(PhoneNumbers))
            {
                writer.WritePropertyName("phoneNumbers");
                writer.WriteStartArray();
                foreach (var item in PhoneNumbers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PhoneNumberDetails))
            {
                writer.WritePropertyName("phoneNumberDetails");
                writer.WriteStartArray();
                foreach (var item in PhoneNumberDetails)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Websites))
            {
                writer.WritePropertyName("websites");
                writer.WriteStartArray();
                foreach (var item in Websites)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Emails))
            {
                writer.WritePropertyName("emails");
                writer.WriteStartArray();
                foreach (var item in Emails)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DateOfBirth))
            {
                if (DateOfBirth != null)
                {
                    writer.WritePropertyName("dateOfBirth");
                    writer.WriteStringValue(DateOfBirth);
                }
                else
                {
                    writer.WriteNull("dateOfBirth");
                }
            }
            if (Optional.IsDefined(Location))
            {
                if (Location != null)
                {
                    writer.WritePropertyName("location");
                    writer.WriteObjectValue(Location);
                }
                else
                {
                    writer.WriteNull("location");
                }
            }
            if (Optional.IsDefined(Objective))
            {
                if (Objective != null)
                {
                    writer.WritePropertyName("objective");
                    writer.WriteStringValue(Objective);
                }
                else
                {
                    writer.WriteNull("objective");
                }
            }
            if (Optional.IsCollectionDefined(Languages))
            {
                writer.WritePropertyName("languages");
                writer.WriteStartArray();
                foreach (var item in Languages)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Summary))
            {
                if (Summary != null)
                {
                    writer.WritePropertyName("summary");
                    writer.WriteStringValue(Summary);
                }
                else
                {
                    writer.WriteNull("summary");
                }
            }
            if (Optional.IsDefined(TotalYearsExperience))
            {
                if (TotalYearsExperience != null)
                {
                    writer.WritePropertyName("totalYearsExperience");
                    writer.WriteNumberValue(TotalYearsExperience.Value);
                }
                else
                {
                    writer.WriteNull("totalYearsExperience");
                }
            }
            if (Optional.IsCollectionDefined(Education))
            {
                writer.WritePropertyName("education");
                writer.WriteStartArray();
                foreach (var item in Education)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(WorkExperience))
            {
                writer.WritePropertyName("workExperience");
                writer.WriteStartArray();
                foreach (var item in WorkExperience)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Skills))
            {
                writer.WritePropertyName("skills");
                writer.WriteStartArray();
                foreach (var item in Skills)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Certifications))
            {
                writer.WritePropertyName("certifications");
                writer.WriteStartArray();
                foreach (var item in Certifications)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Publications))
            {
                writer.WritePropertyName("publications");
                writer.WriteStartArray();
                foreach (var item in Publications)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Referees))
            {
                writer.WritePropertyName("referees");
                writer.WriteStartArray();
                foreach (var item in Referees)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(RawText))
            {
                writer.WritePropertyName("rawText");
                writer.WriteStringValue(RawText);
            }
            if (Optional.IsDefined(RedactedText))
            {
                writer.WritePropertyName("redactedText");
                writer.WriteStringValue(RedactedText);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static ResumeData DeserializeResumeData(JsonElement element)
        {
            Optional<ResumeDataName> name = default;
            Optional<IList<string>> phoneNumbers = default;
            Optional<IList<ResumeDataPhoneNumberDetailsItem>> phoneNumberDetails = default;
            Optional<IList<string>> websites = default;
            Optional<IList<string>> emails = default;
            Optional<string> dateOfBirth = default;
            Optional<Location> location = default;
            Optional<string> objective = default;
            Optional<IList<ResumeDataLanguagesItem>> languages = default;
            Optional<IReadOnlyList<string>> languageCodes = default;
            Optional<string> summary = default;
            Optional<int?> totalYearsExperience = default;
            Optional<byte[]> headShot = default;
            Optional<IList<Education>> education = default;
            Optional<string> profession = default;
            Optional<string> linkedin = default;
            Optional<IList<ResumeDataWorkExperienceItem>> workExperience = default;
            Optional<IList<ResumeDataSkillsItem>> skills = default;
            Optional<IList<string>> certifications = default;
            Optional<IList<string>> publications = default;
            Optional<IList<ResumeDataRefereesItem>> referees = default;
            Optional<IReadOnlyList<ResumeDataSectionsItem>> sections = default;
            Optional<int?> isResumeProbability = default;
            Optional<string> rawText = default;
            Optional<string> redactedText = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        name = null;
                        continue;
                    }
                    name = ResumeDataName.DeserializeResumeDataName(property.Value);
                    continue;
                }
                if (property.NameEquals("phoneNumbers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    phoneNumbers = array;
                    continue;
                }
                if (property.NameEquals("phoneNumberDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResumeDataPhoneNumberDetailsItem> array = new List<ResumeDataPhoneNumberDetailsItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResumeDataPhoneNumberDetailsItem.DeserializeResumeDataPhoneNumberDetailsItem(item));
                    }
                    phoneNumberDetails = array;
                    continue;
                }
                if (property.NameEquals("websites"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    websites = array;
                    continue;
                }
                if (property.NameEquals("emails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    emails = array;
                    continue;
                }
                if (property.NameEquals("dateOfBirth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dateOfBirth = null;
                        continue;
                    }
                    dateOfBirth = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        location = null;
                        continue;
                    }
                    location = Location.DeserializeLocation(property.Value);
                    continue;
                }
                if (property.NameEquals("objective"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        objective = null;
                        continue;
                    }
                    objective = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("languages"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResumeDataLanguagesItem> array = new List<ResumeDataLanguagesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new ResumeDataLanguagesItem(item.GetString()));
                    }
                    languages = array;
                    continue;
                }
                if (property.NameEquals("languageCodes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    languageCodes = array;
                    continue;
                }
                if (property.NameEquals("summary"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        summary = null;
                        continue;
                    }
                    summary = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalYearsExperience"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        totalYearsExperience = null;
                        continue;
                    }
                    totalYearsExperience = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("headShot"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        headShot = null;
                        continue;
                    }
                    headShot = property.Value.GetBytesFromBase64("D");
                    continue;
                }
                if (property.NameEquals("education"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Education> array = new List<Education>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.Education.DeserializeEducation(item));
                    }
                    education = array;
                    continue;
                }
                if (property.NameEquals("profession"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        profession = null;
                        continue;
                    }
                    profession = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("linkedin"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        linkedin = null;
                        continue;
                    }
                    linkedin = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("workExperience"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResumeDataWorkExperienceItem> array = new List<ResumeDataWorkExperienceItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResumeDataWorkExperienceItem.DeserializeResumeDataWorkExperienceItem(item));
                    }
                    workExperience = array;
                    continue;
                }
                if (property.NameEquals("skills"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResumeDataSkillsItem> array = new List<ResumeDataSkillsItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResumeDataSkillsItem.DeserializeResumeDataSkillsItem(item));
                    }
                    skills = array;
                    continue;
                }
                if (property.NameEquals("certifications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    certifications = array;
                    continue;
                }
                if (property.NameEquals("publications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    publications = array;
                    continue;
                }
                if (property.NameEquals("referees"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResumeDataRefereesItem> array = new List<ResumeDataRefereesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResumeDataRefereesItem.DeserializeResumeDataRefereesItem(item));
                    }
                    referees = array;
                    continue;
                }
                if (property.NameEquals("sections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResumeDataSectionsItem> array = new List<ResumeDataSectionsItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResumeDataSectionsItem.DeserializeResumeDataSectionsItem(item));
                    }
                    sections = array;
                    continue;
                }
                if (property.NameEquals("isResumeProbability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isResumeProbability = null;
                        continue;
                    }
                    isResumeProbability = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("rawText"))
                {
                    rawText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("redactedText"))
                {
                    redactedText = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new ResumeData(name.Value, Optional.ToList(phoneNumbers), Optional.ToList(phoneNumberDetails), Optional.ToList(websites), Optional.ToList(emails), dateOfBirth.Value, location.Value, objective.Value, Optional.ToList(languages), Optional.ToList(languageCodes), summary.Value, Optional.ToNullable(totalYearsExperience), headShot.Value, Optional.ToList(education), profession.Value, linkedin.Value, Optional.ToList(workExperience), Optional.ToList(skills), Optional.ToList(certifications), Optional.ToList(publications), Optional.ToList(referees), Optional.ToList(sections), Optional.ToNullable(isResumeProbability), rawText.Value, redactedText.Value, additionalProperties);
        }
    }
}
