// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Affinda.API.Models
{
    /// <summary> Validation result arising from a ValidationRule. </summary>
    public partial class ValidationResult
    {
        /// <summary> Initializes a new instance of ValidationResult. </summary>
        /// <param name="id"> Validation Result&apos;s ID. </param>
        /// <param name="annotations"> List of annotation ids that were validated. </param>
        /// <param name="passed"> Whether the validation passed or not, null if the validation was not applicable. </param>
        /// <param name="ruleSlug"> The hot-dog case slug of the validation rule that was applied. </param>
        /// <param name="message"> Message explaining why the validation failed. </param>
        /// <param name="document"> Unique identifier for the document. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="annotations"/>, <paramref name="ruleSlug"/>, <paramref name="message"/> or <paramref name="document"/> is null. </exception>
        public ValidationResult(int id, IEnumerable<int> annotations, bool? passed, string ruleSlug, string message, string document)
        {
            if (annotations == null)
            {
                throw new ArgumentNullException(nameof(annotations));
            }
            if (ruleSlug == null)
            {
                throw new ArgumentNullException(nameof(ruleSlug));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }
            if (document == null)
            {
                throw new ArgumentNullException(nameof(document));
            }

            Id = id;
            Annotations = annotations.ToList();
            Passed = passed;
            RuleSlug = ruleSlug;
            Message = message;
            Document = document;
        }

        /// <summary> Initializes a new instance of ValidationResult. </summary>
        /// <param name="id"> Validation Result&apos;s ID. </param>
        /// <param name="annotations"> List of annotation ids that were validated. </param>
        /// <param name="passed"> Whether the validation passed or not, null if the validation was not applicable. </param>
        /// <param name="ruleSlug"> The hot-dog case slug of the validation rule that was applied. </param>
        /// <param name="message"> Message explaining why the validation failed. </param>
        /// <param name="document"> Unique identifier for the document. </param>
        internal ValidationResult(int id, IList<int> annotations, bool? passed, string ruleSlug, string message, string document)
        {
            Id = id;
            Annotations = annotations;
            Passed = passed;
            RuleSlug = ruleSlug;
            Message = message;
            Document = document;
        }

        /// <summary> Validation Result&apos;s ID. </summary>
        public int Id { get; set; }
        /// <summary> List of annotation ids that were validated. </summary>
        public IList<int> Annotations { get; }
        /// <summary> Whether the validation passed or not, null if the validation was not applicable. </summary>
        public bool? Passed { get; set; }
        /// <summary> The hot-dog case slug of the validation rule that was applied. </summary>
        public string RuleSlug { get; set; }
        /// <summary> Message explaining why the validation failed. </summary>
        public string Message { get; set; }
        /// <summary> Unique identifier for the document. </summary>
        public string Document { get; set; }
    }
}
