// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Affinda.API.Models
{
    /// <summary> The FieldCategory. </summary>
    public partial class FieldCategory
    {
        /// <summary> Initializes a new instance of FieldCategory. </summary>
        /// <param name="enabledFields"></param>
        /// <param name="disabledFields"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="enabledFields"/> or <paramref name="disabledFields"/> is null. </exception>
        internal FieldCategory(IEnumerable<Field> enabledFields, IEnumerable<Field> disabledFields)
        {
            if (enabledFields == null)
            {
                throw new ArgumentNullException(nameof(enabledFields));
            }
            if (disabledFields == null)
            {
                throw new ArgumentNullException(nameof(disabledFields));
            }

            EnabledFields = enabledFields.ToList();
            DisabledFields = disabledFields.ToList();
        }

        /// <summary> Initializes a new instance of FieldCategory. </summary>
        /// <param name="enabledFields"></param>
        /// <param name="disabledFields"></param>
        internal FieldCategory(IReadOnlyList<Field> enabledFields, IReadOnlyList<Field> disabledFields)
        {
            EnabledFields = enabledFields;
            DisabledFields = disabledFields;
        }

        /// <summary> Gets the enabled fields. </summary>
        public IReadOnlyList<Field> EnabledFields { get; }
        /// <summary> Gets the disabled fields. </summary>
        public IReadOnlyList<Field> DisabledFields { get; }
    }
}
