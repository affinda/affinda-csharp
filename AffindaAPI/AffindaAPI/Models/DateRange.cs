// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Affinda.API.Models
{
    /// <summary> The DateRange. </summary>
    public readonly partial struct DateRange : IEquatable<DateRange>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DateRange"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DateRange(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TodayValue = "today";
        private const string YesterdayValue = "yesterday";
        private const string WeekValue = "week";
        private const string MonthValue = "month";
        private const string YearValue = "year";

        /// <summary> today. </summary>
        public static DateRange Today { get; } = new DateRange(TodayValue);
        /// <summary> yesterday. </summary>
        public static DateRange Yesterday { get; } = new DateRange(YesterdayValue);
        /// <summary> week. </summary>
        public static DateRange Week { get; } = new DateRange(WeekValue);
        /// <summary> month. </summary>
        public static DateRange Month { get; } = new DateRange(MonthValue);
        /// <summary> year. </summary>
        public static DateRange Year { get; } = new DateRange(YearValue);
        /// <summary> Determines if two <see cref="DateRange"/> values are the same. </summary>
        public static bool operator ==(DateRange left, DateRange right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DateRange"/> values are not the same. </summary>
        public static bool operator !=(DateRange left, DateRange right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DateRange"/>. </summary>
        public static implicit operator DateRange(string value) => new DateRange(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DateRange other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DateRange other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
