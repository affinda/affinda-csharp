// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Affinda.API.Models
{
    /// <summary> The InvitationStatus. </summary>
    public readonly partial struct InvitationStatus : IEquatable<InvitationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InvitationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InvitationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "pending";
        private const string AcceptedValue = "accepted";
        private const string DeclinedValue = "declined";

        /// <summary> pending. </summary>
        public static InvitationStatus Pending { get; } = new InvitationStatus(PendingValue);
        /// <summary> accepted. </summary>
        public static InvitationStatus Accepted { get; } = new InvitationStatus(AcceptedValue);
        /// <summary> declined. </summary>
        public static InvitationStatus Declined { get; } = new InvitationStatus(DeclinedValue);
        /// <summary> Determines if two <see cref="InvitationStatus"/> values are the same. </summary>
        public static bool operator ==(InvitationStatus left, InvitationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InvitationStatus"/> values are not the same. </summary>
        public static bool operator !=(InvitationStatus left, InvitationStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="InvitationStatus"/>. </summary>
        public static implicit operator InvitationStatus(string value) => new InvitationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InvitationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InvitationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
