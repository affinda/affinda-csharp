// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class ResthookSubscription
    {
        internal static ResthookSubscription DeserializeResthookSubscription(JsonElement element)
        {
            Optional<int> id = default;
            Optional<ResthookEvent> @event = default;
            Optional<string> targetUrl = default;
            Optional<bool> active = default;
            Optional<bool> autoDeactivated = default;
            Optional<string> autoDeactivateReason = default;
            Optional<ResthookSubscriptionVersion> version = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    id = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("event"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @event = new ResthookEvent(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetUrl"))
                {
                    targetUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("active"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    active = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("autoDeactivated"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    autoDeactivated = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("autoDeactivateReason"))
                {
                    autoDeactivateReason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    version = new ResthookSubscriptionVersion(property.Value.GetString());
                    continue;
                }
            }
            return new ResthookSubscription(Optional.ToNullable(id), Optional.ToNullable(@event), targetUrl.Value, Optional.ToNullable(active), Optional.ToNullable(autoDeactivated), autoDeactivateReason.Value, Optional.ToNullable(version));
        }
    }
}
