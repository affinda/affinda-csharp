// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class ExpectedRemunerationAnnotation
    {
        internal static ExpectedRemunerationAnnotation DeserializeExpectedRemunerationAnnotation(JsonElement element)
        {
            Optional<ExpectedRemunerationAnnotationParsed> parsed = default;
            Rectangle rectangle = default;
            int? pageIndex = default;
            string raw = default;
            float confidence = default;
            bool isVerified = default;
            string classification = default;
            IReadOnlyDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("parsed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    parsed = ExpectedRemunerationAnnotationParsed.DeserializeExpectedRemunerationAnnotationParsed(property.Value);
                    continue;
                }
                if (property.NameEquals("rectangle"))
                {
                    rectangle = Rectangle.DeserializeRectangle(property.Value);
                    continue;
                }
                if (property.NameEquals("pageIndex"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        pageIndex = null;
                        continue;
                    }
                    pageIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("raw"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        raw = null;
                        continue;
                    }
                    raw = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("confidence"))
                {
                    confidence = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("isVerified"))
                {
                    isVerified = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("classification"))
                {
                    classification = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new ExpectedRemunerationAnnotation(rectangle, pageIndex, raw, confidence, isVerified, classification, additionalProperties, parsed.Value);
        }
    }
}
