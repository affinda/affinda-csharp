// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Affinda.API.Models
{
    /// <summary> The DateFormatPreference. </summary>
    public readonly partial struct DateFormatPreference : IEquatable<DateFormatPreference>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DateFormatPreference"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DateFormatPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DMYValue = "DMY";
        private const string MDYValue = "MDY";
        private const string YMDValue = "YMD";

        /// <summary> DMY. </summary>
        public static DateFormatPreference DMY { get; } = new DateFormatPreference(DMYValue);
        /// <summary> MDY. </summary>
        public static DateFormatPreference MDY { get; } = new DateFormatPreference(MDYValue);
        /// <summary> YMD. </summary>
        public static DateFormatPreference YMD { get; } = new DateFormatPreference(YMDValue);
        /// <summary> Determines if two <see cref="DateFormatPreference"/> values are the same. </summary>
        public static bool operator ==(DateFormatPreference left, DateFormatPreference right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DateFormatPreference"/> values are not the same. </summary>
        public static bool operator !=(DateFormatPreference left, DateFormatPreference right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DateFormatPreference"/>. </summary>
        public static implicit operator DateFormatPreference(string value) => new DateFormatPreference(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DateFormatPreference other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DateFormatPreference other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
