// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Affinda.API.Models
{
    /// <summary> Option &quot;leave&quot; means no document splitting at all. Option &quot;conservative&quot; means we don&apos;t actually split documents the documents, but will add a warning to documents that may require a split. Option &quot;recommended&quot; means we split documents that are highly likely to require a split, and add warnings to documents that might require one. Option &quot;aggressive&quot; means we split all documents that are likely to require a split. </summary>
    public readonly partial struct WorkspaceSplitDocumentsOptions : IEquatable<WorkspaceSplitDocumentsOptions>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkspaceSplitDocumentsOptions"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkspaceSplitDocumentsOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LeaveValue = "leave";
        private const string ConservativeValue = "conservative";
        private const string RecommendedValue = "recommended";
        private const string AggressiveValue = "aggressive";

        /// <summary> leave. </summary>
        public static WorkspaceSplitDocumentsOptions Leave { get; } = new WorkspaceSplitDocumentsOptions(LeaveValue);
        /// <summary> conservative. </summary>
        public static WorkspaceSplitDocumentsOptions Conservative { get; } = new WorkspaceSplitDocumentsOptions(ConservativeValue);
        /// <summary> recommended. </summary>
        public static WorkspaceSplitDocumentsOptions Recommended { get; } = new WorkspaceSplitDocumentsOptions(RecommendedValue);
        /// <summary> aggressive. </summary>
        public static WorkspaceSplitDocumentsOptions Aggressive { get; } = new WorkspaceSplitDocumentsOptions(AggressiveValue);
        /// <summary> Determines if two <see cref="WorkspaceSplitDocumentsOptions"/> values are the same. </summary>
        public static bool operator ==(WorkspaceSplitDocumentsOptions left, WorkspaceSplitDocumentsOptions right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkspaceSplitDocumentsOptions"/> values are not the same. </summary>
        public static bool operator !=(WorkspaceSplitDocumentsOptions left, WorkspaceSplitDocumentsOptions right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WorkspaceSplitDocumentsOptions"/>. </summary>
        public static implicit operator WorkspaceSplitDocumentsOptions(string value) => new WorkspaceSplitDocumentsOptions(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkspaceSplitDocumentsOptions other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkspaceSplitDocumentsOptions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
