// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Affinda.API.Models
{
    /// <summary> The CollectionDateFormatPreference. </summary>
    public readonly partial struct CollectionDateFormatPreference : IEquatable<CollectionDateFormatPreference>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CollectionDateFormatPreference"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CollectionDateFormatPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DMYValue = "DMY";
        private const string MDYValue = "MDY";
        private const string YMDValue = "YMD";

        /// <summary> DMY. </summary>
        public static CollectionDateFormatPreference DMY { get; } = new CollectionDateFormatPreference(DMYValue);
        /// <summary> MDY. </summary>
        public static CollectionDateFormatPreference MDY { get; } = new CollectionDateFormatPreference(MDYValue);
        /// <summary> YMD. </summary>
        public static CollectionDateFormatPreference YMD { get; } = new CollectionDateFormatPreference(YMDValue);
        /// <summary> Determines if two <see cref="CollectionDateFormatPreference"/> values are the same. </summary>
        public static bool operator ==(CollectionDateFormatPreference left, CollectionDateFormatPreference right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CollectionDateFormatPreference"/> values are not the same. </summary>
        public static bool operator !=(CollectionDateFormatPreference left, CollectionDateFormatPreference right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CollectionDateFormatPreference"/>. </summary>
        public static implicit operator CollectionDateFormatPreference(string value) => new CollectionDateFormatPreference(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CollectionDateFormatPreference other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CollectionDateFormatPreference other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
