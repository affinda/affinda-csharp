// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Affinda.API.Models
{
    /// <summary> The Document. </summary>
    public partial class Document : DocumentMeta
    {
        /// <summary> Initializes a new instance of Document. </summary>
        /// <param name="identifier"> Uniquely identify a document. </param>
        /// <param name="pages"> The document&apos;s pages. </param>
        /// <param name="workspace"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/>, <paramref name="pages"/> or <paramref name="workspace"/> is null. </exception>
        internal Document(string identifier, IEnumerable<PageMeta> pages, DocumentMetaWorkspace workspace) : base(identifier, pages, workspace)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (pages == null)
            {
                throw new ArgumentNullException(nameof(pages));
            }
            if (workspace == null)
            {
                throw new ArgumentNullException(nameof(workspace));
            }

            Data = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Initializes a new instance of Document. </summary>
        /// <param name="identifier"> Uniquely identify a document. </param>
        /// <param name="fileName"> Optional filename of the file. </param>
        /// <param name="ready"> If true, the document has finished processing. Particularly useful if an endpoint request specified wait=False, when polling use this variable to determine when to stop polling. </param>
        /// <param name="readyDt"> The datetime when the document was ready. </param>
        /// <param name="failed"> If true, some exception was raised during processing. Check the &apos;error&apos; field of the main return object. </param>
        /// <param name="expiryTime"> The date/time in ISO-8601 format when the document will be automatically deleted.  Defaults to no expiry. </param>
        /// <param name="language"> The document&apos;s language. </param>
        /// <param name="pdf"> The URL to the document&apos;s pdf (if the uploaded document is not already pdf, it&apos;s converted to pdf as part of the parsing process). </param>
        /// <param name="parentDocument"> If this document is part of a splitted document, this attribute points to the original document that this document is splitted from. </param>
        /// <param name="childDocuments"> If this document has been splitted into a number of child documents, this attribute points to those child documents. </param>
        /// <param name="pages"> The document&apos;s pages. </param>
        /// <param name="isOcrd"></param>
        /// <param name="ocrConfidence"></param>
        /// <param name="reviewUrl"></param>
        /// <param name="collection"></param>
        /// <param name="workspace"></param>
        /// <param name="archivedDt"></param>
        /// <param name="isArchived"></param>
        /// <param name="confirmedDt"></param>
        /// <param name="isConfirmed"></param>
        /// <param name="rejectedDt"></param>
        /// <param name="isRejected"></param>
        /// <param name="createdDt"></param>
        /// <param name="errorCode"></param>
        /// <param name="errorDetail"></param>
        /// <param name="file"> URL to view the file. </param>
        /// <param name="tags"></param>
        /// <param name="data"> Dictionary of &lt;any&gt;. </param>
        internal Document(string identifier, string fileName, bool? ready, DateTimeOffset? readyDt, bool? failed, string expiryTime, string language, string pdf, DocumentMetaParentDocument parentDocument, IReadOnlyList<DocumentMetaChildDocumentsItem> childDocuments, IReadOnlyList<PageMeta> pages, bool? isOcrd, float? ocrConfidence, string reviewUrl, DocumentMetaCollection collection, DocumentMetaWorkspace workspace, DateTimeOffset? archivedDt, bool? isArchived, DateTimeOffset? confirmedDt, bool? isConfirmed, DateTimeOffset? rejectedDt, bool? isRejected, DateTimeOffset? createdDt, string errorCode, string errorDetail, string file, IReadOnlyList<Tag> tags, IReadOnlyDictionary<string, object> data) : base(identifier, fileName, ready, readyDt, failed, expiryTime, language, pdf, parentDocument, childDocuments, pages, isOcrd, ocrConfidence, reviewUrl, collection, workspace, archivedDt, isArchived, confirmedDt, isConfirmed, rejectedDt, isRejected, createdDt, errorCode, errorDetail, file, tags)
        {
            Data = data;
        }

        /// <summary> Dictionary of &lt;any&gt;. </summary>
        public IReadOnlyDictionary<string, object> Data { get; }
    }
}
