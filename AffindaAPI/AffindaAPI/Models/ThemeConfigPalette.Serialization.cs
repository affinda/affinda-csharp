// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class ThemeConfigPalette : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Mode))
            {
                writer.WritePropertyName("mode");
                writer.WriteStringValue(Mode.Value.ToString());
            }
            if (Optional.IsDefined(Background))
            {
                writer.WritePropertyName("background");
                writer.WriteObjectValue(Background);
            }
            if (Optional.IsDefined(Text))
            {
                writer.WritePropertyName("text");
                writer.WriteObjectValue(Text);
            }
            if (Optional.IsDefined(Divider))
            {
                writer.WritePropertyName("divider");
                writer.WriteStringValue(Divider);
            }
            if (Optional.IsDefined(Primary))
            {
                writer.WritePropertyName("primary");
                writer.WriteObjectValue(Primary);
            }
            if (Optional.IsDefined(Secondary))
            {
                writer.WritePropertyName("secondary");
                writer.WriteObjectValue(Secondary);
            }
            if (Optional.IsDefined(Success))
            {
                writer.WritePropertyName("success");
                writer.WriteObjectValue(Success);
            }
            if (Optional.IsDefined(Annotation))
            {
                writer.WritePropertyName("annotation");
                writer.WriteObjectValue(Annotation);
            }
            if (Optional.IsDefined(Error))
            {
                writer.WritePropertyName("error");
                writer.WriteObjectValue(Error);
            }
            if (Optional.IsDefined(Info))
            {
                writer.WritePropertyName("info");
                writer.WriteObjectValue(Info);
            }
            if (Optional.IsDefined(Warning))
            {
                writer.WritePropertyName("warning");
                writer.WriteObjectValue(Warning);
            }
            writer.WriteEndObject();
        }

        internal static ThemeConfigPalette DeserializeThemeConfigPalette(JsonElement element)
        {
            Optional<ThemeConfigPaletteMode> mode = default;
            Optional<object> background = default;
            Optional<ThemeConfigPaletteText> text = default;
            Optional<string> divider = default;
            Optional<PaletteColorOptions> primary = default;
            Optional<PaletteColorOptions> secondary = default;
            Optional<PaletteColorOptions> success = default;
            Optional<PaletteColorOptions> annotation = default;
            Optional<PaletteColorOptions> error = default;
            Optional<PaletteColorOptions> info = default;
            Optional<PaletteColorOptions> warning = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("mode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    mode = new ThemeConfigPaletteMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("background"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    background = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("text"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    text = ThemeConfigPaletteText.DeserializeThemeConfigPaletteText(property.Value);
                    continue;
                }
                if (property.NameEquals("divider"))
                {
                    divider = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("primary"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    primary = PaletteColorOptions.DeserializePaletteColorOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("secondary"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    secondary = PaletteColorOptions.DeserializePaletteColorOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("success"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    success = PaletteColorOptions.DeserializePaletteColorOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("annotation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    annotation = PaletteColorOptions.DeserializePaletteColorOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("error"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    error = PaletteColorOptions.DeserializePaletteColorOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("info"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    info = PaletteColorOptions.DeserializePaletteColorOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("warning"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    warning = PaletteColorOptions.DeserializePaletteColorOptions(property.Value);
                    continue;
                }
            }
            return new ThemeConfigPalette(Optional.ToNullable(mode), background.Value, text.Value, divider.Value, primary.Value, secondary.Value, success.Value, annotation.Value, error.Value, info.Value, warning.Value);
        }
    }
}
