// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Affinda.API.Models
{
    public partial class ThemeConfigTypography : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(FontFamily))
            {
                writer.WritePropertyName("fontFamily");
                writer.WriteStringValue(FontFamily);
            }
            if (Optional.IsDefined(FontSize))
            {
                writer.WritePropertyName("fontSize");
                writer.WriteObjectValue(FontSize);
            }
            if (Optional.IsDefined(FontWeightRegular))
            {
                writer.WritePropertyName("fontWeightRegular");
                writer.WriteStringValue(FontWeightRegular);
            }
            if (Optional.IsDefined(FontWeightMedium))
            {
                writer.WritePropertyName("fontWeightMedium");
                writer.WriteStringValue(FontWeightMedium);
            }
            if (Optional.IsDefined(FontWeightBold))
            {
                writer.WritePropertyName("fontWeightBold");
                writer.WriteStringValue(FontWeightBold);
            }
            writer.WriteEndObject();
        }

        internal static ThemeConfigTypography DeserializeThemeConfigTypography(JsonElement element)
        {
            Optional<string> fontFamily = default;
            Optional<object> fontSize = default;
            Optional<string> fontWeightRegular = default;
            Optional<string> fontWeightMedium = default;
            Optional<string> fontWeightBold = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("fontFamily"))
                {
                    fontFamily = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fontSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fontSize = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("fontWeightRegular"))
                {
                    fontWeightRegular = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fontWeightMedium"))
                {
                    fontWeightMedium = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fontWeightBold"))
                {
                    fontWeightBold = property.Value.GetString();
                    continue;
                }
            }
            return new ThemeConfigTypography(fontFamily.Value, fontSize.Value, fontWeightRegular.Value, fontWeightMedium.Value, fontWeightBold.Value);
        }
    }
}
