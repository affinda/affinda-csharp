// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Affinda.API.Models
{
    /// <summary> The DataPointChoiceReplaceResponseChoicesItem. </summary>
    public partial class DataPointChoiceReplaceResponseChoicesItem
    {
        /// <summary> Initializes a new instance of DataPointChoiceReplaceResponseChoicesItem. </summary>
        /// <param name="id"> Data point choice&apos;s ID. </param>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="synonyms"></param>
        /// <param name="description"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> or <paramref name="label"/> is null. </exception>
        internal DataPointChoiceReplaceResponseChoicesItem(int id, string value, string label, IEnumerable<string> synonyms, string description)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }
            if (label == null)
            {
                throw new ArgumentNullException(nameof(label));
            }

            Id = id;
            Value = value;
            Label = label;
            Synonyms = synonyms?.ToList();
            Description = description;
        }

        /// <summary> Initializes a new instance of DataPointChoiceReplaceResponseChoicesItem. </summary>
        /// <param name="id"> Data point choice&apos;s ID. </param>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="synonyms"></param>
        /// <param name="description"></param>
        internal DataPointChoiceReplaceResponseChoicesItem(int id, string value, string label, IReadOnlyList<string> synonyms, string description)
        {
            Id = id;
            Value = value;
            Label = label;
            Synonyms = synonyms;
            Description = description;
        }

        /// <summary> Data point choice&apos;s ID. </summary>
        public int Id { get; }
        /// <summary> Gets the value. </summary>
        public string Value { get; }
        /// <summary> Gets the label. </summary>
        public string Label { get; }
        /// <summary> Gets the synonyms. </summary>
        public IReadOnlyList<string> Synonyms { get; }
        /// <summary> Gets the description. </summary>
        public string Description { get; }
    }
}
