// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Affinda.API.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AffindaAPIModelFactory
    {
        /// <summary> Initializes a new instance of GetAllDocumentsResults. </summary>
        /// <param name="count"> Number of documents in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.GetAllDocumentsResults"/> instance for mocking. </returns>
        public static GetAllDocumentsResults GetAllDocumentsResults(int? count = null, string next = null, string previous = null, IEnumerable<Meta> results = null)
        {
            results ??= new List<Meta>();

            return new GetAllDocumentsResults(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Meta. </summary>
        /// <param name="identifier"> Unique identifier for the document. If creating a document and left blank, one will be automatically generated. </param>
        /// <param name="fileName"> Optional filename of the file. </param>
        /// <param name="ready"> If true, the document has finished processing. Particularly useful if an endpoint request specified wait=False, when polling use this variable to determine when to stop polling. </param>
        /// <param name="readyDt"> The datetime when the document was ready. </param>
        /// <param name="failed"> If true, some exception was raised during processing. Check the &apos;error&apos; field of the main return object. </param>
        /// <param name="expiryTime"> The date/time in ISO-8601 format when the document will be automatically deleted.  Defaults to no expiry. </param>
        /// <returns> A new <see cref="Models.Meta"/> instance for mocking. </returns>
        public static Meta Meta(string identifier = null, string fileName = null, bool ready = default, DateTimeOffset? readyDt = null, bool failed = default, string expiryTime = null)
        {
            return new Meta(identifier, fileName, ready, readyDt, failed, expiryTime);
        }

        /// <summary> Initializes a new instance of RequestError. </summary>
        /// <param name="type"></param>
        /// <param name="errors"></param>
        /// <returns> A new <see cref="Models.RequestError"/> instance for mocking. </returns>
        public static RequestError RequestError(string type = null, IEnumerable<RequestErrorErrorsItem> errors = null)
        {
            errors ??= new List<RequestErrorErrorsItem>();

            return new RequestError(type, errors?.ToList());
        }

        /// <summary> Initializes a new instance of RequestErrorErrorsItem. </summary>
        /// <param name="attr"></param>
        /// <param name="code"></param>
        /// <param name="detail"></param>
        /// <returns> A new <see cref="Models.RequestErrorErrorsItem"/> instance for mocking. </returns>
        public static RequestErrorErrorsItem RequestErrorErrorsItem(string attr = null, string code = null, string detail = null)
        {
            return new RequestErrorErrorsItem(attr, code, detail);
        }

        /// <summary> Initializes a new instance of Resume. </summary>
        /// <param name="data"></param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Models.Resume"/> instance for mocking. </returns>
        public static Resume Resume(ResumeData data = null, Meta meta = null, Error error = null)
        {
            return new Resume(data, meta, error);
        }

        /// <summary> Initializes a new instance of ResumeData. </summary>
        /// <param name="name"></param>
        /// <param name="phoneNumbers"></param>
        /// <param name="websites"></param>
        /// <param name="emails"></param>
        /// <param name="dateOfBirth"></param>
        /// <param name="location"></param>
        /// <param name="objective"></param>
        /// <param name="languages"></param>
        /// <param name="summary"></param>
        /// <param name="totalYearsExperience"></param>
        /// <param name="headShot"> base64 encoded string. </param>
        /// <param name="education"></param>
        /// <param name="profession"> Prediction of the candidate&apos;s profession based on recent work experience. </param>
        /// <param name="linkedin"> Linkedin account associated with the candidate. </param>
        /// <param name="workExperience"></param>
        /// <param name="skills"></param>
        /// <param name="certifications"></param>
        /// <param name="publications"></param>
        /// <param name="referees"></param>
        /// <param name="sections"></param>
        /// <param name="isResumeProbability"> Probability that the given document is a resume. Values below 30 suggest that the document is not a resume. </param>
        /// <param name="rawText"> All of the raw text of the parsed resume, example is shortened for readiblity. </param>
        /// <returns> A new <see cref="Models.ResumeData"/> instance for mocking. </returns>
        public static ResumeData ResumeData(ResumeDataName name = null, IEnumerable<string> phoneNumbers = null, IEnumerable<string> websites = null, IEnumerable<string> emails = null, string dateOfBirth = null, Location location = null, string objective = null, IEnumerable<string> languages = null, string summary = null, int? totalYearsExperience = null, byte[] headShot = null, IEnumerable<ResumeDataEducationItem> education = null, string profession = null, string linkedin = null, IEnumerable<ResumeDataWorkExperienceItem> workExperience = null, IEnumerable<ResumeDataSkillsItem> skills = null, IEnumerable<string> certifications = null, IEnumerable<string> publications = null, IEnumerable<ResumeDataRefereesItem> referees = null, IEnumerable<ResumeDataSectionsItem> sections = null, int? isResumeProbability = null, string rawText = null)
        {
            phoneNumbers ??= new List<string>();
            websites ??= new List<string>();
            emails ??= new List<string>();
            languages ??= new List<string>();
            education ??= new List<ResumeDataEducationItem>();
            workExperience ??= new List<ResumeDataWorkExperienceItem>();
            skills ??= new List<ResumeDataSkillsItem>();
            certifications ??= new List<string>();
            publications ??= new List<string>();
            referees ??= new List<ResumeDataRefereesItem>();
            sections ??= new List<ResumeDataSectionsItem>();

            return new ResumeData(name, phoneNumbers?.ToList(), websites?.ToList(), emails?.ToList(), dateOfBirth, location, objective, languages?.ToList(), summary, totalYearsExperience, headShot, education?.ToList(), profession, linkedin, workExperience?.ToList(), skills?.ToList(), certifications?.ToList(), publications?.ToList(), referees?.ToList(), sections?.ToList(), isResumeProbability, rawText);
        }

        /// <summary> Initializes a new instance of Location. </summary>
        /// <param name="formatted"></param>
        /// <param name="postalCode"></param>
        /// <param name="state"></param>
        /// <param name="country"></param>
        /// <param name="countryCode"> Two letter country code (ISO 3166-1 alpha-2). </param>
        /// <param name="rawInput"></param>
        /// <param name="streetNumber"></param>
        /// <param name="street"></param>
        /// <param name="apartmentNumber"></param>
        /// <param name="city"></param>
        /// <returns> A new <see cref="Models.Location"/> instance for mocking. </returns>
        public static Location Location(string formatted = null, string postalCode = null, string state = null, string country = null, string countryCode = null, string rawInput = null, string streetNumber = null, string street = null, string apartmentNumber = null, string city = null)
        {
            return new Location(formatted, postalCode, state, country, countryCode, rawInput, streetNumber, street, apartmentNumber, city);
        }

        /// <summary> Initializes a new instance of ResumeDataEducationItemAccreditation. </summary>
        /// <param name="education"></param>
        /// <param name="inputStr"></param>
        /// <param name="matchStr"></param>
        /// <param name="educationLevel"></param>
        /// <returns> A new <see cref="Models.ResumeDataEducationItemAccreditation"/> instance for mocking. </returns>
        public static ResumeDataEducationItemAccreditation ResumeDataEducationItemAccreditation(string education = null, string inputStr = null, string matchStr = null, string educationLevel = null)
        {
            return new ResumeDataEducationItemAccreditation(education, inputStr, matchStr, educationLevel);
        }

        /// <summary> Initializes a new instance of ResumeDataWorkExperienceItem. </summary>
        /// <param name="id"></param>
        /// <param name="jobTitle"></param>
        /// <param name="organization"></param>
        /// <param name="location"></param>
        /// <param name="jobDescription"></param>
        /// <param name="dates"></param>
        /// <param name="occupation"></param>
        /// <returns> A new <see cref="Models.ResumeDataWorkExperienceItem"/> instance for mocking. </returns>
        public static ResumeDataWorkExperienceItem ResumeDataWorkExperienceItem(int? id = null, string jobTitle = null, string organization = null, Location location = null, string jobDescription = null, ResumeDataWorkExperienceItemDates dates = null, ResumeDataWorkExperienceItemOccupation occupation = null)
        {
            return new ResumeDataWorkExperienceItem(id, jobTitle, organization, location, jobDescription, dates, occupation);
        }

        /// <summary> Initializes a new instance of ResumeDataWorkExperienceItemOccupation. </summary>
        /// <param name="jobTitle"> The raw (not normalized) job title pulled from the work experience entry. </param>
        /// <param name="jobTitleNormalized"> Mapped onto the EMSI job title taxonomy if a sufficiently close match exists. </param>
        /// <param name="managementLevel"></param>
        /// <param name="classification"></param>
        /// <returns> A new <see cref="Models.ResumeDataWorkExperienceItemOccupation"/> instance for mocking. </returns>
        public static ResumeDataWorkExperienceItemOccupation ResumeDataWorkExperienceItemOccupation(string jobTitle = null, string jobTitleNormalized = null, ManagementLevel? managementLevel = null, Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification classification = null)
        {
            return new ResumeDataWorkExperienceItemOccupation(jobTitle, jobTitleNormalized, managementLevel, classification);
        }

        /// <summary> Initializes a new instance of Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification. </summary>
        /// <param name="title"> SOC2020 classification for this job title. </param>
        /// <param name="minorGroup"> SOC2020 minor group. </param>
        /// <param name="subMajorGroup"> SOC2020 sub major group. </param>
        /// <param name="majorGroup"> SOC2020 major group. </param>
        /// <param name="socCode"> The 4 digit code representing the SOC2020 classification for this job title. </param>
        /// <returns> A new <see cref="Models.Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification"/> instance for mocking. </returns>
        public static Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification(string title = null, string minorGroup = null, string subMajorGroup = null, string majorGroup = null, int? socCode = null)
        {
            return new Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification(title, minorGroup, subMajorGroup, majorGroup, socCode);
        }

        /// <summary> Initializes a new instance of ResumeDataSkillsItem. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Models.ResumeDataSkillsItem"/> instance for mocking. </returns>
        public static ResumeDataSkillsItem ResumeDataSkillsItem(int? id = null, string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, IEnumerable<ResumeDataSkillsPropertiesItemsItem> sources = null)
        {
            sources ??= new List<ResumeDataSkillsPropertiesItemsItem>();

            return new ResumeDataSkillsItem(id, name, lastUsed, numberOfMonths, type, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeDataSkillsPropertiesItemsItem. </summary>
        /// <param name="section"></param>
        /// <param name="position"></param>
        /// <returns> A new <see cref="Models.ResumeDataSkillsPropertiesItemsItem"/> instance for mocking. </returns>
        public static ResumeDataSkillsPropertiesItemsItem ResumeDataSkillsPropertiesItemsItem(string section = null, int? position = null)
        {
            return new ResumeDataSkillsPropertiesItemsItem(section, position);
        }

        /// <summary> Initializes a new instance of ResumeDataSectionsItem. </summary>
        /// <param name="sectionType"></param>
        /// <param name="bbox"></param>
        /// <param name="pageIndex"></param>
        /// <param name="text"></param>
        /// <returns> A new <see cref="Models.ResumeDataSectionsItem"/> instance for mocking. </returns>
        public static ResumeDataSectionsItem ResumeDataSectionsItem(string sectionType = null, IEnumerable<float> bbox = null, int? pageIndex = null, string text = null)
        {
            bbox ??= new List<float>();

            return new ResumeDataSectionsItem(sectionType, bbox?.ToList(), pageIndex, text);
        }

        /// <summary> Initializes a new instance of Error. </summary>
        /// <param name="errorCode"></param>
        /// <param name="errorDetail"></param>
        /// <returns> A new <see cref="Models.Error"/> instance for mocking. </returns>
        public static Error Error(string errorCode = null, string errorDetail = null)
        {
            return new Error(errorCode, errorDetail);
        }

        /// <summary> Initializes a new instance of RedactedResume. </summary>
        /// <param name="data"></param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Models.RedactedResume"/> instance for mocking. </returns>
        public static RedactedResume RedactedResume(RedactedResumeData data = null, Meta meta = null, Error error = null)
        {
            return new RedactedResume(data, meta, error);
        }

        /// <summary> Initializes a new instance of RedactedResumeData. </summary>
        /// <param name="redactedPdf"> URL to redacted PDF. </param>
        /// <returns> A new <see cref="Models.RedactedResumeData"/> instance for mocking. </returns>
        public static RedactedResumeData RedactedResumeData(string redactedPdf = null)
        {
            return new RedactedResumeData(redactedPdf);
        }

        /// <summary> Initializes a new instance of Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of documents in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(int? count = null, string next = null, string previous = null, IEnumerable<Get200ApplicationJsonPropertiesItemsItem> results = null)
        {
            results ??= new List<Get200ApplicationJsonPropertiesItemsItem>();

            return new Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Get200ApplicationJsonPropertiesItemsItem. </summary>
        /// <param name="identifier"> Unique identifier for the document. If creating a document and left blank, one will be automatically generated. </param>
        /// <param name="formatFile"> URL to a template to apply. </param>
        /// <returns> A new <see cref="Models.Get200ApplicationJsonPropertiesItemsItem"/> instance for mocking. </returns>
        public static Get200ApplicationJsonPropertiesItemsItem Get200ApplicationJsonPropertiesItemsItem(string identifier = null, string formatFile = null)
        {
            return new Get200ApplicationJsonPropertiesItemsItem(identifier, formatFile);
        }

        /// <summary> Initializes a new instance of ReformattedResume. </summary>
        /// <param name="data"></param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Models.ReformattedResume"/> instance for mocking. </returns>
        public static ReformattedResume ReformattedResume(ReformattedResumeData data = null, Meta meta = null, Error error = null)
        {
            return new ReformattedResume(data, meta, error);
        }

        /// <summary> Initializes a new instance of ReformattedResumeData. </summary>
        /// <param name="reformattedFile"></param>
        /// <returns> A new <see cref="Models.ReformattedResumeData"/> instance for mocking. </returns>
        public static ReformattedResumeData ReformattedResumeData(string reformattedFile = null)
        {
            return new ReformattedResumeData(reformattedFile);
        }

        /// <summary> Initializes a new instance of ResumeSearch. </summary>
        /// <param name="count"> Total number of results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="parameters"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.ResumeSearch"/> instance for mocking. </returns>
        public static ResumeSearch ResumeSearch(int? count = null, string next = null, string previous = null, ResumeSearchParameters parameters = null, IEnumerable<ResumeSearchResult> results = null)
        {
            results ??= new List<ResumeSearchResult>();

            return new ResumeSearch(count, next, previous, parameters, results?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchResult. </summary>
        /// <param name="identifier"> Unique identifier for the document. If creating a document and left blank, one will be automatically generated. </param>
        /// <param name="score"></param>
        /// <param name="pdf"></param>
        /// <param name="name"></param>
        /// <param name="jobTitle"></param>
        /// <param name="managementLevel"></param>
        /// <param name="experience"></param>
        /// <param name="skills"></param>
        /// <param name="languages"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="searchExpression"></param>
        /// <returns> A new <see cref="Models.ResumeSearchResult"/> instance for mocking. </returns>
        public static ResumeSearchResult ResumeSearchResult(string identifier = null, float score = default, string pdf = null, string name = null, ResumeSearchScoreComponent jobTitle = null, ResumeSearchScoreComponent managementLevel = null, ResumeSearchScoreComponent experience = null, ResumeSearchScoreComponent skills = null, ResumeSearchScoreComponent languages = null, ResumeSearchScoreComponent location = null, ResumeSearchScoreComponent education = null, ResumeSearchScoreComponent occupationGroup = null, ResumeSearchScoreComponent searchExpression = null)
        {
            return new ResumeSearchResult(identifier, score, pdf, name, jobTitle, managementLevel, experience, skills, languages, location, education, occupationGroup, searchExpression);
        }

        /// <summary> Initializes a new instance of ResumeSearchScoreComponent. </summary>
        /// <param name="label"></param>
        /// <param name="value"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.ResumeSearchScoreComponent"/> instance for mocking. </returns>
        public static ResumeSearchScoreComponent ResumeSearchScoreComponent(string label = null, string value = null, float? score = null)
        {
            return new ResumeSearchScoreComponent(label, value, score);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetail. </summary>
        /// <param name="jobTitle"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="skills"></param>
        /// <param name="experience"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="languages"></param>
        /// <param name="managementLevel"></param>
        /// <param name="searchExpression"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetail"/> instance for mocking. </returns>
        public static ResumeSearchDetail ResumeSearchDetail(ResumeSearchDetailJobTitle jobTitle = null, ResumeSearchDetailLocation location = null, ResumeSearchDetailEducation education = null, ResumeSearchDetailSkills skills = null, ResumeSearchDetailExperience experience = null, ResumeSearchDetailOccupationGroup occupationGroup = null, ResumeSearchDetailLanguages languages = null, ResumeSearchDetailManagementLevel managementLevel = null, ResumeSearchDetailSearchExpression searchExpression = null)
        {
            return new ResumeSearchDetail(jobTitle, location, education, skills, experience, occupationGroup, languages, managementLevel, searchExpression);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailJobTitle. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailJobTitle"/> instance for mocking. </returns>
        public static ResumeSearchDetailJobTitle ResumeSearchDetailJobTitle(IEnumerable<string> missing = null, IEnumerable<ResumeSearchDetailJobTitleValueItem> value = null)
        {
            missing ??= new List<string>();
            value ??= new List<ResumeSearchDetailJobTitleValueItem>();

            return new ResumeSearchDetailJobTitle(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailJobTitleValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="companyName"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailJobTitleValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailJobTitleValueItem ResumeSearchDetailJobTitleValueItem(string name = null, string startDate = null, string endDate = null, string companyName = null, bool? match = null)
        {
            return new ResumeSearchDetailJobTitleValueItem(name, startDate, endDate, companyName, match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailLocation. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailLocation"/> instance for mocking. </returns>
        public static ResumeSearchDetailLocation ResumeSearchDetailLocation(IEnumerable<ResumeSearchParametersLocation> missing = null, ResumeSearchDetailLocationValue value = null)
        {
            missing ??= new List<ResumeSearchParametersLocation>();

            return new ResumeSearchDetailLocation(missing?.ToList(), value);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailEducation. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailEducation"/> instance for mocking. </returns>
        public static ResumeSearchDetailEducation ResumeSearchDetailEducation(ResumeSearchDetailEducationMissing missing = null, IEnumerable<ResumeSearchDetailEducationValueItem> value = null)
        {
            value ??= new List<ResumeSearchDetailEducationValueItem>();

            return new ResumeSearchDetailEducation(missing, value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailEducationMissing. </summary>
        /// <param name="degrees"></param>
        /// <param name="highestDegreeTypes"></param>
        /// <param name="institutions"></param>
        /// <param name="currentStudent"></param>
        /// <param name="recentGraduate"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailEducationMissing"/> instance for mocking. </returns>
        public static ResumeSearchDetailEducationMissing ResumeSearchDetailEducationMissing(IEnumerable<string> degrees = null, IEnumerable<string> highestDegreeTypes = null, IEnumerable<string> institutions = null, bool? currentStudent = null, bool? recentGraduate = null)
        {
            degrees ??= new List<string>();
            highestDegreeTypes ??= new List<string>();
            institutions ??= new List<string>();

            return new ResumeSearchDetailEducationMissing(degrees?.ToList(), highestDegreeTypes?.ToList(), institutions?.ToList(), currentStudent, recentGraduate);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailEducationValueItem. </summary>
        /// <param name="organization"></param>
        /// <param name="accreditation"></param>
        /// <param name="grade"></param>
        /// <param name="location"></param>
        /// <param name="dates"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailEducationValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailEducationValueItem ResumeSearchDetailEducationValueItem(string organization = null, Accreditation accreditation = null, string grade = null, Location location = null, EducationDates dates = null, bool? match = null)
        {
            return new ResumeSearchDetailEducationValueItem(organization, accreditation, grade, location, dates, match);
        }

        /// <summary> Initializes a new instance of Education. </summary>
        /// <param name="organization"></param>
        /// <param name="accreditation"></param>
        /// <param name="grade"></param>
        /// <param name="location"></param>
        /// <param name="dates"></param>
        /// <returns> A new <see cref="Models.Education"/> instance for mocking. </returns>
        public static Education Education(string organization = null, Accreditation accreditation = null, string grade = null, Location location = null, EducationDates dates = null)
        {
            return new Education(organization, accreditation, grade, location, dates);
        }

        /// <summary> Initializes a new instance of Accreditation. </summary>
        /// <param name="education"></param>
        /// <param name="educationLevel"></param>
        /// <param name="inputStr"></param>
        /// <param name="matchStr"></param>
        /// <returns> A new <see cref="Models.Accreditation"/> instance for mocking. </returns>
        public static Accreditation Accreditation(string education = null, string educationLevel = null, string inputStr = null, string matchStr = null)
        {
            return new Accreditation(education, educationLevel, inputStr, matchStr);
        }

        /// <summary> Initializes a new instance of EducationDates. </summary>
        /// <param name="startDate"></param>
        /// <param name="completionDate"></param>
        /// <param name="isCurrent"></param>
        /// <returns> A new <see cref="Models.EducationDates"/> instance for mocking. </returns>
        public static EducationDates EducationDates(string startDate = null, string completionDate = null, bool? isCurrent = null)
        {
            return new EducationDates(startDate, completionDate, isCurrent);
        }

        /// <summary> Initializes a new instance of ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1. </summary>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1"/> instance for mocking. </returns>
        public static ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1 ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1(bool? match = null)
        {
            return new ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1(match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailSkills. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailSkills"/> instance for mocking. </returns>
        public static ResumeSearchDetailSkills ResumeSearchDetailSkills(IEnumerable<ResumeSearchParametersSkill> missing = null, IEnumerable<ResumeSearchDetailSkillsValueItem> value = null)
        {
            missing ??= new List<ResumeSearchParametersSkill>();
            value ??= new List<ResumeSearchDetailSkillsValueItem>();

            return new ResumeSearchDetailSkills(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailSkillsValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="sources"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailSkillsValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailSkillsValueItem ResumeSearchDetailSkillsValueItem(string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, IEnumerable<ResumeSkillSourcesItem> sources = null, bool? match = null)
        {
            sources ??= new List<ResumeSkillSourcesItem>();

            return new ResumeSearchDetailSkillsValueItem(name, lastUsed, numberOfMonths, type, sources?.ToList(), match);
        }

        /// <summary> Initializes a new instance of ResumeSkill. </summary>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Models.ResumeSkill"/> instance for mocking. </returns>
        public static ResumeSkill ResumeSkill(string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, IEnumerable<ResumeSkillSourcesItem> sources = null)
        {
            sources ??= new List<ResumeSkillSourcesItem>();

            return new ResumeSkill(name, lastUsed, numberOfMonths, type, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSkillSourcesItem. </summary>
        /// <param name="section"></param>
        /// <param name="position"></param>
        /// <returns> A new <see cref="Models.ResumeSkillSourcesItem"/> instance for mocking. </returns>
        public static ResumeSkillSourcesItem ResumeSkillSourcesItem(ResumeSkillSourcesItemSection? section = null, int? position = null)
        {
            return new ResumeSkillSourcesItem(section, position);
        }

        /// <summary> Initializes a new instance of ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1. </summary>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1"/> instance for mocking. </returns>
        public static ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1 ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1(bool? match = null)
        {
            return new ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1(match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailExperience. </summary>
        /// <param name="years"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailExperience"/> instance for mocking. </returns>
        public static ResumeSearchDetailExperience ResumeSearchDetailExperience(int? years = null, bool? match = null)
        {
            return new ResumeSearchDetailExperience(years, match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailOccupationGroup. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailOccupationGroup"/> instance for mocking. </returns>
        public static ResumeSearchDetailOccupationGroup ResumeSearchDetailOccupationGroup(IEnumerable<int> missing = null, IEnumerable<ResumeSearchDetailOccupationGroupValueItem> value = null)
        {
            missing ??= new List<int>();
            value ??= new List<ResumeSearchDetailOccupationGroupValueItem>();

            return new ResumeSearchDetailOccupationGroup(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailOccupationGroupValueItem. </summary>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="children"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailOccupationGroupValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailOccupationGroupValueItem ResumeSearchDetailOccupationGroupValueItem(int code = default, string name = null, IEnumerable<OccupationGroup> children = null, bool? match = null)
        {
            children ??= new List<OccupationGroup>();

            return new ResumeSearchDetailOccupationGroupValueItem(code, name, children?.ToList(), match);
        }

        /// <summary> Initializes a new instance of OccupationGroup. </summary>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="children"></param>
        /// <returns> A new <see cref="Models.OccupationGroup"/> instance for mocking. </returns>
        public static OccupationGroup OccupationGroup(int code = default, string name = null, IEnumerable<OccupationGroup> children = null)
        {
            children ??= new List<OccupationGroup>();

            return new OccupationGroup(code, name, children?.ToList());
        }

        /// <summary> Initializes a new instance of ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1. </summary>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1"/> instance for mocking. </returns>
        public static ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1 ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1(bool? match = null)
        {
            return new ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1(match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailLanguages. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailLanguages"/> instance for mocking. </returns>
        public static ResumeSearchDetailLanguages ResumeSearchDetailLanguages(IEnumerable<ResumeSearchParametersSkill> missing = null, IEnumerable<ResumeSearchDetailLanguagesValueItem> value = null)
        {
            missing ??= new List<ResumeSearchParametersSkill>();
            value ??= new List<ResumeSearchDetailLanguagesValueItem>();

            return new ResumeSearchDetailLanguages(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailLanguagesValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="sources"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailLanguagesValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailLanguagesValueItem ResumeSearchDetailLanguagesValueItem(string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, IEnumerable<ResumeSkillSourcesItem> sources = null, bool? match = null)
        {
            sources ??= new List<ResumeSkillSourcesItem>();

            return new ResumeSearchDetailLanguagesValueItem(name, lastUsed, numberOfMonths, type, sources?.ToList(), match);
        }

        /// <summary> Initializes a new instance of Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1. </summary>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1"/> instance for mocking. </returns>
        public static Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1 Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1(bool? match = null)
        {
            return new Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1(match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailManagementLevel. </summary>
        /// <param name="level"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailManagementLevel"/> instance for mocking. </returns>
        public static ResumeSearchDetailManagementLevel ResumeSearchDetailManagementLevel(ManagementLevel? level = null, bool? match = null)
        {
            return new ResumeSearchDetailManagementLevel(level, match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailSearchExpression. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailSearchExpression"/> instance for mocking. </returns>
        public static ResumeSearchDetailSearchExpression ResumeSearchDetailSearchExpression(IEnumerable<string> missing = null, IEnumerable<string> value = null)
        {
            missing ??= new List<string>();
            value ??= new List<string>();

            return new ResumeSearchDetailSearchExpression(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchMatch. </summary>
        /// <param name="score"> The matching score between the provided resume and job description. </param>
        /// <returns> A new <see cref="Models.ResumeSearchMatch"/> instance for mocking. </returns>
        public static ResumeSearchMatch ResumeSearchMatch(float? score = null)
        {
            return new ResumeSearchMatch(score);
        }

        /// <summary> Initializes a new instance of GetAllJobDescriptionsResults. </summary>
        /// <param name="count"> Number of documents in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.GetAllJobDescriptionsResults"/> instance for mocking. </returns>
        public static GetAllJobDescriptionsResults GetAllJobDescriptionsResults(int? count = null, string next = null, string previous = null, IEnumerable<Meta> results = null)
        {
            results ??= new List<Meta>();

            return new GetAllJobDescriptionsResults(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescription. </summary>
        /// <param name="data"></param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Models.JobDescription"/> instance for mocking. </returns>
        public static JobDescription JobDescription(JobDescriptionData data = null, Meta meta = null, Error error = null)
        {
            return new JobDescription(data, meta, error);
        }

        /// <summary> Initializes a new instance of JobDescriptionData. </summary>
        /// <param name="contactEmail"></param>
        /// <param name="contactName"></param>
        /// <param name="contactPhone"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="jobType"></param>
        /// <param name="languages"></param>
        /// <param name="skills"></param>
        /// <param name="organizationName"></param>
        /// <param name="organizationWebsite"></param>
        /// <param name="educationLevel"></param>
        /// <param name="educationAccreditation"></param>
        /// <param name="expectedRemuneration"></param>
        /// <param name="location"></param>
        /// <param name="certifications"></param>
        /// <returns> A new <see cref="Models.JobDescriptionData"/> instance for mocking. </returns>
        public static JobDescriptionData JobDescriptionData(TextAnnotation contactEmail = null, TextAnnotation contactName = null, TextAnnotation contactPhone = null, DateAnnotation startDate = null, DateAnnotation endDate = null, TextAnnotation jobType = null, IEnumerable<LanguageAnnotation> languages = null, IEnumerable<SkillAnnotation> skills = null, TextAnnotation organizationName = null, TextAnnotation organizationWebsite = null, TextAnnotation educationLevel = null, TextAnnotation educationAccreditation = null, ExpectedRemunerationAnnotation expectedRemuneration = null, LocationAnnotation location = null, IEnumerable<TextAnnotation> certifications = null)
        {
            languages ??= new List<LanguageAnnotation>();
            skills ??= new List<SkillAnnotation>();
            certifications ??= new List<TextAnnotation>();

            return new JobDescriptionData(contactEmail, contactName, contactPhone, startDate, endDate, jobType, languages?.ToList(), skills?.ToList(), organizationName, organizationWebsite, educationLevel, educationAccreditation, expectedRemuneration, location, certifications?.ToList());
        }

        /// <summary> Initializes a new instance of TextAnnotation. </summary>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.TextAnnotation"/> instance for mocking. </returns>
        public static TextAnnotation TextAnnotation(Rectangle rectangle = null, int? pageIndex = null, string raw = null, float confidence = default, bool isVerified = default, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, string parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new TextAnnotation(rectangle, pageIndex, raw, confidence, isVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of Annotation. </summary>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.Annotation"/> instance for mocking. </returns>
        public static Annotation Annotation(Rectangle rectangle = null, int? pageIndex = null, string raw = null, float confidence = default, bool isVerified = default, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new Annotation(rectangle, pageIndex, raw, confidence, isVerified, classification, additionalProperties);
        }

        /// <summary> Initializes a new instance of Rectangle. </summary>
        /// <param name="x0"></param>
        /// <param name="y0"></param>
        /// <param name="x1"></param>
        /// <param name="y1"></param>
        /// <returns> A new <see cref="Models.Rectangle"/> instance for mocking. </returns>
        public static Rectangle Rectangle(float x0 = default, float y0 = default, float x1 = default, float y1 = default)
        {
            return new Rectangle(x0, y0, x1, y1);
        }

        /// <summary> Initializes a new instance of DateAnnotation. </summary>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.DateAnnotation"/> instance for mocking. </returns>
        public static DateAnnotation DateAnnotation(Rectangle rectangle = null, int? pageIndex = null, string raw = null, float confidence = default, bool isVerified = default, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, DateTimeOffset? parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DateAnnotation(rectangle, pageIndex, raw, confidence, isVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of LanguageAnnotation. </summary>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.LanguageAnnotation"/> instance for mocking. </returns>
        public static LanguageAnnotation LanguageAnnotation(Rectangle rectangle = null, int? pageIndex = null, string raw = null, float confidence = default, bool isVerified = default, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, string parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new LanguageAnnotation(rectangle, pageIndex, raw, confidence, isVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of SkillAnnotation. </summary>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.SkillAnnotation"/> instance for mocking. </returns>
        public static SkillAnnotation SkillAnnotation(Rectangle rectangle = null, int? pageIndex = null, string raw = null, float confidence = default, bool isVerified = default, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, string parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SkillAnnotation(rectangle, pageIndex, raw, confidence, isVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of ExpectedRemunerationAnnotation. </summary>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ExpectedRemunerationAnnotation"/> instance for mocking. </returns>
        public static ExpectedRemunerationAnnotation ExpectedRemunerationAnnotation(Rectangle rectangle = null, int? pageIndex = null, string raw = null, float confidence = default, bool isVerified = default, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, ExpectedRemunerationAnnotationParsed parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ExpectedRemunerationAnnotation(rectangle, pageIndex, raw, confidence, isVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of ExpectedRemunerationAnnotationParsed. </summary>
        /// <param name="minimum"></param>
        /// <param name="maximum"></param>
        /// <param name="currency"></param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="Models.ExpectedRemunerationAnnotationParsed"/> instance for mocking. </returns>
        public static ExpectedRemunerationAnnotationParsed ExpectedRemunerationAnnotationParsed(float? minimum = null, float? maximum = null, string currency = null, string unit = null)
        {
            return new ExpectedRemunerationAnnotationParsed(minimum, maximum, currency, unit);
        }

        /// <summary> Initializes a new instance of LocationAnnotation. </summary>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.LocationAnnotation"/> instance for mocking. </returns>
        public static LocationAnnotation LocationAnnotation(Rectangle rectangle = null, int? pageIndex = null, string raw = null, float confidence = default, bool isVerified = default, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, Location parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new LocationAnnotation(rectangle, pageIndex, raw, confidence, isVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of indexes in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema(int? count = null, string next = null, string previous = null, IEnumerable<Paths108CfgmIndexGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems> results = null)
        {
            results ??= new List<Paths108CfgmIndexGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems>();

            return new Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Paths108CfgmIndexGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.Paths108CfgmIndexGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems"/> instance for mocking. </returns>
        public static Paths108CfgmIndexGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems Paths108CfgmIndexGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems(string name = null)
        {
            return new Paths108CfgmIndexGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems(name);
        }

        /// <summary> Initializes a new instance of Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema(string name = null)
        {
            return new Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema(name);
        }

        /// <summary> Initializes a new instance of PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of indexed documents in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema(int? count = null, string next = null, string previous = null, IEnumerable<PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems> results = null)
        {
            results ??= new List<PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems>();

            return new PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems. </summary>
        /// <param name="document"></param>
        /// <returns> A new <see cref="Models.PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems"/> instance for mocking. </returns>
        public static PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems(string document = null)
        {
            return new PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems(document);
        }

        /// <summary> Initializes a new instance of PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema. </summary>
        /// <param name="document"> Unique identifier for the document. </param>
        /// <returns> A new <see cref="Models.PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema(string document = null)
        {
            return new PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema(document);
        }

        /// <summary> Initializes a new instance of GetAllInvoicesResults. </summary>
        /// <param name="count"> Number of documents in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.GetAllInvoicesResults"/> instance for mocking. </returns>
        public static GetAllInvoicesResults GetAllInvoicesResults(int? count = null, string next = null, string previous = null, IEnumerable<Meta> results = null)
        {
            results ??= new List<Meta>();

            return new GetAllInvoicesResults(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Invoice. </summary>
        /// <param name="data"></param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Models.Invoice"/> instance for mocking. </returns>
        public static Invoice Invoice(InvoiceData data = null, InvoiceMeta meta = null, Error error = null)
        {
            return new Invoice(data, meta, error);
        }

        /// <summary> Initializes a new instance of InvoiceData. </summary>
        /// <param name="tables"></param>
        /// <param name="invoiceDate"></param>
        /// <param name="invoiceOrderDate"></param>
        /// <param name="paymentDateDue"></param>
        /// <param name="paymentAmountBase"></param>
        /// <param name="paymentAmountTax"></param>
        /// <param name="paymentAmountTotal"></param>
        /// <param name="paymentAmountPaid"></param>
        /// <param name="paymentAmountDue"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="invoicePurchaseOrderNumber"></param>
        /// <param name="supplierBusinessNumber"></param>
        /// <param name="customerNumber"></param>
        /// <param name="customerBusinessNumber"></param>
        /// <param name="paymentReference"></param>
        /// <param name="bankAccountNumber"></param>
        /// <param name="supplierVAT"></param>
        /// <param name="customerVAT"></param>
        /// <param name="bpayBillerCode"></param>
        /// <param name="bpayReference"></param>
        /// <param name="bankSortCode"></param>
        /// <param name="bankIban"></param>
        /// <param name="bankSwift"></param>
        /// <param name="bankBSB"></param>
        /// <param name="customerContactName"></param>
        /// <param name="customerCompanyName"></param>
        /// <param name="supplierCompanyName"></param>
        /// <param name="customerBillingAddress"></param>
        /// <param name="customerDeliveryAddress"></param>
        /// <param name="supplierAddress"></param>
        /// <param name="customerPhoneNumber"></param>
        /// <param name="supplierPhoneNumber"></param>
        /// <param name="supplierFax"></param>
        /// <param name="customerEmail"></param>
        /// <param name="supplierEmail"></param>
        /// <param name="supplierWebsite"></param>
        /// <returns> A new <see cref="Models.InvoiceData"/> instance for mocking. </returns>
        public static InvoiceData InvoiceData(IEnumerable<InvoiceDataTablesItem> tables = null, DateAnnotation invoiceDate = null, DateAnnotation invoiceOrderDate = null, DateAnnotation paymentDateDue = null, InvoiceDataPaymentAmountBase paymentAmountBase = null, InvoiceDataPaymentAmountTax paymentAmountTax = null, InvoiceDataPaymentAmountTotal paymentAmountTotal = null, InvoiceDataPaymentAmountPaid paymentAmountPaid = null, InvoiceDataPaymentAmountDue paymentAmountDue = null, InvoiceDataInvoiceNumber invoiceNumber = null, InvoiceDataInvoicePurchaseOrderNumber invoicePurchaseOrderNumber = null, InvoiceDataSupplierBusinessNumber supplierBusinessNumber = null, InvoiceDataCustomerNumber customerNumber = null, InvoiceDataCustomerBusinessNumber customerBusinessNumber = null, InvoiceDataPaymentReference paymentReference = null, InvoiceDataBankAccountNumber bankAccountNumber = null, InvoiceDataSupplierVAT supplierVAT = null, InvoiceDataCustomerVAT customerVAT = null, InvoiceDataBpayBillerCode bpayBillerCode = null, InvoiceDataBpayReference bpayReference = null, InvoiceDataBankSortCode bankSortCode = null, InvoiceDataBankIban bankIban = null, InvoiceDataBankSwift bankSwift = null, InvoiceDataBankBSB bankBSB = null, InvoiceDataCustomerContactName customerContactName = null, InvoiceDataCustomerCompanyName customerCompanyName = null, InvoiceDataSupplierCompanyName supplierCompanyName = null, LocationAnnotation customerBillingAddress = null, LocationAnnotation customerDeliveryAddress = null, LocationAnnotation supplierAddress = null, InvoiceDataCustomerPhoneNumber customerPhoneNumber = null, InvoiceDataSupplierPhoneNumber supplierPhoneNumber = null, InvoiceDataSupplierFax supplierFax = null, InvoiceDataCustomerEmail customerEmail = null, InvoiceDataSupplierEmail supplierEmail = null, InvoiceDataSupplierWebsite supplierWebsite = null)
        {
            tables ??= new List<InvoiceDataTablesItem>();

            return new InvoiceData(tables?.ToList(), invoiceDate, invoiceOrderDate, paymentDateDue, paymentAmountBase, paymentAmountTax, paymentAmountTotal, paymentAmountPaid, paymentAmountDue, invoiceNumber, invoicePurchaseOrderNumber, supplierBusinessNumber, customerNumber, customerBusinessNumber, paymentReference, bankAccountNumber, supplierVAT, customerVAT, bpayBillerCode, bpayReference, bankSortCode, bankIban, bankSwift, bankBSB, customerContactName, customerCompanyName, supplierCompanyName, customerBillingAddress, customerDeliveryAddress, supplierAddress, customerPhoneNumber, supplierPhoneNumber, supplierFax, customerEmail, supplierEmail, supplierWebsite);
        }

        /// <summary> Initializes a new instance of InvoiceDataTablesItem. </summary>
        /// <param name="rows"></param>
        /// <returns> A new <see cref="Models.InvoiceDataTablesItem"/> instance for mocking. </returns>
        public static InvoiceDataTablesItem InvoiceDataTablesItem(IEnumerable<RowAnnotation> rows = null)
        {
            rows ??= new List<RowAnnotation>();

            return new InvoiceDataTablesItem(rows?.ToList());
        }

        /// <summary> Initializes a new instance of RowAnnotation. </summary>
        /// <param name="code"></param>
        /// <param name="date"></param>
        /// <param name="description"></param>
        /// <param name="unit"></param>
        /// <param name="unitPrice"></param>
        /// <param name="quantity"></param>
        /// <param name="discount"></param>
        /// <param name="baseTotal"></param>
        /// <param name="taxRate"></param>
        /// <param name="taxTotal"></param>
        /// <param name="total"></param>
        /// <param name="other"></param>
        /// <returns> A new <see cref="Models.RowAnnotation"/> instance for mocking. </returns>
        public static RowAnnotation RowAnnotation(string code = null, string date = null, string description = null, string unit = null, float? unitPrice = null, float? quantity = null, string discount = null, float? baseTotal = null, string taxRate = null, float? taxTotal = null, float? total = null, string other = null)
        {
            return new RowAnnotation(code, date, description, unit, unitPrice, quantity, discount, baseTotal, taxRate, taxTotal, total, other);
        }

        /// <summary> Initializes a new instance of ComponentsTz04ToSchemasInvoicedataPropertiesPaymentamountbaseAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsTz04ToSchemasInvoicedataPropertiesPaymentamountbaseAllof2"/> instance for mocking. </returns>
        public static ComponentsTz04ToSchemasInvoicedataPropertiesPaymentamountbaseAllof2 ComponentsTz04ToSchemasInvoicedataPropertiesPaymentamountbaseAllof2(string raw = null, string parsed = null)
        {
            return new ComponentsTz04ToSchemasInvoicedataPropertiesPaymentamountbaseAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsY49P83SchemasInvoicedataPropertiesPaymentamounttaxAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsY49P83SchemasInvoicedataPropertiesPaymentamounttaxAllof2"/> instance for mocking. </returns>
        public static ComponentsY49P83SchemasInvoicedataPropertiesPaymentamounttaxAllof2 ComponentsY49P83SchemasInvoicedataPropertiesPaymentamounttaxAllof2(string raw = null, string parsed = null)
        {
            return new ComponentsY49P83SchemasInvoicedataPropertiesPaymentamounttaxAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components15Ayv0YSchemasInvoicedataPropertiesPaymentamounttotalAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components15Ayv0YSchemasInvoicedataPropertiesPaymentamounttotalAllof2"/> instance for mocking. </returns>
        public static Components15Ayv0YSchemasInvoicedataPropertiesPaymentamounttotalAllof2 Components15Ayv0YSchemasInvoicedataPropertiesPaymentamounttotalAllof2(string raw = null, string parsed = null)
        {
            return new Components15Ayv0YSchemasInvoicedataPropertiesPaymentamounttotalAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1LdfgdeSchemasInvoicedataPropertiesPaymentamountpaidAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1LdfgdeSchemasInvoicedataPropertiesPaymentamountpaidAllof2"/> instance for mocking. </returns>
        public static Components1LdfgdeSchemasInvoicedataPropertiesPaymentamountpaidAllof2 Components1LdfgdeSchemasInvoicedataPropertiesPaymentamountpaidAllof2(string raw = null, string parsed = null)
        {
            return new Components1LdfgdeSchemasInvoicedataPropertiesPaymentamountpaidAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components14V23KqSchemasInvoicedataPropertiesPaymentamountdueAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components14V23KqSchemasInvoicedataPropertiesPaymentamountdueAllof2"/> instance for mocking. </returns>
        public static Components14V23KqSchemasInvoicedataPropertiesPaymentamountdueAllof2 Components14V23KqSchemasInvoicedataPropertiesPaymentamountdueAllof2(string raw = null, string parsed = null)
        {
            return new Components14V23KqSchemasInvoicedataPropertiesPaymentamountdueAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components7CqvqpSchemasInvoicedataPropertiesInvoicenumberAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components7CqvqpSchemasInvoicedataPropertiesInvoicenumberAllof2"/> instance for mocking. </returns>
        public static Components7CqvqpSchemasInvoicedataPropertiesInvoicenumberAllof2 Components7CqvqpSchemasInvoicedataPropertiesInvoicenumberAllof2(string raw = null, string parsed = null)
        {
            return new Components7CqvqpSchemasInvoicedataPropertiesInvoicenumberAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components55Nj82SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components55Nj82SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof2"/> instance for mocking. </returns>
        public static Components55Nj82SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof2 Components55Nj82SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof2(string raw = null, string parsed = null)
        {
            return new Components55Nj82SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsYe0TzySchemasInvoicedataPropertiesSupplierbusinessnumberAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsYe0TzySchemasInvoicedataPropertiesSupplierbusinessnumberAllof2"/> instance for mocking. </returns>
        public static ComponentsYe0TzySchemasInvoicedataPropertiesSupplierbusinessnumberAllof2 ComponentsYe0TzySchemasInvoicedataPropertiesSupplierbusinessnumberAllof2(string raw = null, string parsed = null)
        {
            return new ComponentsYe0TzySchemasInvoicedataPropertiesSupplierbusinessnumberAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components2Hu973SchemasInvoicedataPropertiesCustomernumberAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components2Hu973SchemasInvoicedataPropertiesCustomernumberAllof2"/> instance for mocking. </returns>
        public static Components2Hu973SchemasInvoicedataPropertiesCustomernumberAllof2 Components2Hu973SchemasInvoicedataPropertiesCustomernumberAllof2(string raw = null, string parsed = null)
        {
            return new Components2Hu973SchemasInvoicedataPropertiesCustomernumberAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsRft7JdSchemasInvoicedataPropertiesCustomerbusinessnumberAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsRft7JdSchemasInvoicedataPropertiesCustomerbusinessnumberAllof2"/> instance for mocking. </returns>
        public static ComponentsRft7JdSchemasInvoicedataPropertiesCustomerbusinessnumberAllof2 ComponentsRft7JdSchemasInvoicedataPropertiesCustomerbusinessnumberAllof2(string raw = null, string parsed = null)
        {
            return new ComponentsRft7JdSchemasInvoicedataPropertiesCustomerbusinessnumberAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1Wx56HlSchemasInvoicedataPropertiesPaymentreferenceAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1Wx56HlSchemasInvoicedataPropertiesPaymentreferenceAllof2"/> instance for mocking. </returns>
        public static Components1Wx56HlSchemasInvoicedataPropertiesPaymentreferenceAllof2 Components1Wx56HlSchemasInvoicedataPropertiesPaymentreferenceAllof2(string raw = null, string parsed = null)
        {
            return new Components1Wx56HlSchemasInvoicedataPropertiesPaymentreferenceAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components14Dm0XSchemasInvoicedataPropertiesBankaccountnumberAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components14Dm0XSchemasInvoicedataPropertiesBankaccountnumberAllof2"/> instance for mocking. </returns>
        public static Components14Dm0XSchemasInvoicedataPropertiesBankaccountnumberAllof2 Components14Dm0XSchemasInvoicedataPropertiesBankaccountnumberAllof2(string raw = null, string parsed = null)
        {
            return new Components14Dm0XSchemasInvoicedataPropertiesBankaccountnumberAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1Fdmi0OSchemasInvoicedataPropertiesSuppliervatAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1Fdmi0OSchemasInvoicedataPropertiesSuppliervatAllof2"/> instance for mocking. </returns>
        public static Components1Fdmi0OSchemasInvoicedataPropertiesSuppliervatAllof2 Components1Fdmi0OSchemasInvoicedataPropertiesSuppliervatAllof2(string raw = null, string parsed = null)
        {
            return new Components1Fdmi0OSchemasInvoicedataPropertiesSuppliervatAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsRsi73USchemasInvoicedataPropertiesCustomervatAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsRsi73USchemasInvoicedataPropertiesCustomervatAllof2"/> instance for mocking. </returns>
        public static ComponentsRsi73USchemasInvoicedataPropertiesCustomervatAllof2 ComponentsRsi73USchemasInvoicedataPropertiesCustomervatAllof2(string raw = null, string parsed = null)
        {
            return new ComponentsRsi73USchemasInvoicedataPropertiesCustomervatAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1Bh8NlbSchemasInvoicedataPropertiesBpaybillercodeAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1Bh8NlbSchemasInvoicedataPropertiesBpaybillercodeAllof2"/> instance for mocking. </returns>
        public static Components1Bh8NlbSchemasInvoicedataPropertiesBpaybillercodeAllof2 Components1Bh8NlbSchemasInvoicedataPropertiesBpaybillercodeAllof2(string raw = null, string parsed = null)
        {
            return new Components1Bh8NlbSchemasInvoicedataPropertiesBpaybillercodeAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1OmsnpSchemasInvoicedataPropertiesBpayreferenceAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1OmsnpSchemasInvoicedataPropertiesBpayreferenceAllof2"/> instance for mocking. </returns>
        public static Components1OmsnpSchemasInvoicedataPropertiesBpayreferenceAllof2 Components1OmsnpSchemasInvoicedataPropertiesBpayreferenceAllof2(string raw = null, string parsed = null)
        {
            return new Components1OmsnpSchemasInvoicedataPropertiesBpayreferenceAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1Rbm6P1SchemasInvoicedataPropertiesBanksortcodeAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1Rbm6P1SchemasInvoicedataPropertiesBanksortcodeAllof2"/> instance for mocking. </returns>
        public static Components1Rbm6P1SchemasInvoicedataPropertiesBanksortcodeAllof2 Components1Rbm6P1SchemasInvoicedataPropertiesBanksortcodeAllof2(string raw = null, string parsed = null)
        {
            return new Components1Rbm6P1SchemasInvoicedataPropertiesBanksortcodeAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsE6Bjv3SchemasInvoicedataPropertiesBankibanAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsE6Bjv3SchemasInvoicedataPropertiesBankibanAllof2"/> instance for mocking. </returns>
        public static ComponentsE6Bjv3SchemasInvoicedataPropertiesBankibanAllof2 ComponentsE6Bjv3SchemasInvoicedataPropertiesBankibanAllof2(string raw = null, string parsed = null)
        {
            return new ComponentsE6Bjv3SchemasInvoicedataPropertiesBankibanAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components11Zi81FSchemasInvoicedataPropertiesBankswiftAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components11Zi81FSchemasInvoicedataPropertiesBankswiftAllof2"/> instance for mocking. </returns>
        public static Components11Zi81FSchemasInvoicedataPropertiesBankswiftAllof2 Components11Zi81FSchemasInvoicedataPropertiesBankswiftAllof2(string raw = null, string parsed = null)
        {
            return new Components11Zi81FSchemasInvoicedataPropertiesBankswiftAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsUilt2MSchemasInvoicedataPropertiesBankbsbAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsUilt2MSchemasInvoicedataPropertiesBankbsbAllof2"/> instance for mocking. </returns>
        public static ComponentsUilt2MSchemasInvoicedataPropertiesBankbsbAllof2 ComponentsUilt2MSchemasInvoicedataPropertiesBankbsbAllof2(string raw = null, string parsed = null)
        {
            return new ComponentsUilt2MSchemasInvoicedataPropertiesBankbsbAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsWywi9WSchemasInvoicedataPropertiesCustomercontactnameAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsWywi9WSchemasInvoicedataPropertiesCustomercontactnameAllof2"/> instance for mocking. </returns>
        public static ComponentsWywi9WSchemasInvoicedataPropertiesCustomercontactnameAllof2 ComponentsWywi9WSchemasInvoicedataPropertiesCustomercontactnameAllof2(string raw = null, string parsed = null)
        {
            return new ComponentsWywi9WSchemasInvoicedataPropertiesCustomercontactnameAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components6DhvidSchemasInvoicedataPropertiesCustomercompanynameAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components6DhvidSchemasInvoicedataPropertiesCustomercompanynameAllof2"/> instance for mocking. </returns>
        public static Components6DhvidSchemasInvoicedataPropertiesCustomercompanynameAllof2 Components6DhvidSchemasInvoicedataPropertiesCustomercompanynameAllof2(string raw = null, string parsed = null)
        {
            return new Components6DhvidSchemasInvoicedataPropertiesCustomercompanynameAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1O4BmpySchemasInvoicedataPropertiesSuppliercompanynameAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1O4BmpySchemasInvoicedataPropertiesSuppliercompanynameAllof2"/> instance for mocking. </returns>
        public static Components1O4BmpySchemasInvoicedataPropertiesSuppliercompanynameAllof2 Components1O4BmpySchemasInvoicedataPropertiesSuppliercompanynameAllof2(string raw = null, string parsed = null)
        {
            return new Components1O4BmpySchemasInvoicedataPropertiesSuppliercompanynameAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsPs8Uo7SchemasInvoicedataPropertiesCustomerphonenumberAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsPs8Uo7SchemasInvoicedataPropertiesCustomerphonenumberAllof2"/> instance for mocking. </returns>
        public static ComponentsPs8Uo7SchemasInvoicedataPropertiesCustomerphonenumberAllof2 ComponentsPs8Uo7SchemasInvoicedataPropertiesCustomerphonenumberAllof2(string raw = null, string parsed = null)
        {
            return new ComponentsPs8Uo7SchemasInvoicedataPropertiesCustomerphonenumberAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsBvthtoSchemasInvoicedataPropertiesSupplierphonenumberAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsBvthtoSchemasInvoicedataPropertiesSupplierphonenumberAllof2"/> instance for mocking. </returns>
        public static ComponentsBvthtoSchemasInvoicedataPropertiesSupplierphonenumberAllof2 ComponentsBvthtoSchemasInvoicedataPropertiesSupplierphonenumberAllof2(string raw = null, string parsed = null)
        {
            return new ComponentsBvthtoSchemasInvoicedataPropertiesSupplierphonenumberAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1ByjheSchemasInvoicedataPropertiesSupplierfaxAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1ByjheSchemasInvoicedataPropertiesSupplierfaxAllof2"/> instance for mocking. </returns>
        public static Components1ByjheSchemasInvoicedataPropertiesSupplierfaxAllof2 Components1ByjheSchemasInvoicedataPropertiesSupplierfaxAllof2(string raw = null, string parsed = null)
        {
            return new Components1ByjheSchemasInvoicedataPropertiesSupplierfaxAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components5PwavySchemasInvoicedataPropertiesCustomeremailAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components5PwavySchemasInvoicedataPropertiesCustomeremailAllof2"/> instance for mocking. </returns>
        public static Components5PwavySchemasInvoicedataPropertiesCustomeremailAllof2 Components5PwavySchemasInvoicedataPropertiesCustomeremailAllof2(string raw = null, string parsed = null)
        {
            return new Components5PwavySchemasInvoicedataPropertiesCustomeremailAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsVyrnzuSchemasInvoicedataPropertiesSupplieremailAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsVyrnzuSchemasInvoicedataPropertiesSupplieremailAllof2"/> instance for mocking. </returns>
        public static ComponentsVyrnzuSchemasInvoicedataPropertiesSupplieremailAllof2 ComponentsVyrnzuSchemasInvoicedataPropertiesSupplieremailAllof2(string raw = null, string parsed = null)
        {
            return new ComponentsVyrnzuSchemasInvoicedataPropertiesSupplieremailAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components179Pdz6SchemasInvoicedataPropertiesSupplierwebsiteAllof2. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components179Pdz6SchemasInvoicedataPropertiesSupplierwebsiteAllof2"/> instance for mocking. </returns>
        public static Components179Pdz6SchemasInvoicedataPropertiesSupplierwebsiteAllof2 Components179Pdz6SchemasInvoicedataPropertiesSupplierwebsiteAllof2(string raw = null, string parsed = null)
        {
            return new Components179Pdz6SchemasInvoicedataPropertiesSupplierwebsiteAllof2(raw, parsed);
        }

        /// <summary> Initializes a new instance of InvoiceMeta. </summary>
        /// <param name="identifier"> Unique identifier for the document. If creating a document and left blank, one will be automatically generated. </param>
        /// <param name="fileName"> Optional filename of the file. </param>
        /// <param name="ready"> If true, the document has finished processing. Particularly useful if an endpoint request specified wait=False, when polling use this variable to determine when to stop polling. </param>
        /// <param name="readyDt"> The datetime when the document was ready. </param>
        /// <param name="failed"> If true, some exception was raised during processing. Check the &apos;error&apos; field of the main return object. </param>
        /// <param name="expiryTime"> The date/time in ISO-8601 format when the document will be automatically deleted.  Defaults to no expiry. </param>
        /// <param name="reviewUrl"> Signed URL (valid for 60 minutes) to access the invoice review tool. </param>
        /// <returns> A new <see cref="Models.InvoiceMeta"/> instance for mocking. </returns>
        public static InvoiceMeta InvoiceMeta(string identifier = null, string fileName = null, bool ready = default, DateTimeOffset? readyDt = null, bool failed = default, string expiryTime = null, string reviewUrl = null)
        {
            return new InvoiceMeta(identifier, fileName, ready, readyDt, failed, expiryTime, reviewUrl);
        }

        /// <summary> Initializes a new instance of Components17Ashz6SchemasInvoicePropertiesMetaAllof1. </summary>
        /// <param name="reviewUrl"> Signed URL (valid for 60 minutes) to access the invoice review tool. </param>
        /// <returns> A new <see cref="Models.Components17Ashz6SchemasInvoicePropertiesMetaAllof1"/> instance for mocking. </returns>
        public static Components17Ashz6SchemasInvoicePropertiesMetaAllof1 Components17Ashz6SchemasInvoicePropertiesMetaAllof1(string reviewUrl = null)
        {
            return new Components17Ashz6SchemasInvoicePropertiesMetaAllof1(reviewUrl);
        }

        /// <summary> Initializes a new instance of PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of indexes in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema(int? count = null, string next = null, string previous = null, IEnumerable<User> results = null)
        {
            results ??= new List<User>();

            return new PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of User. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="email"></param>
        /// <returns> A new <see cref="Models.User"/> instance for mocking. </returns>
        public static User User(string id = null, string name = null, string username = null, string email = null)
        {
            return new User(id, name, username, email);
        }

        /// <summary> Initializes a new instance of PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="email"></param>
        /// <param name="apiKey"> API key used to authenticate for future requests.  This key is only retrievable at the initial creation of the user. </param>
        /// <returns> A new <see cref="Models.PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema(string id = null, string name = null, string username = null, string email = null, string apiKey = null)
        {
            return new PathsTop5ZkUsersPostResponses201ContentApplicationJsonSchema(id, name, username, email, apiKey);
        }

        /// <summary> Initializes a new instance of Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1. </summary>
        /// <param name="apiKey"> API key used to authenticate for future requests.  This key is only retrievable at the initial creation of the user. </param>
        /// <returns> A new <see cref="Models.Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1"/> instance for mocking. </returns>
        public static Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1 Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1(string apiKey = null)
        {
            return new Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1(apiKey);
        }
    }
}
