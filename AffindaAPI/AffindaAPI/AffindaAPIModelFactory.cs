// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Affinda.API.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AffindaAPIModelFactory
    {
        /// <summary> Initializes a new instance of GetAllDocumentsResults. </summary>
        /// <param name="count"> Number of documents in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.GetAllDocumentsResults"/> instance for mocking. </returns>
        public static GetAllDocumentsResults GetAllDocumentsResults(int? count = null, string next = null, string previous = null, IEnumerable<Meta> results = null)
        {
            results ??= new List<Meta>();

            return new GetAllDocumentsResults(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Meta. </summary>
        /// <param name="identifier"> Unique identifier for the document. If creating a document and left blank, one will be automatically generated. </param>
        /// <param name="fileName"> Optional filename of the file. </param>
        /// <param name="ready"> If true, the document has finished processing. Particularly useful if an endpoint request specified wait=False, when polling use this variable to determine when to stop polling. </param>
        /// <param name="readyDt"> The datetime when the document was ready. </param>
        /// <param name="failed"> If true, some exception was raised during processing. Check the &apos;error&apos; field of the main return object. </param>
        /// <param name="expiryTime"> The date/time in ISO-8601 format when the document will be automatically deleted.  Defaults to no expiry. </param>
        /// <param name="language"> The document&apos;s language. </param>
        /// <param name="pdf"> The URL to the document&apos;s pdf (if the uploaded document is not already pdf, it&apos;s converted to pdf as part of the parsing process). </param>
        /// <param name="parentDocument"> If this document is part of a splitted document, this attribute points to the original document that this document is splitted from. </param>
        /// <param name="childDocuments"> If this document has been splitted into a number of child documents, this attribute points to those child documents. </param>
        /// <param name="pages"> The document&apos;s pages. </param>
        /// <param name="isVerified"> This is true if the &quot;confirm&quot; button has been clicked in the Affinda validation tool. </param>
        /// <param name="reviewUrl"> Signed URL (valid for 60 minutes) to access the validation tool.  Not applicable for documents types such a resumes. </param>
        /// <param name="ocrConfidence"> The overall confidence in the conversion of image to text.  (only applicable for images or PDF documents without a text layer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.Meta"/> instance for mocking. </returns>
        public static Meta Meta(string identifier = null, string fileName = null, bool ready = default, DateTimeOffset? readyDt = null, bool failed = default, string expiryTime = null, string language = null, string pdf = null, SplitRelation parentDocument = null, IEnumerable<SplitRelation> childDocuments = null, IEnumerable<PageMeta> pages = null, bool? isVerified = null, string reviewUrl = null, float? ocrConfidence = null, IReadOnlyDictionary<string, object> additionalProperties = null)
        {
            childDocuments ??= new List<SplitRelation>();
            pages ??= new List<PageMeta>();
            additionalProperties ??= new Dictionary<string, object>();

            return new Meta(identifier, fileName, ready, readyDt, failed, expiryTime, language, pdf, parentDocument, childDocuments?.ToList(), pages?.ToList(), isVerified, reviewUrl, ocrConfidence, additionalProperties);
        }

        /// <summary> Initializes a new instance of SplitRelation. </summary>
        /// <param name="identifier"> Unique identifier for the document. If creating a document and left blank, one will be automatically generated. </param>
        /// <returns> A new <see cref="Models.SplitRelation"/> instance for mocking. </returns>
        public static SplitRelation SplitRelation(string identifier = null)
        {
            return new SplitRelation(identifier);
        }

        /// <summary> Initializes a new instance of PageMeta. </summary>
        /// <param name="id"></param>
        /// <param name="pageIndex"> Page number within the document, starts from 0. </param>
        /// <param name="image"> The URL to the image of the page. </param>
        /// <param name="height"> Height of the page&apos;s image in px. </param>
        /// <param name="width"> Width of the page&apos;s image in px. </param>
        /// <param name="rotation"> The degree of rotation applied to the page. Greater than 0 indicates clockwise rotation. Less than 0 indicates counter-clockwise rotation. </param>
        /// <returns> A new <see cref="Models.PageMeta"/> instance for mocking. </returns>
        public static PageMeta PageMeta(int? id = null, int? pageIndex = null, string image = null, float? height = null, float? width = null, int? rotation = null)
        {
            return new PageMeta(id, pageIndex, image, height, width, rotation);
        }

        /// <summary> Initializes a new instance of RequestError. </summary>
        /// <param name="type"></param>
        /// <param name="errors"></param>
        /// <returns> A new <see cref="Models.RequestError"/> instance for mocking. </returns>
        public static RequestError RequestError(string type = null, IEnumerable<RequestErrorErrorsItem> errors = null)
        {
            errors ??= new List<RequestErrorErrorsItem>();

            return new RequestError(type, errors?.ToList());
        }

        /// <summary> Initializes a new instance of RequestErrorErrorsItem. </summary>
        /// <param name="attr"></param>
        /// <param name="code"></param>
        /// <param name="detail"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/> or <paramref name="detail"/> is null. </exception>
        /// <returns> A new <see cref="Models.RequestErrorErrorsItem"/> instance for mocking. </returns>
        public static RequestErrorErrorsItem RequestErrorErrorsItem(string attr = null, string code = null, string detail = null)
        {
            if (code == null)
            {
                throw new ArgumentNullException(nameof(code));
            }
            if (detail == null)
            {
                throw new ArgumentNullException(nameof(detail));
            }

            return new RequestErrorErrorsItem(attr, code, detail);
        }

        /// <summary> Initializes a new instance of Resume. </summary>
        /// <param name="data"> A JSON-encoded string of the `ResumeData` object. </param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="meta"/> or <paramref name="error"/> is null. </exception>
        /// <returns> A new <see cref="Models.Resume"/> instance for mocking. </returns>
        public static Resume Resume(ResumeData data = null, Meta meta = null, Error error = null)
        {
            if (meta == null)
            {
                throw new ArgumentNullException(nameof(meta));
            }
            if (error == null)
            {
                throw new ArgumentNullException(nameof(error));
            }

            return new Resume(data, meta, error);
        }

        /// <summary> Initializes a new instance of ResumeData. </summary>
        /// <param name="name"></param>
        /// <param name="phoneNumbers"></param>
        /// <param name="websites"></param>
        /// <param name="emails"></param>
        /// <param name="dateOfBirth"></param>
        /// <param name="location"></param>
        /// <param name="objective"></param>
        /// <param name="languages"></param>
        /// <param name="languageCodes"></param>
        /// <param name="summary"></param>
        /// <param name="totalYearsExperience"></param>
        /// <param name="headShot"> base64 encoded string. </param>
        /// <param name="education"></param>
        /// <param name="profession"> Prediction of the candidate&apos;s profession based on recent work experience. </param>
        /// <param name="linkedin"> Linkedin account associated with the candidate. </param>
        /// <param name="workExperience"></param>
        /// <param name="skills"></param>
        /// <param name="certifications"></param>
        /// <param name="publications"></param>
        /// <param name="referees"></param>
        /// <param name="sections"></param>
        /// <param name="isResumeProbability"> Probability that the given document is a resume. Values below 30 suggest that the document is not a resume. </param>
        /// <param name="rawText"> All of the raw text of the parsed resume, example is shortened for readiblity. </param>
        /// <returns> A new <see cref="Models.ResumeData"/> instance for mocking. </returns>
        public static ResumeData ResumeData(ResumeDataName name = null, IEnumerable<string> phoneNumbers = null, IEnumerable<string> websites = null, IEnumerable<string> emails = null, string dateOfBirth = null, Location location = null, string objective = null, IEnumerable<string> languages = null, IEnumerable<string> languageCodes = null, string summary = null, int? totalYearsExperience = null, byte[] headShot = null, IEnumerable<Education> education = null, string profession = null, string linkedin = null, IEnumerable<ResumeDataWorkExperienceItem> workExperience = null, IEnumerable<ResumeDataSkillsItem> skills = null, IEnumerable<string> certifications = null, IEnumerable<string> publications = null, IEnumerable<ResumeDataRefereesItem> referees = null, IEnumerable<ResumeDataSectionsItem> sections = null, int? isResumeProbability = null, string rawText = null)
        {
            phoneNumbers ??= new List<string>();
            websites ??= new List<string>();
            emails ??= new List<string>();
            languages ??= new List<string>();
            languageCodes ??= new List<string>();
            education ??= new List<Education>();
            workExperience ??= new List<ResumeDataWorkExperienceItem>();
            skills ??= new List<ResumeDataSkillsItem>();
            certifications ??= new List<string>();
            publications ??= new List<string>();
            referees ??= new List<ResumeDataRefereesItem>();
            sections ??= new List<ResumeDataSectionsItem>();

            return new ResumeData(name, phoneNumbers?.ToList(), websites?.ToList(), emails?.ToList(), dateOfBirth, location, objective, languages?.ToList(), languageCodes?.ToList(), summary, totalYearsExperience, headShot, education?.ToList(), profession, linkedin, workExperience?.ToList(), skills?.ToList(), certifications?.ToList(), publications?.ToList(), referees?.ToList(), sections?.ToList(), isResumeProbability, rawText);
        }

        /// <summary> Initializes a new instance of Location. </summary>
        /// <param name="formatted"></param>
        /// <param name="postalCode"></param>
        /// <param name="state"></param>
        /// <param name="country"></param>
        /// <param name="countryCode"> Two letter country code (ISO 3166-1 alpha-2). </param>
        /// <param name="rawInput"></param>
        /// <param name="streetNumber"></param>
        /// <param name="street"></param>
        /// <param name="apartmentNumber"></param>
        /// <param name="city"></param>
        /// <returns> A new <see cref="Models.Location"/> instance for mocking. </returns>
        public static Location Location(string formatted = null, string postalCode = null, string state = null, string country = null, string countryCode = null, string rawInput = null, string streetNumber = null, string street = null, string apartmentNumber = null, string city = null)
        {
            return new Location(formatted, postalCode, state, country, countryCode, rawInput, streetNumber, street, apartmentNumber, city);
        }

        /// <summary> Initializes a new instance of Accreditation. </summary>
        /// <param name="education"></param>
        /// <param name="inputStr"></param>
        /// <param name="matchStr"></param>
        /// <param name="educationLevel"></param>
        /// <returns> A new <see cref="Models.Accreditation"/> instance for mocking. </returns>
        public static Accreditation Accreditation(string education = null, string inputStr = null, string matchStr = null, string educationLevel = null)
        {
            return new Accreditation(education, inputStr, matchStr, educationLevel);
        }

        /// <summary> Initializes a new instance of ResumeDataWorkExperienceItem. </summary>
        /// <param name="id"></param>
        /// <param name="jobTitle"></param>
        /// <param name="socCode"></param>
        /// <param name="socName"></param>
        /// <param name="organization"></param>
        /// <param name="industry"></param>
        /// <param name="location"></param>
        /// <param name="jobDescription"></param>
        /// <param name="dates"></param>
        /// <param name="occupation"></param>
        /// <returns> A new <see cref="Models.ResumeDataWorkExperienceItem"/> instance for mocking. </returns>
        public static ResumeDataWorkExperienceItem ResumeDataWorkExperienceItem(int? id = null, string jobTitle = null, string socCode = null, string socName = null, string organization = null, string industry = null, Location location = null, string jobDescription = null, ResumeDataWorkExperienceItemDates dates = null, ResumeDataWorkExperienceItemOccupation occupation = null)
        {
            return new ResumeDataWorkExperienceItem(id, jobTitle, socCode, socName, organization, industry, location, jobDescription, dates, occupation);
        }

        /// <summary> Initializes a new instance of ResumeDataWorkExperienceItemOccupation. </summary>
        /// <param name="jobTitle"> The raw (not normalized) job title pulled from the work experience entry. </param>
        /// <param name="jobTitleNormalized"> Mapped onto the EMSI job title taxonomy if a sufficiently close match exists. </param>
        /// <param name="managementLevel"></param>
        /// <param name="classification"></param>
        /// <returns> A new <see cref="Models.ResumeDataWorkExperienceItemOccupation"/> instance for mocking. </returns>
        public static ResumeDataWorkExperienceItemOccupation ResumeDataWorkExperienceItemOccupation(string jobTitle = null, string jobTitleNormalized = null, ManagementLevel? managementLevel = null, Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification classification = null)
        {
            return new ResumeDataWorkExperienceItemOccupation(jobTitle, jobTitleNormalized, managementLevel, classification);
        }

        /// <summary> Initializes a new instance of Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification. </summary>
        /// <param name="title"> SOC2020 classification for this job title. </param>
        /// <param name="minorGroup"> SOC2020 minor group. </param>
        /// <param name="subMajorGroup"> SOC2020 sub major group. </param>
        /// <param name="majorGroup"> SOC2020 major group. </param>
        /// <param name="socCode"> The 4 digit code representing the SOC2020 classification for this job title. </param>
        /// <returns> A new <see cref="Models.Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification"/> instance for mocking. </returns>
        public static Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification(string title = null, string minorGroup = null, string subMajorGroup = null, string majorGroup = null, int? socCode = null)
        {
            return new Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification(title, minorGroup, subMajorGroup, majorGroup, socCode);
        }

        /// <summary> Initializes a new instance of ResumeDataSkillsItem. </summary>
        /// <param name="id"></param>
        /// <param name="emsiId"> EMSI id of this skill. </param>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="count"></param>
        /// <param name="weighting"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Models.ResumeDataSkillsItem"/> instance for mocking. </returns>
        public static ResumeDataSkillsItem ResumeDataSkillsItem(int? id = null, string emsiId = null, string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, int? count = null, float? weighting = null, IEnumerable<ResumeDataSkillsPropertiesItemsItem> sources = null)
        {
            sources ??= new List<ResumeDataSkillsPropertiesItemsItem>();

            return new ResumeDataSkillsItem(id, emsiId, name, lastUsed, numberOfMonths, type, count, weighting, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeDataSkillsPropertiesItemsItem. </summary>
        /// <param name="section"></param>
        /// <param name="position"> If this skill is extracted from a &quot;workExperience&quot; section, the &quot;position&quot; is the index of the work experience where this skill is found, with 0 being the first work experience, 1 being the second work experience, and so on. </param>
        /// <param name="workExperienceId"> If this skill is extracted from a &quot;workExperience&quot; section, the &quot;workExperienceId&quot; is the id of the work experience where this skill is found. </param>
        /// <returns> A new <see cref="Models.ResumeDataSkillsPropertiesItemsItem"/> instance for mocking. </returns>
        public static ResumeDataSkillsPropertiesItemsItem ResumeDataSkillsPropertiesItemsItem(string section = null, int? position = null, int? workExperienceId = null)
        {
            return new ResumeDataSkillsPropertiesItemsItem(section, position, workExperienceId);
        }

        /// <summary> Initializes a new instance of ResumeDataSectionsItem. </summary>
        /// <param name="sectionType"></param>
        /// <param name="bbox"></param>
        /// <param name="pageIndex"></param>
        /// <param name="text"></param>
        /// <returns> A new <see cref="Models.ResumeDataSectionsItem"/> instance for mocking. </returns>
        public static ResumeDataSectionsItem ResumeDataSectionsItem(string sectionType = null, IEnumerable<float> bbox = null, int? pageIndex = null, string text = null)
        {
            bbox ??= new List<float>();

            return new ResumeDataSectionsItem(sectionType, bbox?.ToList(), pageIndex, text);
        }

        /// <summary> Initializes a new instance of Error. </summary>
        /// <param name="errorCode"></param>
        /// <param name="errorDetail"></param>
        /// <returns> A new <see cref="Models.Error"/> instance for mocking. </returns>
        public static Error Error(string errorCode = null, string errorDetail = null)
        {
            return new Error(errorCode, errorDetail);
        }

        /// <summary> Initializes a new instance of RedactedResume. </summary>
        /// <param name="data"></param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="meta"/> or <paramref name="error"/> is null. </exception>
        /// <returns> A new <see cref="Models.RedactedResume"/> instance for mocking. </returns>
        public static RedactedResume RedactedResume(RedactedResumeData data = null, Meta meta = null, Error error = null)
        {
            if (meta == null)
            {
                throw new ArgumentNullException(nameof(meta));
            }
            if (error == null)
            {
                throw new ArgumentNullException(nameof(error));
            }

            return new RedactedResume(data, meta, error);
        }

        /// <summary> Initializes a new instance of RedactedResumeData. </summary>
        /// <param name="redactedPdf"> URL to redacted PDF. </param>
        /// <returns> A new <see cref="Models.RedactedResumeData"/> instance for mocking. </returns>
        public static RedactedResumeData RedactedResumeData(string redactedPdf = null)
        {
            return new RedactedResumeData(redactedPdf);
        }

        /// <summary> Initializes a new instance of ResumeSearch. </summary>
        /// <param name="count"> Total number of results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="parameters"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.ResumeSearch"/> instance for mocking. </returns>
        public static ResumeSearch ResumeSearch(int? count = null, string next = null, string previous = null, ResumeSearchParameters parameters = null, IEnumerable<ResumeSearchResult> results = null)
        {
            results ??= new List<ResumeSearchResult>();

            return new ResumeSearch(count, next, previous, parameters, results?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchResult. </summary>
        /// <param name="identifier"> Unique identifier for the document. If creating a document and left blank, one will be automatically generated. </param>
        /// <param name="score"></param>
        /// <param name="pdf"></param>
        /// <param name="name"></param>
        /// <param name="jobTitle"></param>
        /// <param name="managementLevel"></param>
        /// <param name="experience"></param>
        /// <param name="skills"></param>
        /// <param name="languages"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="searchExpression"></param>
        /// <returns> A new <see cref="Models.ResumeSearchResult"/> instance for mocking. </returns>
        public static ResumeSearchResult ResumeSearchResult(string identifier = null, float score = default, string pdf = null, string name = null, JobTitleSearchScoreComponent jobTitle = null, ManagementLevelSearchScoreComponent managementLevel = null, ExperienceSearchScoreComponent experience = null, SkillsSearchScoreComponent skills = null, LanguagesSearchScoreComponent languages = null, LocationSearchScoreComponent location = null, EducationSearchScoreComponent education = null, OccupationGroupSearchScoreComponent occupationGroup = null, SearchExpressionSearchScoreComponent searchExpression = null)
        {
            return new ResumeSearchResult(identifier, score, pdf, name, jobTitle, managementLevel, experience, skills, languages, location, education, occupationGroup, searchExpression);
        }

        /// <summary> Initializes a new instance of JobTitleSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.JobTitleSearchScoreComponent"/> instance for mocking. </returns>
        public static JobTitleSearchScoreComponent JobTitleSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new JobTitleSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of ManagementLevelSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.ManagementLevelSearchScoreComponent"/> instance for mocking. </returns>
        public static ManagementLevelSearchScoreComponent ManagementLevelSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new ManagementLevelSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of ExperienceSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.ExperienceSearchScoreComponent"/> instance for mocking. </returns>
        public static ExperienceSearchScoreComponent ExperienceSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new ExperienceSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of SkillsSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.SkillsSearchScoreComponent"/> instance for mocking. </returns>
        public static SkillsSearchScoreComponent SkillsSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new SkillsSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of LanguagesSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.LanguagesSearchScoreComponent"/> instance for mocking. </returns>
        public static LanguagesSearchScoreComponent LanguagesSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new LanguagesSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of LocationSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.LocationSearchScoreComponent"/> instance for mocking. </returns>
        public static LocationSearchScoreComponent LocationSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new LocationSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of EducationSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.EducationSearchScoreComponent"/> instance for mocking. </returns>
        public static EducationSearchScoreComponent EducationSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new EducationSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of OccupationGroupSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.OccupationGroupSearchScoreComponent"/> instance for mocking. </returns>
        public static OccupationGroupSearchScoreComponent OccupationGroupSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new OccupationGroupSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of SearchExpressionSearchScoreComponent. </summary>
        /// <param name="label"></param>
        /// <param name="value"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.SearchExpressionSearchScoreComponent"/> instance for mocking. </returns>
        public static SearchExpressionSearchScoreComponent SearchExpressionSearchScoreComponent(string label = null, string value = null, float? score = null)
        {
            return new SearchExpressionSearchScoreComponent(label, value, score);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetail. </summary>
        /// <param name="jobTitle"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="skills"></param>
        /// <param name="experience"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="languages"></param>
        /// <param name="managementLevel"></param>
        /// <param name="searchExpression"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetail"/> instance for mocking. </returns>
        public static ResumeSearchDetail ResumeSearchDetail(ResumeSearchDetailJobTitle jobTitle = null, ResumeSearchDetailLocation location = null, ResumeSearchDetailEducation education = null, ResumeSearchDetailSkills skills = null, ResumeSearchDetailExperience experience = null, ResumeSearchDetailOccupationGroup occupationGroup = null, ResumeSearchDetailLanguages languages = null, ResumeSearchDetailManagementLevel managementLevel = null, ResumeSearchDetailSearchExpression searchExpression = null)
        {
            return new ResumeSearchDetail(jobTitle, location, education, skills, experience, occupationGroup, languages, managementLevel, searchExpression);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailJobTitle. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailJobTitle"/> instance for mocking. </returns>
        public static ResumeSearchDetailJobTitle ResumeSearchDetailJobTitle(IEnumerable<string> missing = null, IEnumerable<ResumeSearchDetailJobTitleValueItem> value = null)
        {
            missing ??= new List<string>();
            value ??= new List<ResumeSearchDetailJobTitleValueItem>();

            return new ResumeSearchDetailJobTitle(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailJobTitleValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="companyName"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailJobTitleValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailJobTitleValueItem ResumeSearchDetailJobTitleValueItem(string name = null, string startDate = null, string endDate = null, string companyName = null, bool? match = null)
        {
            return new ResumeSearchDetailJobTitleValueItem(name, startDate, endDate, companyName, match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailLocation. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailLocation"/> instance for mocking. </returns>
        public static ResumeSearchDetailLocation ResumeSearchDetailLocation(IEnumerable<ResumeSearchParametersLocation> missing = null, ResumeSearchDetailLocationValue value = null)
        {
            missing ??= new List<ResumeSearchParametersLocation>();

            return new ResumeSearchDetailLocation(missing?.ToList(), value);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailEducation. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailEducation"/> instance for mocking. </returns>
        public static ResumeSearchDetailEducation ResumeSearchDetailEducation(ResumeSearchDetailEducationMissing missing = null, IEnumerable<ResumeSearchDetailEducationValueItem> value = null)
        {
            value ??= new List<ResumeSearchDetailEducationValueItem>();

            return new ResumeSearchDetailEducation(missing, value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailEducationMissing. </summary>
        /// <param name="degrees"></param>
        /// <param name="highestDegreeTypes"></param>
        /// <param name="institutions"></param>
        /// <param name="currentStudent"></param>
        /// <param name="recentGraduate"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailEducationMissing"/> instance for mocking. </returns>
        public static ResumeSearchDetailEducationMissing ResumeSearchDetailEducationMissing(IEnumerable<string> degrees = null, IEnumerable<string> highestDegreeTypes = null, IEnumerable<string> institutions = null, bool? currentStudent = null, bool? recentGraduate = null)
        {
            degrees ??= new List<string>();
            highestDegreeTypes ??= new List<string>();
            institutions ??= new List<string>();

            return new ResumeSearchDetailEducationMissing(degrees?.ToList(), highestDegreeTypes?.ToList(), institutions?.ToList(), currentStudent, recentGraduate);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailSkills. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailSkills"/> instance for mocking. </returns>
        public static ResumeSearchDetailSkills ResumeSearchDetailSkills(IEnumerable<ResumeSearchParametersSkill> missing = null, IEnumerable<ResumeSearchDetailSkillsValueItem> value = null)
        {
            missing ??= new List<ResumeSearchParametersSkill>();
            value ??= new List<ResumeSearchDetailSkillsValueItem>();

            return new ResumeSearchDetailSkills(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailSkillsValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="sources"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailSkillsValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailSkillsValueItem ResumeSearchDetailSkillsValueItem(string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, IEnumerable<ResumeSkillSourcesItem> sources = null, bool? match = null)
        {
            sources ??= new List<ResumeSkillSourcesItem>();

            return new ResumeSearchDetailSkillsValueItem(name, lastUsed, numberOfMonths, type, sources?.ToList(), match);
        }

        /// <summary> Initializes a new instance of ResumeSkill. </summary>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Models.ResumeSkill"/> instance for mocking. </returns>
        public static ResumeSkill ResumeSkill(string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, IEnumerable<ResumeSkillSourcesItem> sources = null)
        {
            sources ??= new List<ResumeSkillSourcesItem>();

            return new ResumeSkill(name, lastUsed, numberOfMonths, type, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSkillSourcesItem. </summary>
        /// <param name="section"></param>
        /// <param name="position"></param>
        /// <returns> A new <see cref="Models.ResumeSkillSourcesItem"/> instance for mocking. </returns>
        public static ResumeSkillSourcesItem ResumeSkillSourcesItem(ResumeSkillSourcesItemSection? section = null, int? position = null)
        {
            return new ResumeSkillSourcesItem(section, position);
        }

        /// <summary> Initializes a new instance of ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1. </summary>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1"/> instance for mocking. </returns>
        public static ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1 ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1(bool? match = null)
        {
            return new ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1(match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailExperience. </summary>
        /// <param name="years"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailExperience"/> instance for mocking. </returns>
        public static ResumeSearchDetailExperience ResumeSearchDetailExperience(int? years = null, bool? match = null)
        {
            return new ResumeSearchDetailExperience(years, match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailOccupationGroup. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailOccupationGroup"/> instance for mocking. </returns>
        public static ResumeSearchDetailOccupationGroup ResumeSearchDetailOccupationGroup(IEnumerable<int> missing = null, IEnumerable<ResumeSearchDetailOccupationGroupValueItem> value = null)
        {
            missing ??= new List<int>();
            value ??= new List<ResumeSearchDetailOccupationGroupValueItem>();

            return new ResumeSearchDetailOccupationGroup(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailOccupationGroupValueItem. </summary>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="children"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailOccupationGroupValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailOccupationGroupValueItem ResumeSearchDetailOccupationGroupValueItem(int code = default, string name = null, IEnumerable<OccupationGroup> children = null, bool? match = null)
        {
            children ??= new List<OccupationGroup>();

            return new ResumeSearchDetailOccupationGroupValueItem(code, name, children?.ToList(), match);
        }

        /// <summary> Initializes a new instance of OccupationGroup. </summary>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="children"></param>
        /// <returns> A new <see cref="Models.OccupationGroup"/> instance for mocking. </returns>
        public static OccupationGroup OccupationGroup(int code = default, string name = null, IEnumerable<OccupationGroup> children = null)
        {
            children ??= new List<OccupationGroup>();

            return new OccupationGroup(code, name, children?.ToList());
        }

        /// <summary> Initializes a new instance of ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1. </summary>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1"/> instance for mocking. </returns>
        public static ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1 ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1(bool? match = null)
        {
            return new ComponentsK7P1F5SchemasResumesearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1(match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailLanguages. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailLanguages"/> instance for mocking. </returns>
        public static ResumeSearchDetailLanguages ResumeSearchDetailLanguages(IEnumerable<ResumeSearchParametersSkill> missing = null, IEnumerable<ResumeSearchDetailLanguagesValueItem> value = null)
        {
            missing ??= new List<ResumeSearchParametersSkill>();
            value ??= new List<ResumeSearchDetailLanguagesValueItem>();

            return new ResumeSearchDetailLanguages(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailLanguagesValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="sources"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailLanguagesValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailLanguagesValueItem ResumeSearchDetailLanguagesValueItem(string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, IEnumerable<ResumeSkillSourcesItem> sources = null, bool? match = null)
        {
            sources ??= new List<ResumeSkillSourcesItem>();

            return new ResumeSearchDetailLanguagesValueItem(name, lastUsed, numberOfMonths, type, sources?.ToList(), match);
        }

        /// <summary> Initializes a new instance of Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1. </summary>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1"/> instance for mocking. </returns>
        public static Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1 Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1(bool? match = null)
        {
            return new Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1(match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailManagementLevel. </summary>
        /// <param name="level"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailManagementLevel"/> instance for mocking. </returns>
        public static ResumeSearchDetailManagementLevel ResumeSearchDetailManagementLevel(ManagementLevel? level = null, bool? match = null)
        {
            return new ResumeSearchDetailManagementLevel(level, match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailSearchExpression. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailSearchExpression"/> instance for mocking. </returns>
        public static ResumeSearchDetailSearchExpression ResumeSearchDetailSearchExpression(IEnumerable<string> missing = null, IEnumerable<string> value = null)
        {
            missing ??= new List<string>();
            value ??= new List<string>();

            return new ResumeSearchDetailSearchExpression(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchMatch. </summary>
        /// <param name="score"> The matching score between the provided resume and job description. </param>
        /// <param name="details"></param>
        /// <returns> A new <see cref="Models.ResumeSearchMatch"/> instance for mocking. </returns>
        public static ResumeSearchMatch ResumeSearchMatch(float? score = null, ResumeSearchMatchDetails details = null)
        {
            return new ResumeSearchMatch(score, details);
        }

        /// <summary> Initializes a new instance of ResumeSearchMatchDetails. </summary>
        /// <param name="jobTitle"></param>
        /// <param name="managementLevel"></param>
        /// <param name="experience"></param>
        /// <param name="skills"></param>
        /// <param name="languages"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="searchExpression"></param>
        /// <returns> A new <see cref="Models.ResumeSearchMatchDetails"/> instance for mocking. </returns>
        public static ResumeSearchMatchDetails ResumeSearchMatchDetails(JobTitleSearchScoreComponent jobTitle = null, ManagementLevelSearchScoreComponent managementLevel = null, ExperienceSearchScoreComponent experience = null, SkillsSearchScoreComponent skills = null, LanguagesSearchScoreComponent languages = null, LocationSearchScoreComponent location = null, EducationSearchScoreComponent education = null, OccupationGroupSearchScoreComponent occupationGroup = null, SearchExpressionSearchScoreComponent searchExpression = null)
        {
            return new ResumeSearchMatchDetails(jobTitle, managementLevel, experience, skills, languages, location, education, occupationGroup, searchExpression);
        }

        /// <summary> Initializes a new instance of ResumeSearchConfig. </summary>
        /// <param name="allowPdfDownload"></param>
        /// <param name="maxResults"> Maximum number of results that can be returned. Setting to &quot;null&quot; means no limitation. </param>
        /// <param name="displayJobTitle"></param>
        /// <param name="displayLocation"></param>
        /// <param name="displayYearsExperience"></param>
        /// <param name="displayOccupationGroup"></param>
        /// <param name="displayEducation"></param>
        /// <param name="displaySkills"></param>
        /// <param name="displayLanguages"></param>
        /// <param name="displayManagementLevel"></param>
        /// <param name="displayKeywords"></param>
        /// <param name="weightJobTitle"></param>
        /// <param name="weightLocation"></param>
        /// <param name="weightYearsExperience"></param>
        /// <param name="weightOccupationGroup"></param>
        /// <param name="weightEducation"></param>
        /// <param name="weightSkills"></param>
        /// <param name="weightLanguages"></param>
        /// <param name="weightManagementLevel"></param>
        /// <param name="weightKeywords"></param>
        /// <param name="indices"> List of index names. </param>
        /// <param name="searchToolTheme"> Customize the theme of the embeded search tool. </param>
        /// <param name="userId"> ID of the logged in user. </param>
        /// <param name="username"> Username of the logged in user. </param>
        /// <returns> A new <see cref="Models.ResumeSearchConfig"/> instance for mocking. </returns>
        public static ResumeSearchConfig ResumeSearchConfig(bool? allowPdfDownload = null, int? maxResults = null, bool? displayJobTitle = null, bool? displayLocation = null, bool? displayYearsExperience = null, bool? displayOccupationGroup = null, bool? displayEducation = null, bool? displaySkills = null, bool? displayLanguages = null, bool? displayManagementLevel = null, bool? displayKeywords = null, float? weightJobTitle = null, float? weightLocation = null, float? weightYearsExperience = null, float? weightOccupationGroup = null, float? weightEducation = null, float? weightSkills = null, float? weightLanguages = null, float? weightManagementLevel = null, float? weightKeywords = null, IEnumerable<string> indices = null, IDictionary<string, object> searchToolTheme = null, int? userId = null, string username = null)
        {
            indices ??= new List<string>();
            searchToolTheme ??= new Dictionary<string, object>();

            return new ResumeSearchConfig(allowPdfDownload, maxResults, displayJobTitle, displayLocation, displayYearsExperience, displayOccupationGroup, displayEducation, displaySkills, displayLanguages, displayManagementLevel, displayKeywords, weightJobTitle, weightLocation, weightYearsExperience, weightOccupationGroup, weightEducation, weightSkills, weightLanguages, weightManagementLevel, weightKeywords, indices?.ToList(), searchToolTheme, userId, username);
        }

        /// <summary> Initializes a new instance of ResumeSearchEmbed. </summary>
        /// <param name="url"> The signed URL for the embedable search tool. </param>
        /// <returns> A new <see cref="Models.ResumeSearchEmbed"/> instance for mocking. </returns>
        public static ResumeSearchEmbed ResumeSearchEmbed(string url = null)
        {
            return new ResumeSearchEmbed(url);
        }

        /// <summary> Initializes a new instance of GetAllJobDescriptionsResults. </summary>
        /// <param name="count"> Number of documents in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.GetAllJobDescriptionsResults"/> instance for mocking. </returns>
        public static GetAllJobDescriptionsResults GetAllJobDescriptionsResults(int? count = null, string next = null, string previous = null, IEnumerable<Meta> results = null)
        {
            results ??= new List<Meta>();

            return new GetAllJobDescriptionsResults(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescription. </summary>
        /// <param name="data"></param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="meta"/> or <paramref name="error"/> is null. </exception>
        /// <returns> A new <see cref="Models.JobDescription"/> instance for mocking. </returns>
        public static JobDescription JobDescription(JobDescriptionData data = null, Meta meta = null, Error error = null)
        {
            if (meta == null)
            {
                throw new ArgumentNullException(nameof(meta));
            }
            if (error == null)
            {
                throw new ArgumentNullException(nameof(error));
            }

            return new JobDescription(data, meta, error);
        }

        /// <summary> Initializes a new instance of JobDescriptionData. </summary>
        /// <param name="jobTitle"></param>
        /// <param name="contactEmail"></param>
        /// <param name="contactName"></param>
        /// <param name="contactPhone"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="jobType"></param>
        /// <param name="languages"></param>
        /// <param name="skills"></param>
        /// <param name="organizationName"></param>
        /// <param name="organizationWebsite"></param>
        /// <param name="educationLevel"></param>
        /// <param name="educationAccreditation"></param>
        /// <param name="expectedRemuneration"></param>
        /// <param name="location"></param>
        /// <param name="certifications"></param>
        /// <param name="yearsExperience"></param>
        /// <returns> A new <see cref="Models.JobDescriptionData"/> instance for mocking. </returns>
        public static JobDescriptionData JobDescriptionData(JobTitleAnnotation jobTitle = null, TextAnnotation contactEmail = null, TextAnnotation contactName = null, TextAnnotation contactPhone = null, DateAnnotation startDate = null, DateAnnotation endDate = null, TextAnnotation jobType = null, IEnumerable<LanguageAnnotation> languages = null, IEnumerable<SkillAnnotation> skills = null, TextAnnotation organizationName = null, TextAnnotation organizationWebsite = null, TextAnnotation educationLevel = null, TextAnnotation educationAccreditation = null, ExpectedRemunerationAnnotation expectedRemuneration = null, LocationAnnotation location = null, IEnumerable<TextAnnotation> certifications = null, YearsExperienceAnnotation yearsExperience = null)
        {
            languages ??= new List<LanguageAnnotation>();
            skills ??= new List<SkillAnnotation>();
            certifications ??= new List<TextAnnotation>();

            return new JobDescriptionData(jobTitle, contactEmail, contactName, contactPhone, startDate, endDate, jobType, languages?.ToList(), skills?.ToList(), organizationName, organizationWebsite, educationLevel, educationAccreditation, expectedRemuneration, location, certifications?.ToList(), yearsExperience);
        }

        /// <summary> Initializes a new instance of JobTitleAnnotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="isClientVerified"></param>
        /// <param name="isAutoVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"> Years of experience range. </param>
        /// <returns> A new <see cref="Models.JobTitleAnnotation"/> instance for mocking. </returns>
        public static JobTitleAnnotation JobTitleAnnotation(int? id = null, Rectangle rectangle = null, int? pageIndex = null, string raw = null, float? confidence = null, bool isVerified = default, bool? isClientVerified = null, bool? isAutoVerified = null, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, JobTitleAnnotationParsed parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new JobTitleAnnotation(id, rectangle, pageIndex, raw, confidence, isVerified, isClientVerified, isAutoVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of JobTitleAnnotationParsed. </summary>
        /// <param name="name"></param>
        /// <param name="managementLevel"></param>
        /// <param name="classification"></param>
        /// <returns> A new <see cref="Models.JobTitleAnnotationParsed"/> instance for mocking. </returns>
        public static JobTitleAnnotationParsed JobTitleAnnotationParsed(string name = null, string managementLevel = null, JobTitleAnnotationParsedClassification classification = null)
        {
            return new JobTitleAnnotationParsed(name, managementLevel, classification);
        }

        /// <summary> Initializes a new instance of JobTitleAnnotationParsedClassification. </summary>
        /// <param name="socCode"></param>
        /// <param name="title"></param>
        /// <param name="minorGroup"></param>
        /// <param name="subMajorGroup"></param>
        /// <param name="majorGroup"></param>
        /// <returns> A new <see cref="Models.JobTitleAnnotationParsedClassification"/> instance for mocking. </returns>
        public static JobTitleAnnotationParsedClassification JobTitleAnnotationParsedClassification(float? socCode = null, string title = null, string minorGroup = null, string subMajorGroup = null, string majorGroup = null)
        {
            return new JobTitleAnnotationParsedClassification(socCode, title, minorGroup, subMajorGroup, majorGroup);
        }

        /// <summary> Initializes a new instance of Annotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="isClientVerified"></param>
        /// <param name="isAutoVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.Annotation"/> instance for mocking. </returns>
        public static Annotation Annotation(int? id = null, Rectangle rectangle = null, int? pageIndex = null, string raw = null, float? confidence = null, bool isVerified = default, bool? isClientVerified = null, bool? isAutoVerified = null, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new Annotation(id, rectangle, pageIndex, raw, confidence, isVerified, isClientVerified, isAutoVerified, classification, additionalProperties);
        }

        /// <summary> Initializes a new instance of Rectangle. </summary>
        /// <param name="x0"></param>
        /// <param name="y0"></param>
        /// <param name="x1"></param>
        /// <param name="y1"></param>
        /// <returns> A new <see cref="Models.Rectangle"/> instance for mocking. </returns>
        public static Rectangle Rectangle(float x0 = default, float y0 = default, float x1 = default, float y1 = default)
        {
            return new Rectangle(x0, y0, x1, y1);
        }

        /// <summary> Initializes a new instance of TextAnnotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="isClientVerified"></param>
        /// <param name="isAutoVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.TextAnnotation"/> instance for mocking. </returns>
        public static TextAnnotation TextAnnotation(int? id = null, Rectangle rectangle = null, int? pageIndex = null, string raw = null, float? confidence = null, bool isVerified = default, bool? isClientVerified = null, bool? isAutoVerified = null, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, string parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new TextAnnotation(id, rectangle, pageIndex, raw, confidence, isVerified, isClientVerified, isAutoVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of DateAnnotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="isClientVerified"></param>
        /// <param name="isAutoVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.DateAnnotation"/> instance for mocking. </returns>
        public static DateAnnotation DateAnnotation(int? id = null, Rectangle rectangle = null, int? pageIndex = null, string raw = null, float? confidence = null, bool isVerified = default, bool? isClientVerified = null, bool? isAutoVerified = null, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, DateTimeOffset? parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DateAnnotation(id, rectangle, pageIndex, raw, confidence, isVerified, isClientVerified, isAutoVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of LanguageAnnotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="isClientVerified"></param>
        /// <param name="isAutoVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.LanguageAnnotation"/> instance for mocking. </returns>
        public static LanguageAnnotation LanguageAnnotation(int? id = null, Rectangle rectangle = null, int? pageIndex = null, string raw = null, float? confidence = null, bool isVerified = default, bool? isClientVerified = null, bool? isAutoVerified = null, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, string parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new LanguageAnnotation(id, rectangle, pageIndex, raw, confidence, isVerified, isClientVerified, isAutoVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of SkillAnnotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="isClientVerified"></param>
        /// <param name="isAutoVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.SkillAnnotation"/> instance for mocking. </returns>
        public static SkillAnnotation SkillAnnotation(int? id = null, Rectangle rectangle = null, int? pageIndex = null, string raw = null, float? confidence = null, bool isVerified = default, bool? isClientVerified = null, bool? isAutoVerified = null, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, string parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SkillAnnotation(id, rectangle, pageIndex, raw, confidence, isVerified, isClientVerified, isAutoVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of ExpectedRemunerationAnnotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="isClientVerified"></param>
        /// <param name="isAutoVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ExpectedRemunerationAnnotation"/> instance for mocking. </returns>
        public static ExpectedRemunerationAnnotation ExpectedRemunerationAnnotation(int? id = null, Rectangle rectangle = null, int? pageIndex = null, string raw = null, float? confidence = null, bool isVerified = default, bool? isClientVerified = null, bool? isAutoVerified = null, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, ExpectedRemunerationAnnotationParsed parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ExpectedRemunerationAnnotation(id, rectangle, pageIndex, raw, confidence, isVerified, isClientVerified, isAutoVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of ExpectedRemunerationAnnotationParsed. </summary>
        /// <param name="minimum"></param>
        /// <param name="maximum"></param>
        /// <param name="currency"></param>
        /// <param name="unit"></param>
        /// <returns> A new <see cref="Models.ExpectedRemunerationAnnotationParsed"/> instance for mocking. </returns>
        public static ExpectedRemunerationAnnotationParsed ExpectedRemunerationAnnotationParsed(float? minimum = null, float? maximum = null, string currency = null, string unit = null)
        {
            return new ExpectedRemunerationAnnotationParsed(minimum, maximum, currency, unit);
        }

        /// <summary> Initializes a new instance of LocationAnnotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="isClientVerified"></param>
        /// <param name="isAutoVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.LocationAnnotation"/> instance for mocking. </returns>
        public static LocationAnnotation LocationAnnotation(int? id = null, Rectangle rectangle = null, int? pageIndex = null, string raw = null, float? confidence = null, bool isVerified = default, bool? isClientVerified = null, bool? isAutoVerified = null, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, Location parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new LocationAnnotation(id, rectangle, pageIndex, raw, confidence, isVerified, isClientVerified, isAutoVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of YearsExperienceAnnotation. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="isClientVerified"></param>
        /// <param name="isAutoVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"> Years of experience range. </param>
        /// <returns> A new <see cref="Models.YearsExperienceAnnotation"/> instance for mocking. </returns>
        public static YearsExperienceAnnotation YearsExperienceAnnotation(int? id = null, Rectangle rectangle = null, int? pageIndex = null, string raw = null, float? confidence = null, bool isVerified = default, bool? isClientVerified = null, bool? isAutoVerified = null, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, YearsExperienceAnnotationParsed parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new YearsExperienceAnnotation(id, rectangle, pageIndex, raw, confidence, isVerified, isClientVerified, isAutoVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of YearsExperienceAnnotationParsed. </summary>
        /// <param name="minimum"> Minimum years of experience. </param>
        /// <param name="maximum"> Maximum years of experience. </param>
        /// <returns> A new <see cref="Models.YearsExperienceAnnotationParsed"/> instance for mocking. </returns>
        public static YearsExperienceAnnotationParsed YearsExperienceAnnotationParsed(float? minimum = null, float? maximum = null)
        {
            return new YearsExperienceAnnotationParsed(minimum, maximum);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearch. </summary>
        /// <param name="count"> Total number of results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="parameters"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearch"/> instance for mocking. </returns>
        public static JobDescriptionSearch JobDescriptionSearch(int? count = null, string next = null, string previous = null, JobDescriptionSearchParameters parameters = null, IEnumerable<JobDescriptionSearchResult> results = null)
        {
            results ??= new List<JobDescriptionSearchResult>();

            return new JobDescriptionSearch(count, next, previous, parameters, results?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchResult. </summary>
        /// <param name="identifier"> Unique identifier for the document. If creating a document and left blank, one will be automatically generated. </param>
        /// <param name="score"></param>
        /// <param name="pdf"></param>
        /// <param name="jobTitle"></param>
        /// <param name="managementLevel"></param>
        /// <param name="experience"></param>
        /// <param name="skills"></param>
        /// <param name="languages"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="searchExpression"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchResult"/> instance for mocking. </returns>
        public static JobDescriptionSearchResult JobDescriptionSearchResult(string identifier = null, float score = default, string pdf = null, JobTitleSearchScoreComponent jobTitle = null, ManagementLevelSearchScoreComponent managementLevel = null, ExperienceSearchScoreComponent experience = null, SkillsSearchScoreComponent skills = null, LanguagesSearchScoreComponent languages = null, LocationSearchScoreComponent location = null, EducationSearchScoreComponent education = null, OccupationGroupSearchScoreComponent occupationGroup = null, SearchExpressionSearchScoreComponent searchExpression = null)
        {
            return new JobDescriptionSearchResult(identifier, score, pdf, jobTitle, managementLevel, experience, skills, languages, location, education, occupationGroup, searchExpression);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetail. </summary>
        /// <param name="jobTitle"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="skills"></param>
        /// <param name="experience"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="languages"></param>
        /// <param name="managementLevel"></param>
        /// <param name="searchExpression"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetail"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetail JobDescriptionSearchDetail(JobDescriptionSearchDetailJobTitle jobTitle = null, JobDescriptionSearchDetailLocation location = null, JobDescriptionSearchDetailEducation education = null, JobDescriptionSearchDetailSkills skills = null, JobDescriptionSearchDetailExperience experience = null, JobDescriptionSearchDetailOccupationGroup occupationGroup = null, JobDescriptionSearchDetailLanguages languages = null, JobDescriptionSearchDetailManagementLevel managementLevel = null, JobDescriptionSearchDetailSearchExpression searchExpression = null)
        {
            return new JobDescriptionSearchDetail(jobTitle, location, education, skills, experience, occupationGroup, languages, managementLevel, searchExpression);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailJobTitle. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailJobTitle"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailJobTitle JobDescriptionSearchDetailJobTitle(IEnumerable<string> missing = null, JobDescriptionSearchDetailJobTitleValue value = null)
        {
            missing ??= new List<string>();

            return new JobDescriptionSearchDetailJobTitle(missing?.ToList(), value);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailJobTitleValue. </summary>
        /// <param name="name"></param>
        /// <param name="companyName"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailJobTitleValue"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailJobTitleValue JobDescriptionSearchDetailJobTitleValue(string name = null, string companyName = null, bool? match = null)
        {
            return new JobDescriptionSearchDetailJobTitleValue(name, companyName, match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailLocation. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailLocation"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailLocation JobDescriptionSearchDetailLocation(IEnumerable<ResumeSearchParametersLocation> missing = null, JobDescriptionSearchDetailLocationValue value = null)
        {
            missing ??= new List<ResumeSearchParametersLocation>();

            return new JobDescriptionSearchDetailLocation(missing?.ToList(), value);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailEducation. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailEducation"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailEducation JobDescriptionSearchDetailEducation(JobDescriptionSearchDetailEducationMissing missing = null, JobDescriptionSearchDetailEducationValue value = null)
        {
            return new JobDescriptionSearchDetailEducation(missing, value);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailEducationMissing. </summary>
        /// <param name="degrees"></param>
        /// <param name="degreeTypes"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailEducationMissing"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailEducationMissing JobDescriptionSearchDetailEducationMissing(IEnumerable<string> degrees = null, IEnumerable<string> degreeTypes = null)
        {
            degrees ??= new List<string>();
            degreeTypes ??= new List<string>();

            return new JobDescriptionSearchDetailEducationMissing(degrees?.ToList(), degreeTypes?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailEducationValue. </summary>
        /// <param name="degrees"></param>
        /// <param name="degreeTypes"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailEducationValue"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailEducationValue JobDescriptionSearchDetailEducationValue(IEnumerable<string> degrees = null, IEnumerable<string> degreeTypes = null, bool? match = null)
        {
            degrees ??= new List<string>();
            degreeTypes ??= new List<string>();

            return new JobDescriptionSearchDetailEducationValue(degrees?.ToList(), degreeTypes?.ToList(), match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailSkills. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailSkills"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailSkills JobDescriptionSearchDetailSkills(IEnumerable<ResumeSearchParametersSkill> missing = null, IEnumerable<JobDescriptionSearchDetailSkillsValueItem> value = null)
        {
            missing ??= new List<ResumeSearchParametersSkill>();
            value ??= new List<JobDescriptionSearchDetailSkillsValueItem>();

            return new JobDescriptionSearchDetailSkills(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailSkillsValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailSkillsValueItem"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailSkillsValueItem JobDescriptionSearchDetailSkillsValueItem(string name = null, bool? match = null)
        {
            return new JobDescriptionSearchDetailSkillsValueItem(name, match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailExperience. </summary>
        /// <param name="minimumExperience"></param>
        /// <param name="maximumExperience"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailExperience"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailExperience JobDescriptionSearchDetailExperience(int? minimumExperience = null, int? maximumExperience = null, bool? match = null)
        {
            return new JobDescriptionSearchDetailExperience(minimumExperience, maximumExperience, match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailOccupationGroup. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailOccupationGroup"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailOccupationGroup JobDescriptionSearchDetailOccupationGroup(IEnumerable<int> missing = null, IEnumerable<JobDescriptionSearchDetailOccupationGroupValueItem> value = null)
        {
            missing ??= new List<int>();
            value ??= new List<JobDescriptionSearchDetailOccupationGroupValueItem>();

            return new JobDescriptionSearchDetailOccupationGroup(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailOccupationGroupValueItem. </summary>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="children"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailOccupationGroupValueItem"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailOccupationGroupValueItem JobDescriptionSearchDetailOccupationGroupValueItem(int code = default, string name = null, IEnumerable<OccupationGroup> children = null, bool? match = null)
        {
            children ??= new List<OccupationGroup>();

            return new JobDescriptionSearchDetailOccupationGroupValueItem(code, name, children?.ToList(), match);
        }

        /// <summary> Initializes a new instance of Components1Bq3Q31SchemasJobdescriptionsearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1. </summary>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.Components1Bq3Q31SchemasJobdescriptionsearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1"/> instance for mocking. </returns>
        public static Components1Bq3Q31SchemasJobdescriptionsearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1 Components1Bq3Q31SchemasJobdescriptionsearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1(bool? match = null)
        {
            return new Components1Bq3Q31SchemasJobdescriptionsearchdetailPropertiesOccupationgroupPropertiesValueItemsAllof1(match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailLanguages. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailLanguages"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailLanguages JobDescriptionSearchDetailLanguages(IEnumerable<ResumeSearchParametersSkill> missing = null, IEnumerable<JobDescriptionSearchDetailLanguagesValueItem> value = null)
        {
            missing ??= new List<ResumeSearchParametersSkill>();
            value ??= new List<JobDescriptionSearchDetailLanguagesValueItem>();

            return new JobDescriptionSearchDetailLanguages(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailLanguagesValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailLanguagesValueItem"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailLanguagesValueItem JobDescriptionSearchDetailLanguagesValueItem(string name = null, bool? match = null)
        {
            return new JobDescriptionSearchDetailLanguagesValueItem(name, match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailManagementLevel. </summary>
        /// <param name="level"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailManagementLevel"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailManagementLevel JobDescriptionSearchDetailManagementLevel(ManagementLevel? level = null, bool? match = null)
        {
            return new JobDescriptionSearchDetailManagementLevel(level, match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailSearchExpression. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailSearchExpression"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailSearchExpression JobDescriptionSearchDetailSearchExpression(IEnumerable<string> missing = null, IEnumerable<string> value = null)
        {
            missing ??= new List<string>();
            value ??= new List<string>();

            return new JobDescriptionSearchDetailSearchExpression(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchConfig. </summary>
        /// <param name="allowPdfDownload"></param>
        /// <param name="maxResults"> Maximum number of results that can be returned. Setting to &quot;null&quot; means no limitation. </param>
        /// <param name="displayJobTitle"></param>
        /// <param name="displayLocation"></param>
        /// <param name="displayYearsExperience"></param>
        /// <param name="displayOccupationGroup"></param>
        /// <param name="displayEducation"></param>
        /// <param name="displaySkills"></param>
        /// <param name="displayLanguages"></param>
        /// <param name="displayManagementLevel"></param>
        /// <param name="displayKeywords"></param>
        /// <param name="weightJobTitle"></param>
        /// <param name="weightLocation"></param>
        /// <param name="weightYearsExperience"></param>
        /// <param name="weightOccupationGroup"></param>
        /// <param name="weightEducation"></param>
        /// <param name="weightSkills"></param>
        /// <param name="weightLanguages"></param>
        /// <param name="weightManagementLevel"></param>
        /// <param name="weightKeywords"></param>
        /// <param name="indices"> List of index names. </param>
        /// <param name="searchToolTheme"> Customize the theme of the embeded search tool. </param>
        /// <param name="userId"> ID of the logged in user. </param>
        /// <param name="username"> Username of the logged in user. </param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchConfig"/> instance for mocking. </returns>
        public static JobDescriptionSearchConfig JobDescriptionSearchConfig(bool? allowPdfDownload = null, int? maxResults = null, bool? displayJobTitle = null, bool? displayLocation = null, bool? displayYearsExperience = null, bool? displayOccupationGroup = null, bool? displayEducation = null, bool? displaySkills = null, bool? displayLanguages = null, bool? displayManagementLevel = null, bool? displayKeywords = null, float? weightJobTitle = null, float? weightLocation = null, float? weightYearsExperience = null, float? weightOccupationGroup = null, float? weightEducation = null, float? weightSkills = null, float? weightLanguages = null, float? weightManagementLevel = null, float? weightKeywords = null, IEnumerable<string> indices = null, IDictionary<string, object> searchToolTheme = null, int? userId = null, string username = null)
        {
            indices ??= new List<string>();
            searchToolTheme ??= new Dictionary<string, object>();

            return new JobDescriptionSearchConfig(allowPdfDownload, maxResults, displayJobTitle, displayLocation, displayYearsExperience, displayOccupationGroup, displayEducation, displaySkills, displayLanguages, displayManagementLevel, displayKeywords, weightJobTitle, weightLocation, weightYearsExperience, weightOccupationGroup, weightEducation, weightSkills, weightLanguages, weightManagementLevel, weightKeywords, indices?.ToList(), searchToolTheme, userId, username);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchEmbed. </summary>
        /// <param name="url"> The signed URL for the embedable search tool. </param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchEmbed"/> instance for mocking. </returns>
        public static JobDescriptionSearchEmbed JobDescriptionSearchEmbed(string url = null)
        {
            return new JobDescriptionSearchEmbed(url);
        }

        /// <summary> Initializes a new instance of Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of indexes in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema(int? count = null, string next = null, string previous = null, IEnumerable<Get200ApplicationJsonPropertiesItemsItem> results = null)
        {
            results ??= new List<Get200ApplicationJsonPropertiesItemsItem>();

            return new Paths6Pypg5IndexGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Get200ApplicationJsonPropertiesItemsItem. </summary>
        /// <param name="name"></param>
        /// <param name="documentType"></param>
        /// <returns> A new <see cref="Models.Get200ApplicationJsonPropertiesItemsItem"/> instance for mocking. </returns>
        public static Get200ApplicationJsonPropertiesItemsItem Get200ApplicationJsonPropertiesItemsItem(string name = null, GetResponses200ContentApplicationJsonSchemaResultsItemDocumentType? documentType = null)
        {
            return new Get200ApplicationJsonPropertiesItemsItem(name, documentType);
        }

        /// <summary> Initializes a new instance of Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema. </summary>
        /// <param name="name"></param>
        /// <param name="documentType"></param>
        /// <returns> A new <see cref="Models.Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema(string name = null, Enum3? documentType = null)
        {
            return new Paths1Mc0Je6IndexPostResponses201ContentApplicationJsonSchema(name, documentType);
        }

        /// <summary> Initializes a new instance of PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of indexed documents in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema(int? count = null, string next = null, string previous = null, IEnumerable<PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems> results = null)
        {
            results ??= new List<PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems>();

            return new PathsRvverlIndexNameDocumentsGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems. </summary>
        /// <param name="document"></param>
        /// <returns> A new <see cref="Models.PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems"/> instance for mocking. </returns>
        public static PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems(string document = null)
        {
            return new PathsHryo8IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems(document);
        }

        /// <summary> Initializes a new instance of PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema. </summary>
        /// <param name="document"> Unique identifier for the document. </param>
        /// <returns> A new <see cref="Models.PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema(string document = null)
        {
            return new PathsCoo0XpIndexNameDocumentsPostResponses201ContentApplicationJsonSchema(document);
        }

        /// <summary> Initializes a new instance of GetAllInvoicesResults. </summary>
        /// <param name="count"> Number of documents in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.GetAllInvoicesResults"/> instance for mocking. </returns>
        public static GetAllInvoicesResults GetAllInvoicesResults(int? count = null, string next = null, string previous = null, IEnumerable<Meta> results = null)
        {
            results ??= new List<Meta>();

            return new GetAllInvoicesResults(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Invoice. </summary>
        /// <param name="clientVerifiedDt"></param>
        /// <param name="data"></param>
        /// <param name="meta"></param>
        /// <param name="error"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="meta"/> or <paramref name="error"/> is null. </exception>
        /// <returns> A new <see cref="Models.Invoice"/> instance for mocking. </returns>
        public static Invoice Invoice(string clientVerifiedDt = null, InvoiceData data = null, Meta meta = null, Error error = null)
        {
            if (meta == null)
            {
                throw new ArgumentNullException(nameof(meta));
            }
            if (error == null)
            {
                throw new ArgumentNullException(nameof(error));
            }

            return new Invoice(clientVerifiedDt, data, meta, error);
        }

        /// <summary> Initializes a new instance of InvoiceData. </summary>
        /// <param name="tables"></param>
        /// <param name="invoiceDate"></param>
        /// <param name="invoiceOrderDate"></param>
        /// <param name="paymentDateDue"></param>
        /// <param name="paymentAmountBase"></param>
        /// <param name="paymentAmountTax"></param>
        /// <param name="paymentAmountTotal"></param>
        /// <param name="paymentAmountPaid"></param>
        /// <param name="paymentAmountDue"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="invoicePurchaseOrderNumber"></param>
        /// <param name="supplierBusinessNumber"></param>
        /// <param name="customerNumber"></param>
        /// <param name="customerBusinessNumber"></param>
        /// <param name="paymentReference"></param>
        /// <param name="bankAccountNumber"></param>
        /// <param name="supplierVat"></param>
        /// <param name="customerVat"></param>
        /// <param name="bpayBillerCode"></param>
        /// <param name="bpayReference"></param>
        /// <param name="bankSortCode"></param>
        /// <param name="bankIban"></param>
        /// <param name="bankSwift"></param>
        /// <param name="bankBsb"></param>
        /// <param name="customerContactName"></param>
        /// <param name="customerCompanyName"></param>
        /// <param name="supplierCompanyName"></param>
        /// <param name="customerBillingAddress"></param>
        /// <param name="customerDeliveryAddress"></param>
        /// <param name="supplierAddress"></param>
        /// <param name="customerPhoneNumber"></param>
        /// <param name="supplierPhoneNumber"></param>
        /// <param name="supplierFax"></param>
        /// <param name="customerEmail"></param>
        /// <param name="supplierEmail"></param>
        /// <param name="supplierWebsite"></param>
        /// <param name="currencyCode"></param>
        /// <param name="customFields"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.InvoiceData"/> instance for mocking. </returns>
        public static InvoiceData InvoiceData(IEnumerable<InvoiceDataTablesItem> tables = null, DateAnnotation invoiceDate = null, DateAnnotation invoiceOrderDate = null, DateAnnotation paymentDateDue = null, InvoiceDataPaymentAmountBase paymentAmountBase = null, InvoiceDataPaymentAmountTax paymentAmountTax = null, InvoiceDataPaymentAmountTotal paymentAmountTotal = null, InvoiceDataPaymentAmountPaid paymentAmountPaid = null, InvoiceDataPaymentAmountDue paymentAmountDue = null, InvoiceDataInvoiceNumber invoiceNumber = null, InvoiceDataInvoicePurchaseOrderNumber invoicePurchaseOrderNumber = null, InvoiceDataSupplierBusinessNumber supplierBusinessNumber = null, InvoiceDataCustomerNumber customerNumber = null, InvoiceDataCustomerBusinessNumber customerBusinessNumber = null, InvoiceDataPaymentReference paymentReference = null, InvoiceDataBankAccountNumber bankAccountNumber = null, InvoiceDataSupplierVat supplierVat = null, InvoiceDataCustomerVat customerVat = null, InvoiceDataBpayBillerCode bpayBillerCode = null, InvoiceDataBpayReference bpayReference = null, InvoiceDataBankSortCode bankSortCode = null, InvoiceDataBankIban bankIban = null, InvoiceDataBankSwift bankSwift = null, InvoiceDataBankBsb bankBsb = null, InvoiceDataCustomerContactName customerContactName = null, InvoiceDataCustomerCompanyName customerCompanyName = null, InvoiceDataSupplierCompanyName supplierCompanyName = null, LocationAnnotation customerBillingAddress = null, LocationAnnotation customerDeliveryAddress = null, LocationAnnotation supplierAddress = null, InvoiceDataCustomerPhoneNumber customerPhoneNumber = null, InvoiceDataSupplierPhoneNumber supplierPhoneNumber = null, InvoiceDataSupplierFax supplierFax = null, InvoiceDataCustomerEmail customerEmail = null, InvoiceDataSupplierEmail supplierEmail = null, InvoiceDataSupplierWebsite supplierWebsite = null, EnumAnnotationSerializer currencyCode = null, IReadOnlyDictionary<string, object> customFields = null)
        {
            tables ??= new List<InvoiceDataTablesItem>();
            customFields ??= new Dictionary<string, object>();

            return new InvoiceData(tables?.ToList(), invoiceDate, invoiceOrderDate, paymentDateDue, paymentAmountBase, paymentAmountTax, paymentAmountTotal, paymentAmountPaid, paymentAmountDue, invoiceNumber, invoicePurchaseOrderNumber, supplierBusinessNumber, customerNumber, customerBusinessNumber, paymentReference, bankAccountNumber, supplierVat, customerVat, bpayBillerCode, bpayReference, bankSortCode, bankIban, bankSwift, bankBsb, customerContactName, customerCompanyName, supplierCompanyName, customerBillingAddress, customerDeliveryAddress, supplierAddress, customerPhoneNumber, supplierPhoneNumber, supplierFax, customerEmail, supplierEmail, supplierWebsite, currencyCode, customFields);
        }

        /// <summary> Initializes a new instance of InvoiceDataTablesItem. </summary>
        /// <param name="rows"></param>
        /// <returns> A new <see cref="Models.InvoiceDataTablesItem"/> instance for mocking. </returns>
        public static InvoiceDataTablesItem InvoiceDataTablesItem(IEnumerable<RowAnnotation> rows = null)
        {
            rows ??= new List<RowAnnotation>();

            return new InvoiceDataTablesItem(rows?.ToList());
        }

        /// <summary> Initializes a new instance of RowAnnotation. </summary>
        /// <param name="code"></param>
        /// <param name="date"></param>
        /// <param name="description"></param>
        /// <param name="unit"></param>
        /// <param name="unitPrice"></param>
        /// <param name="quantity"></param>
        /// <param name="discount"></param>
        /// <param name="baseTotal"></param>
        /// <param name="taxRate"></param>
        /// <param name="taxTotal"></param>
        /// <param name="total"></param>
        /// <param name="other"></param>
        /// <param name="customFields"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.RowAnnotation"/> instance for mocking. </returns>
        public static RowAnnotation RowAnnotation(string code = null, string date = null, string description = null, string unit = null, float? unitPrice = null, float? quantity = null, string discount = null, float? baseTotal = null, string taxRate = null, float? taxTotal = null, float? total = null, string other = null, IReadOnlyDictionary<string, object> customFields = null)
        {
            customFields ??= new Dictionary<string, object>();

            return new RowAnnotation(code, date, description, unit, unitPrice, quantity, discount, baseTotal, taxRate, taxTotal, total, other, customFields);
        }

        /// <summary> Initializes a new instance of Components1W3SqeuSchemasInvoicedataPropertiesPaymentamountbaseAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1W3SqeuSchemasInvoicedataPropertiesPaymentamountbaseAllof1"/> instance for mocking. </returns>
        public static Components1W3SqeuSchemasInvoicedataPropertiesPaymentamountbaseAllof1 Components1W3SqeuSchemasInvoicedataPropertiesPaymentamountbaseAllof1(string raw = null, string parsed = null)
        {
            return new Components1W3SqeuSchemasInvoicedataPropertiesPaymentamountbaseAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components6Zm20BSchemasInvoicedataPropertiesPaymentamounttaxAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components6Zm20BSchemasInvoicedataPropertiesPaymentamounttaxAllof1"/> instance for mocking. </returns>
        public static Components6Zm20BSchemasInvoicedataPropertiesPaymentamounttaxAllof1 Components6Zm20BSchemasInvoicedataPropertiesPaymentamounttaxAllof1(string raw = null, string parsed = null)
        {
            return new Components6Zm20BSchemasInvoicedataPropertiesPaymentamounttaxAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components4A2PzvSchemasInvoicedataPropertiesPaymentamounttotalAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components4A2PzvSchemasInvoicedataPropertiesPaymentamounttotalAllof1"/> instance for mocking. </returns>
        public static Components4A2PzvSchemasInvoicedataPropertiesPaymentamounttotalAllof1 Components4A2PzvSchemasInvoicedataPropertiesPaymentamounttotalAllof1(string raw = null, string parsed = null)
        {
            return new Components4A2PzvSchemasInvoicedataPropertiesPaymentamounttotalAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1Vvtu5NSchemasInvoicedataPropertiesPaymentamountpaidAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1Vvtu5NSchemasInvoicedataPropertiesPaymentamountpaidAllof1"/> instance for mocking. </returns>
        public static Components1Vvtu5NSchemasInvoicedataPropertiesPaymentamountpaidAllof1 Components1Vvtu5NSchemasInvoicedataPropertiesPaymentamountpaidAllof1(string raw = null, string parsed = null)
        {
            return new Components1Vvtu5NSchemasInvoicedataPropertiesPaymentamountpaidAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsEtsq6MSchemasInvoicedataPropertiesPaymentamountdueAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsEtsq6MSchemasInvoicedataPropertiesPaymentamountdueAllof1"/> instance for mocking. </returns>
        public static ComponentsEtsq6MSchemasInvoicedataPropertiesPaymentamountdueAllof1 ComponentsEtsq6MSchemasInvoicedataPropertiesPaymentamountdueAllof1(string raw = null, string parsed = null)
        {
            return new ComponentsEtsq6MSchemasInvoicedataPropertiesPaymentamountdueAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components5Rnu7ESchemasInvoicedataPropertiesInvoicenumberAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components5Rnu7ESchemasInvoicedataPropertiesInvoicenumberAllof1"/> instance for mocking. </returns>
        public static Components5Rnu7ESchemasInvoicedataPropertiesInvoicenumberAllof1 Components5Rnu7ESchemasInvoicedataPropertiesInvoicenumberAllof1(string raw = null, string parsed = null)
        {
            return new Components5Rnu7ESchemasInvoicedataPropertiesInvoicenumberAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsAq75Z8SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsAq75Z8SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof1"/> instance for mocking. </returns>
        public static ComponentsAq75Z8SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof1 ComponentsAq75Z8SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof1(string raw = null, string parsed = null)
        {
            return new ComponentsAq75Z8SchemasInvoicedataPropertiesInvoicepurchaseordernumberAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components5D6NjySchemasInvoicedataPropertiesSupplierbusinessnumberAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components5D6NjySchemasInvoicedataPropertiesSupplierbusinessnumberAllof1"/> instance for mocking. </returns>
        public static Components5D6NjySchemasInvoicedataPropertiesSupplierbusinessnumberAllof1 Components5D6NjySchemasInvoicedataPropertiesSupplierbusinessnumberAllof1(string raw = null, string parsed = null)
        {
            return new Components5D6NjySchemasInvoicedataPropertiesSupplierbusinessnumberAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components105Abr3SchemasInvoicedataPropertiesCustomernumberAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components105Abr3SchemasInvoicedataPropertiesCustomernumberAllof1"/> instance for mocking. </returns>
        public static Components105Abr3SchemasInvoicedataPropertiesCustomernumberAllof1 Components105Abr3SchemasInvoicedataPropertiesCustomernumberAllof1(string raw = null, string parsed = null)
        {
            return new Components105Abr3SchemasInvoicedataPropertiesCustomernumberAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components158Lya5SchemasInvoicedataPropertiesCustomerbusinessnumberAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components158Lya5SchemasInvoicedataPropertiesCustomerbusinessnumberAllof1"/> instance for mocking. </returns>
        public static Components158Lya5SchemasInvoicedataPropertiesCustomerbusinessnumberAllof1 Components158Lya5SchemasInvoicedataPropertiesCustomerbusinessnumberAllof1(string raw = null, string parsed = null)
        {
            return new Components158Lya5SchemasInvoicedataPropertiesCustomerbusinessnumberAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components2XnshtSchemasInvoicedataPropertiesPaymentreferenceAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components2XnshtSchemasInvoicedataPropertiesPaymentreferenceAllof1"/> instance for mocking. </returns>
        public static Components2XnshtSchemasInvoicedataPropertiesPaymentreferenceAllof1 Components2XnshtSchemasInvoicedataPropertiesPaymentreferenceAllof1(string raw = null, string parsed = null)
        {
            return new Components2XnshtSchemasInvoicedataPropertiesPaymentreferenceAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components74A7C1SchemasInvoicedataPropertiesBankaccountnumberAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components74A7C1SchemasInvoicedataPropertiesBankaccountnumberAllof1"/> instance for mocking. </returns>
        public static Components74A7C1SchemasInvoicedataPropertiesBankaccountnumberAllof1 Components74A7C1SchemasInvoicedataPropertiesBankaccountnumberAllof1(string raw = null, string parsed = null)
        {
            return new Components74A7C1SchemasInvoicedataPropertiesBankaccountnumberAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsB3U7OaSchemasInvoicedataPropertiesSuppliervatAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsB3U7OaSchemasInvoicedataPropertiesSuppliervatAllof1"/> instance for mocking. </returns>
        public static ComponentsB3U7OaSchemasInvoicedataPropertiesSuppliervatAllof1 ComponentsB3U7OaSchemasInvoicedataPropertiesSuppliervatAllof1(string raw = null, string parsed = null)
        {
            return new ComponentsB3U7OaSchemasInvoicedataPropertiesSuppliervatAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsBeazccSchemasInvoicedataPropertiesCustomervatAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsBeazccSchemasInvoicedataPropertiesCustomervatAllof1"/> instance for mocking. </returns>
        public static ComponentsBeazccSchemasInvoicedataPropertiesCustomervatAllof1 ComponentsBeazccSchemasInvoicedataPropertiesCustomervatAllof1(string raw = null, string parsed = null)
        {
            return new ComponentsBeazccSchemasInvoicedataPropertiesCustomervatAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsA69Bd0SchemasInvoicedataPropertiesBpaybillercodeAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsA69Bd0SchemasInvoicedataPropertiesBpaybillercodeAllof1"/> instance for mocking. </returns>
        public static ComponentsA69Bd0SchemasInvoicedataPropertiesBpaybillercodeAllof1 ComponentsA69Bd0SchemasInvoicedataPropertiesBpaybillercodeAllof1(string raw = null, string parsed = null)
        {
            return new ComponentsA69Bd0SchemasInvoicedataPropertiesBpaybillercodeAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsW32SuaSchemasInvoicedataPropertiesBpayreferenceAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsW32SuaSchemasInvoicedataPropertiesBpayreferenceAllof1"/> instance for mocking. </returns>
        public static ComponentsW32SuaSchemasInvoicedataPropertiesBpayreferenceAllof1 ComponentsW32SuaSchemasInvoicedataPropertiesBpayreferenceAllof1(string raw = null, string parsed = null)
        {
            return new ComponentsW32SuaSchemasInvoicedataPropertiesBpayreferenceAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1QdassaSchemasInvoicedataPropertiesBanksortcodeAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1QdassaSchemasInvoicedataPropertiesBanksortcodeAllof1"/> instance for mocking. </returns>
        public static Components1QdassaSchemasInvoicedataPropertiesBanksortcodeAllof1 Components1QdassaSchemasInvoicedataPropertiesBanksortcodeAllof1(string raw = null, string parsed = null)
        {
            return new Components1QdassaSchemasInvoicedataPropertiesBanksortcodeAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1127QwqSchemasInvoicedataPropertiesBankibanAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1127QwqSchemasInvoicedataPropertiesBankibanAllof1"/> instance for mocking. </returns>
        public static Components1127QwqSchemasInvoicedataPropertiesBankibanAllof1 Components1127QwqSchemasInvoicedataPropertiesBankibanAllof1(string raw = null, string parsed = null)
        {
            return new Components1127QwqSchemasInvoicedataPropertiesBankibanAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1Roa72HSchemasInvoicedataPropertiesBankswiftAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1Roa72HSchemasInvoicedataPropertiesBankswiftAllof1"/> instance for mocking. </returns>
        public static Components1Roa72HSchemasInvoicedataPropertiesBankswiftAllof1 Components1Roa72HSchemasInvoicedataPropertiesBankswiftAllof1(string raw = null, string parsed = null)
        {
            return new Components1Roa72HSchemasInvoicedataPropertiesBankswiftAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1RrxgkvSchemasInvoicedataPropertiesBankbsbAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1RrxgkvSchemasInvoicedataPropertiesBankbsbAllof1"/> instance for mocking. </returns>
        public static Components1RrxgkvSchemasInvoicedataPropertiesBankbsbAllof1 Components1RrxgkvSchemasInvoicedataPropertiesBankbsbAllof1(string raw = null, string parsed = null)
        {
            return new Components1RrxgkvSchemasInvoicedataPropertiesBankbsbAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of ComponentsWv2QrxSchemasInvoicedataPropertiesCustomercontactnameAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.ComponentsWv2QrxSchemasInvoicedataPropertiesCustomercontactnameAllof1"/> instance for mocking. </returns>
        public static ComponentsWv2QrxSchemasInvoicedataPropertiesCustomercontactnameAllof1 ComponentsWv2QrxSchemasInvoicedataPropertiesCustomercontactnameAllof1(string raw = null, string parsed = null)
        {
            return new ComponentsWv2QrxSchemasInvoicedataPropertiesCustomercontactnameAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1O8OpknSchemasInvoicedataPropertiesCustomercompanynameAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1O8OpknSchemasInvoicedataPropertiesCustomercompanynameAllof1"/> instance for mocking. </returns>
        public static Components1O8OpknSchemasInvoicedataPropertiesCustomercompanynameAllof1 Components1O8OpknSchemasInvoicedataPropertiesCustomercompanynameAllof1(string raw = null, string parsed = null)
        {
            return new Components1O8OpknSchemasInvoicedataPropertiesCustomercompanynameAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1P4Fl61SchemasInvoicedataPropertiesSuppliercompanynameAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1P4Fl61SchemasInvoicedataPropertiesSuppliercompanynameAllof1"/> instance for mocking. </returns>
        public static Components1P4Fl61SchemasInvoicedataPropertiesSuppliercompanynameAllof1 Components1P4Fl61SchemasInvoicedataPropertiesSuppliercompanynameAllof1(string raw = null, string parsed = null)
        {
            return new Components1P4Fl61SchemasInvoicedataPropertiesSuppliercompanynameAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1YsiqwnSchemasInvoicedataPropertiesCustomerphonenumberAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1YsiqwnSchemasInvoicedataPropertiesCustomerphonenumberAllof1"/> instance for mocking. </returns>
        public static Components1YsiqwnSchemasInvoicedataPropertiesCustomerphonenumberAllof1 Components1YsiqwnSchemasInvoicedataPropertiesCustomerphonenumberAllof1(string raw = null, string parsed = null)
        {
            return new Components1YsiqwnSchemasInvoicedataPropertiesCustomerphonenumberAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1Hr2XldSchemasInvoicedataPropertiesSupplierphonenumberAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1Hr2XldSchemasInvoicedataPropertiesSupplierphonenumberAllof1"/> instance for mocking. </returns>
        public static Components1Hr2XldSchemasInvoicedataPropertiesSupplierphonenumberAllof1 Components1Hr2XldSchemasInvoicedataPropertiesSupplierphonenumberAllof1(string raw = null, string parsed = null)
        {
            return new Components1Hr2XldSchemasInvoicedataPropertiesSupplierphonenumberAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1Fe3VqtSchemasInvoicedataPropertiesSupplierfaxAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1Fe3VqtSchemasInvoicedataPropertiesSupplierfaxAllof1"/> instance for mocking. </returns>
        public static Components1Fe3VqtSchemasInvoicedataPropertiesSupplierfaxAllof1 Components1Fe3VqtSchemasInvoicedataPropertiesSupplierfaxAllof1(string raw = null, string parsed = null)
        {
            return new Components1Fe3VqtSchemasInvoicedataPropertiesSupplierfaxAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components1Y7HcurSchemasInvoicedataPropertiesCustomeremailAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components1Y7HcurSchemasInvoicedataPropertiesCustomeremailAllof1"/> instance for mocking. </returns>
        public static Components1Y7HcurSchemasInvoicedataPropertiesCustomeremailAllof1 Components1Y7HcurSchemasInvoicedataPropertiesCustomeremailAllof1(string raw = null, string parsed = null)
        {
            return new Components1Y7HcurSchemasInvoicedataPropertiesCustomeremailAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components10Thcs2SchemasInvoicedataPropertiesSupplieremailAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components10Thcs2SchemasInvoicedataPropertiesSupplieremailAllof1"/> instance for mocking. </returns>
        public static Components10Thcs2SchemasInvoicedataPropertiesSupplieremailAllof1 Components10Thcs2SchemasInvoicedataPropertiesSupplieremailAllof1(string raw = null, string parsed = null)
        {
            return new Components10Thcs2SchemasInvoicedataPropertiesSupplieremailAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of Components17JmwpjSchemasInvoicedataPropertiesSupplierwebsiteAllof1. </summary>
        /// <param name="raw"></param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.Components17JmwpjSchemasInvoicedataPropertiesSupplierwebsiteAllof1"/> instance for mocking. </returns>
        public static Components17JmwpjSchemasInvoicedataPropertiesSupplierwebsiteAllof1 Components17JmwpjSchemasInvoicedataPropertiesSupplierwebsiteAllof1(string raw = null, string parsed = null)
        {
            return new Components17JmwpjSchemasInvoicedataPropertiesSupplierwebsiteAllof1(raw, parsed);
        }

        /// <summary> Initializes a new instance of EnumAnnotationSerializer. </summary>
        /// <param name="id"></param>
        /// <param name="rectangle"></param>
        /// <param name="pageIndex"></param>
        /// <param name="raw"></param>
        /// <param name="confidence"></param>
        /// <param name="isVerified"></param>
        /// <param name="isClientVerified"></param>
        /// <param name="isAutoVerified"></param>
        /// <param name="classification"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.EnumAnnotationSerializer"/> instance for mocking. </returns>
        public static EnumAnnotationSerializer EnumAnnotationSerializer(int? id = null, Rectangle rectangle = null, int? pageIndex = null, string raw = null, float? confidence = null, bool isVerified = default, bool? isClientVerified = null, bool? isAutoVerified = null, string classification = null, IReadOnlyDictionary<string, object> additionalProperties = null, string parsed = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new EnumAnnotationSerializer(id, rectangle, pageIndex, raw, confidence, isVerified, isClientVerified, isAutoVerified, classification, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of indexes in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema(int? count = null, string next = null, string previous = null, IEnumerable<User> results = null)
        {
            results ??= new List<User>();

            return new PathsWjaaeuUsersGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of User. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="email"></param>
        /// <param name="apiKey"></param>
        /// <returns> A new <see cref="Models.User"/> instance for mocking. </returns>
        public static User User(string id = null, string name = null, string username = null, string email = null, string apiKey = null)
        {
            return new User(id, name, username, email, apiKey);
        }

        /// <summary> Initializes a new instance of Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1. </summary>
        /// <param name="apiKey"> API key used to authenticate for future requests.  This key is only retrievable at the initial creation of the user. </param>
        /// <returns> A new <see cref="Models.Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1"/> instance for mocking. </returns>
        public static Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1 Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1(string apiKey = null)
        {
            return new Paths1Y6A2MfUsersPostResponses201ContentApplicationJsonSchemaAllof1(apiKey);
        }
    }
}
