// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Affinda.API.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AffindaAPIModelFactory
    {
        /// <summary> Initializes a new instance of Workspace. </summary>
        /// <param name="identifier"> Uniquely identify a workspace. </param>
        /// <param name="organization"></param>
        /// <param name="name"></param>
        /// <param name="visibility"> Visibility &quot;organization&quot; means everyone in the organization can access the workspace. Visibility &quot;private&quot; means only people explicitly added can access the workspace. </param>
        /// <param name="collections"></param>
        /// <param name="rejectInvalidDocuments"> If true, the uploaded document will be rejected if it&apos;s of the wrong document type, or if its document type cannot be determined. No credits will be consumed. </param>
        /// <param name="rejectDuplicates"> If &quot;true&quot;, parsing will fail when the uploaded document is duplicate of an existing document, no credits will be consumed. If &quot;false&quot;, will parse the document normally whether its a duplicate or not. If not provided, will fallback to the workspace settings. </param>
        /// <param name="members"></param>
        /// <param name="unvalidatedDocsCount"> Number of unvalidated documents in the workspace. </param>
        /// <param name="confirmedDocsCount"> Number of validated documents in the workspace. </param>
        /// <param name="ingestEmail"> When you send email to this address, any document attached in the body will be uploaded to this workspace. </param>
        /// <param name="whitelistIngestAddresses"> If specified, only emails from these addresses will be ingested for parsing. Wild cards are allowed, e.g. &quot;*@eyefind.info&quot;. </param>
        /// <returns> A new <see cref="Models.Workspace"/> instance for mocking. </returns>
        public static Workspace Workspace(string identifier = null, Organization organization = null, string name = null, WorkspaceVisibility? visibility = null, IEnumerable<WorkspaceCollectionsItem> collections = null, bool? rejectInvalidDocuments = null, bool? rejectDuplicates = null, IEnumerable<User> members = null, int? unvalidatedDocsCount = null, int? confirmedDocsCount = null, string ingestEmail = null, IEnumerable<string> whitelistIngestAddresses = null)
        {
            collections ??= new List<WorkspaceCollectionsItem>();
            members ??= new List<User>();
            whitelistIngestAddresses ??= new List<string>();

            return new Workspace(identifier, organization, name, visibility, collections?.ToList(), rejectInvalidDocuments, rejectDuplicates, members?.ToList(), unvalidatedDocsCount, confirmedDocsCount, ingestEmail, whitelistIngestAddresses?.ToList());
        }

        /// <summary> Initializes a new instance of Organization. </summary>
        /// <param name="identifier"> Uniquely identify an organization. </param>
        /// <param name="name"></param>
        /// <param name="userRole"> The role of the logged in user within the organization. </param>
        /// <param name="avatar"> URL of the organization&apos;s avatar. </param>
        /// <param name="resthookSignatureKey"> Used to sign webhook payloads so you can verify their integrity. </param>
        /// <param name="isTrial"></param>
        /// <returns> A new <see cref="Models.Organization"/> instance for mocking. </returns>
        public static Organization Organization(string identifier = null, string name = null, OrganizationUserRole? userRole = null, string avatar = null, string resthookSignatureKey = null, bool? isTrial = null)
        {
            return new Organization(identifier, name, userRole, avatar, resthookSignatureKey, isTrial);
        }

        /// <summary> Initializes a new instance of WorkspaceCollectionsItem. </summary>
        /// <param name="identifier"> Uniquely identify a collection. </param>
        /// <param name="name"></param>
        /// <param name="extractor"></param>
        /// <param name="unvalidatedDocsCount"> Number of unvalidated documents in the collection. </param>
        /// <param name="confirmedDocsCount"> Number of validated documents in the collection. </param>
        /// <returns> A new <see cref="Models.WorkspaceCollectionsItem"/> instance for mocking. </returns>
        public static WorkspaceCollectionsItem WorkspaceCollectionsItem(string identifier = null, string name = null, WorkspaceCollectionsItemExtractor extractor = null, int? unvalidatedDocsCount = null, int? confirmedDocsCount = null)
        {
            return new WorkspaceCollectionsItem(identifier, name, extractor, unvalidatedDocsCount, confirmedDocsCount);
        }

        /// <summary> Initializes a new instance of WorkspaceCollectionsItemExtractor. </summary>
        /// <param name="identifier"> Uniquely identify an extractor. </param>
        /// <param name="name"></param>
        /// <param name="namePlural"></param>
        /// <param name="baseExtractor"></param>
        /// <param name="category"></param>
        /// <param name="validatable"></param>
        /// <param name="isCustom"></param>
        /// <param name="createdDt"></param>
        /// <returns> A new <see cref="Models.WorkspaceCollectionsItemExtractor"/> instance for mocking. </returns>
        public static WorkspaceCollectionsItemExtractor WorkspaceCollectionsItemExtractor(string identifier = null, string name = null, string namePlural = null, BaseExtractor baseExtractor = null, string category = null, bool validatable = default, bool? isCustom = null, DateTimeOffset? createdDt = null)
        {
            return new WorkspaceCollectionsItemExtractor(identifier, name, namePlural, baseExtractor, category, validatable, isCustom, createdDt);
        }

        /// <summary> Initializes a new instance of BaseExtractor. </summary>
        /// <param name="identifier"> Uniquely identify an extractor. </param>
        /// <param name="name"></param>
        /// <param name="namePlural"></param>
        /// <param name="validatable"></param>
        /// <param name="isCustom"></param>
        /// <param name="createdDt"></param>
        /// <returns> A new <see cref="Models.BaseExtractor"/> instance for mocking. </returns>
        public static BaseExtractor BaseExtractor(string identifier = null, string name = null, string namePlural = null, bool validatable = default, bool? isCustom = null, DateTimeOffset? createdDt = null)
        {
            return new BaseExtractor(identifier, name, namePlural, validatable, isCustom, createdDt);
        }

        /// <summary> Initializes a new instance of PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of items in results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema(int count = default, string next = null, string previous = null, IEnumerable<WorkspaceMembership> results = null)
        {
            results ??= new List<WorkspaceMembership>();

            return new PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of PaginatedResponse. </summary>
        /// <param name="count"> Number of items in results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <returns> A new <see cref="Models.PaginatedResponse"/> instance for mocking. </returns>
        public static PaginatedResponse PaginatedResponse(int count = default, string next = null, string previous = null)
        {
            return new PaginatedResponse(count, next, previous);
        }

        /// <summary> Initializes a new instance of Paths2Ld2HiV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchemaAllof1. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths2Ld2HiV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchemaAllof1"/> instance for mocking. </returns>
        public static Paths2Ld2HiV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchemaAllof1 Paths2Ld2HiV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchemaAllof1(IEnumerable<WorkspaceMembership> results = null)
        {
            results ??= new List<WorkspaceMembership>();

            return new Paths2Ld2HiV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchemaAllof1(results?.ToList());
        }

        /// <summary> Initializes a new instance of WorkspaceMembership. </summary>
        /// <param name="identifier"> Uniquely identify a membership. </param>
        /// <param name="workspace"> Uniquely identify a workspace. </param>
        /// <param name="user"></param>
        /// <returns> A new <see cref="Models.WorkspaceMembership"/> instance for mocking. </returns>
        public static WorkspaceMembership WorkspaceMembership(string identifier = null, string workspace = null, User user = null)
        {
            return new WorkspaceMembership(identifier, workspace, user);
        }

        /// <summary> Initializes a new instance of Collection. </summary>
        /// <param name="identifier"> Uniquely identify a collection. </param>
        /// <param name="name"></param>
        /// <param name="workspace"></param>
        /// <param name="extractor"></param>
        /// <param name="autoValidationThreshold"></param>
        /// <param name="fields"></param>
        /// <param name="fieldsLayout"></param>
        /// <param name="fieldsConfigured"></param>
        /// <param name="dateFormatPreference"></param>
        /// <param name="dateFormatFromDocument"> Predict the date format from any dates in the document that is not ambiguous. </param>
        /// <param name="extractorConfig"> Extra configurations specific to an extractor. </param>
        /// <param name="unvalidatedDocsCount"> Number of unvalidated documents in the collection. </param>
        /// <param name="confirmedDocsCount"> Number of validated documents in the collection. </param>
        /// <param name="ingestEmail"> When you send email to this address, any document attached in the body will be uploaded to this collection. </param>
        /// <returns> A new <see cref="Models.Collection"/> instance for mocking. </returns>
        public static Collection Collection(string identifier = null, string name = null, CollectionWorkspace workspace = null, Extractor extractor = null, float? autoValidationThreshold = null, IEnumerable<FieldGroup> fields = null, FieldsLayout fieldsLayout = null, bool? fieldsConfigured = null, CollectionDateFormatPreference? dateFormatPreference = null, bool? dateFormatFromDocument = null, ExtractorConfig extractorConfig = null, int? unvalidatedDocsCount = null, int? confirmedDocsCount = null, string ingestEmail = null)
        {
            fields ??= new List<FieldGroup>();

            return new Collection(identifier, name, workspace, extractor, autoValidationThreshold, fields?.ToList(), fieldsLayout, fieldsConfigured, dateFormatPreference, dateFormatFromDocument, extractorConfig, unvalidatedDocsCount, confirmedDocsCount, ingestEmail);
        }

        /// <summary> Initializes a new instance of CollectionWorkspace. </summary>
        /// <param name="identifier"> Uniquely identify a workspace. </param>
        /// <param name="organization"></param>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.CollectionWorkspace"/> instance for mocking. </returns>
        public static CollectionWorkspace CollectionWorkspace(string identifier = null, Organization organization = null, string name = null)
        {
            return new CollectionWorkspace(identifier, organization, name);
        }

        /// <summary> Initializes a new instance of Extractor. </summary>
        /// <param name="identifier"> Uniquely identify an extractor. </param>
        /// <param name="name"></param>
        /// <param name="namePlural"></param>
        /// <param name="baseExtractor"></param>
        /// <param name="organization"></param>
        /// <param name="category"></param>
        /// <param name="validatable"></param>
        /// <param name="isCustom"></param>
        /// <param name="fieldGroups"></param>
        /// <param name="createdDt"></param>
        /// <returns> A new <see cref="Models.Extractor"/> instance for mocking. </returns>
        public static Extractor Extractor(string identifier = null, string name = null, string namePlural = null, ExtractorBaseExtractor baseExtractor = null, Organization organization = null, string category = null, bool validatable = default, bool? isCustom = null, IEnumerable<FieldGroup> fieldGroups = null, DateTimeOffset? createdDt = null)
        {
            fieldGroups ??= new List<FieldGroup>();

            return new Extractor(identifier, name, namePlural, baseExtractor, organization, category, validatable, isCustom, fieldGroups?.ToList(), createdDt);
        }

        /// <summary> Initializes a new instance of ExtractorBaseExtractor. </summary>
        /// <param name="identifier"> Uniquely identify an extractor. </param>
        /// <param name="name"></param>
        /// <param name="namePlural"></param>
        /// <param name="validatable"></param>
        /// <param name="isCustom"></param>
        /// <param name="createdDt"></param>
        /// <returns> A new <see cref="Models.ExtractorBaseExtractor"/> instance for mocking. </returns>
        public static ExtractorBaseExtractor ExtractorBaseExtractor(string identifier = null, string name = null, string namePlural = null, bool validatable = default, bool? isCustom = null, DateTimeOffset? createdDt = null)
        {
            return new ExtractorBaseExtractor(identifier, name, namePlural, validatable, isCustom, createdDt);
        }

        /// <summary> Initializes a new instance of DataField. </summary>
        /// <param name="categoryLabel"> The label of the category that this field will be put into. If not provided, the field will be put into the default category. If no category exists with the specified label, a new category will be created. </param>
        /// <param name="field"> The field to be created. </param>
        /// <param name="dataPoint"> The data point to be created for this field. If a data point with the same slug and collection already exists, it will be reused. </param>
        /// <returns> A new <see cref="Models.DataField"/> instance for mocking. </returns>
        public static DataField DataField(string categoryLabel = null, DataFieldField field = null, DataFieldDataPoint dataPoint = null)
        {
            return new DataField(categoryLabel, field, dataPoint);
        }

        /// <summary> Initializes a new instance of DataFieldField. </summary>
        /// <param name="label"></param>
        /// <param name="mandatory"></param>
        /// <param name="showDropdown"></param>
        /// <param name="autoValidationThreshold"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="label"/> is null. </exception>
        /// <returns> A new <see cref="Models.DataFieldField"/> instance for mocking. </returns>
        public static DataFieldField DataFieldField(string label = null, bool mandatory = default, bool showDropdown = default, float? autoValidationThreshold = null)
        {
            if (label == null)
            {
                throw new ArgumentNullException(nameof(label));
            }

            return new DataFieldField(label, mandatory, showDropdown, autoValidationThreshold);
        }

        /// <summary> Initializes a new instance of DataFieldDataPoint. </summary>
        /// <param name="identifier"> Uniquely identify a data point. </param>
        /// <param name="name"></param>
        /// <param name="slug"></param>
        /// <param name="description"></param>
        /// <param name="type"> The different data types of annotations. </param>
        /// <param name="multiple"></param>
        /// <param name="noRect"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/>, <paramref name="name"/> or <paramref name="slug"/> is null. </exception>
        /// <returns> A new <see cref="Models.DataFieldDataPoint"/> instance for mocking. </returns>
        public static DataFieldDataPoint DataFieldDataPoint(string identifier = null, string name = null, string slug = null, string description = null, AnnotationContentType type = default, bool multiple = default, bool noRect = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (slug == null)
            {
                throw new ArgumentNullException(nameof(slug));
            }

            return new DataFieldDataPoint(identifier, name, slug, description, type, multiple, noRect);
        }

        /// <summary> Initializes a new instance of PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of items in results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema(int count = default, string next = null, string previous = null, IEnumerable<Document> results = null)
        {
            results ??= new List<Document>();

            return new PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of PathsL3R02CV3DocumentsGetResponses200ContentApplicationJsonSchemaAllof1. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsL3R02CV3DocumentsGetResponses200ContentApplicationJsonSchemaAllof1"/> instance for mocking. </returns>
        public static PathsL3R02CV3DocumentsGetResponses200ContentApplicationJsonSchemaAllof1 PathsL3R02CV3DocumentsGetResponses200ContentApplicationJsonSchemaAllof1(IEnumerable<Document> results = null)
        {
            results ??= new List<Document>();

            return new PathsL3R02CV3DocumentsGetResponses200ContentApplicationJsonSchemaAllof1(results?.ToList());
        }

        /// <summary> Initializes a new instance of Meta. </summary>
        /// <param name="identifier"> Uniquely identify a document. </param>
        /// <param name="fileName"> Optional filename of the file. </param>
        /// <param name="ready"> If true, the document has finished processing. Particularly useful if an endpoint request specified wait=False, when polling use this variable to determine when to stop polling. </param>
        /// <param name="readyDt"> The datetime when the document was ready. </param>
        /// <param name="failed"> If true, some exception was raised during processing. Check the &apos;error&apos; field of the main return object. </param>
        /// <param name="expiryTime"> The date/time in ISO-8601 format when the document will be automatically deleted.  Defaults to no expiry. </param>
        /// <param name="language"> The document&apos;s language. </param>
        /// <param name="pdf"> The URL to the document&apos;s pdf (if the uploaded document is not already pdf, it&apos;s converted to pdf as part of the parsing process). </param>
        /// <param name="parentDocument"> If this document is part of a splitted document, this attribute points to the original document that this document is splitted from. </param>
        /// <param name="childDocuments"> If this document has been splitted into a number of child documents, this attribute points to those child documents. </param>
        /// <param name="pages"> The document&apos;s pages. </param>
        /// <param name="isVerified"> This is true if the &apos;confirm&apos; button has been clicked in the Affinda validation tool. </param>
        /// <param name="reviewUrl"> Signed URL (valid for 60 minutes) to access the validation tool.  Not applicable for documents types such a resumes. </param>
        /// <param name="ocrConfidence"> The overall confidence in the conversion of image to text.  (only applicable for images or PDF documents without a text layer). </param>
        /// <param name="createdDt"></param>
        /// <param name="documentType"></param>
        /// <param name="regionBias"></param>
        /// <returns> A new <see cref="Models.Meta"/> instance for mocking. </returns>
        public static Meta Meta(string identifier = null, string fileName = null, bool? ready = null, DateTimeOffset? readyDt = null, bool? failed = null, string expiryTime = null, string language = null, string pdf = null, MetaParentDocument parentDocument = null, IEnumerable<MetaChildDocumentsItem> childDocuments = null, IEnumerable<PageMeta> pages = null, bool? isVerified = null, string reviewUrl = null, float? ocrConfidence = null, DateTimeOffset? createdDt = null, string documentType = null, RegionBias regionBias = null)
        {
            childDocuments ??= new List<MetaChildDocumentsItem>();
            pages ??= new List<PageMeta>();

            return new Meta(identifier, fileName, ready, readyDt, failed, expiryTime, language, pdf, parentDocument, childDocuments?.ToList(), pages?.ToList(), isVerified, reviewUrl, ocrConfidence, createdDt, documentType, regionBias);
        }

        /// <summary> Initializes a new instance of MetaParentDocument. </summary>
        /// <param name="identifier"> Uniquely identify a document. </param>
        /// <returns> A new <see cref="Models.MetaParentDocument"/> instance for mocking. </returns>
        public static MetaParentDocument MetaParentDocument(string identifier = null)
        {
            return new MetaParentDocument(identifier);
        }

        /// <summary> Initializes a new instance of MetaChildDocumentsItem. </summary>
        /// <param name="identifier"> Uniquely identify a document. </param>
        /// <returns> A new <see cref="Models.MetaChildDocumentsItem"/> instance for mocking. </returns>
        public static MetaChildDocumentsItem MetaChildDocumentsItem(string identifier = null)
        {
            return new MetaChildDocumentsItem(identifier);
        }

        /// <summary> Initializes a new instance of DataPoint. </summary>
        /// <param name="identifier"> Uniquely identify a data point. </param>
        /// <param name="name"></param>
        /// <param name="slug"></param>
        /// <param name="description"></param>
        /// <param name="annotationContentType"> The different data types of annotations. </param>
        /// <param name="organization"></param>
        /// <param name="extractor"> Uniquely identify an extractor. </param>
        /// <param name="multiple"></param>
        /// <param name="noRect"></param>
        /// <param name="similarTo"></param>
        /// <param name="displayEnumValue"></param>
        /// <param name="children"></param>
        /// <returns> A new <see cref="Models.DataPoint"/> instance for mocking. </returns>
        public static DataPoint DataPoint(string identifier = null, string name = null, string slug = null, string description = null, AnnotationContentType annotationContentType = default, Organization organization = null, string extractor = null, bool? multiple = null, bool? noRect = null, IEnumerable<string> similarTo = null, bool? displayEnumValue = null, IEnumerable<DataPoint> children = null)
        {
            similarTo ??= new List<string>();
            children ??= new List<DataPoint>();

            return new DataPoint(identifier, name, slug, description, annotationContentType, organization, extractor, multiple, noRect, similarTo?.ToList(), displayEnumValue, children?.ToList());
        }

        /// <summary> Initializes a new instance of PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of items in results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema(int count = default, string next = null, string previous = null, IEnumerable<DataPointChoice> results = null)
        {
            results ??= new List<DataPointChoice>();

            return new PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Paths4K6IzqV3DataPointChoicesGetResponses200ContentApplicationJsonSchemaAllof1. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths4K6IzqV3DataPointChoicesGetResponses200ContentApplicationJsonSchemaAllof1"/> instance for mocking. </returns>
        public static Paths4K6IzqV3DataPointChoicesGetResponses200ContentApplicationJsonSchemaAllof1 Paths4K6IzqV3DataPointChoicesGetResponses200ContentApplicationJsonSchemaAllof1(IEnumerable<DataPointChoice> results = null)
        {
            results ??= new List<DataPointChoice>();

            return new Paths4K6IzqV3DataPointChoicesGetResponses200ContentApplicationJsonSchemaAllof1(results?.ToList());
        }

        /// <summary> Initializes a new instance of Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of items in results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema(int count = default, string next = null, string previous = null, IEnumerable<Annotation> results = null)
        {
            results ??= new List<Annotation>();

            return new Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Paths1Dgz0V9V3AnnotationsGetResponses200ContentApplicationJsonSchemaAllof1. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths1Dgz0V9V3AnnotationsGetResponses200ContentApplicationJsonSchemaAllof1"/> instance for mocking. </returns>
        public static Paths1Dgz0V9V3AnnotationsGetResponses200ContentApplicationJsonSchemaAllof1 Paths1Dgz0V9V3AnnotationsGetResponses200ContentApplicationJsonSchemaAllof1(IEnumerable<Annotation> results = null)
        {
            results ??= new List<Annotation>();

            return new Paths1Dgz0V9V3AnnotationsGetResponses200ContentApplicationJsonSchemaAllof1(results?.ToList());
        }

        /// <summary> Initializes a new instance of PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of items in results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema(int count = default, string next = null, string previous = null, IEnumerable<OrganizationMembership> results = null)
        {
            results ??= new List<OrganizationMembership>();

            return new PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Paths93Fa0ZV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchemaAllof1. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths93Fa0ZV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchemaAllof1"/> instance for mocking. </returns>
        public static Paths93Fa0ZV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchemaAllof1 Paths93Fa0ZV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchemaAllof1(IEnumerable<OrganizationMembership> results = null)
        {
            results ??= new List<OrganizationMembership>();

            return new Paths93Fa0ZV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchemaAllof1(results?.ToList());
        }

        /// <summary> Initializes a new instance of OrganizationMembership. </summary>
        /// <param name="identifier"> A random string that uniquely identify the resource. </param>
        /// <param name="organization"> Uniquely identify an organization. </param>
        /// <param name="user"></param>
        /// <param name="role"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/>, <paramref name="organization"/> or <paramref name="user"/> is null. </exception>
        /// <returns> A new <see cref="Models.OrganizationMembership"/> instance for mocking. </returns>
        public static OrganizationMembership OrganizationMembership(string identifier = null, string organization = null, User user = null, OrganizationRole role = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (organization == null)
            {
                throw new ArgumentNullException(nameof(organization));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            return new OrganizationMembership(identifier, organization, user, role);
        }

        /// <summary> Initializes a new instance of Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of items in results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema(int count = default, string next = null, string previous = null, IEnumerable<Invitation> results = null)
        {
            results ??= new List<Invitation>();

            return new Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of PathsKhpbbuV3InvitationsGetResponses200ContentApplicationJsonSchemaAllof1. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsKhpbbuV3InvitationsGetResponses200ContentApplicationJsonSchemaAllof1"/> instance for mocking. </returns>
        public static PathsKhpbbuV3InvitationsGetResponses200ContentApplicationJsonSchemaAllof1 PathsKhpbbuV3InvitationsGetResponses200ContentApplicationJsonSchemaAllof1(IEnumerable<Invitation> results = null)
        {
            results ??= new List<Invitation>();

            return new PathsKhpbbuV3InvitationsGetResponses200ContentApplicationJsonSchemaAllof1(results?.ToList());
        }

        /// <summary> Initializes a new instance of Invitation. </summary>
        /// <param name="identifier"> Uniquely identify an invitation. </param>
        /// <param name="organization"></param>
        /// <param name="email"> The email which the invitation is sent to. </param>
        /// <param name="role"></param>
        /// <param name="status"></param>
        /// <param name="expiryDate"> The date after which the invitation expires. Default is 10 days from now. </param>
        /// <param name="invitedBy"></param>
        /// <param name="respondedBy"></param>
        /// <param name="createdDt"></param>
        /// <returns> A new <see cref="Models.Invitation"/> instance for mocking. </returns>
        public static Invitation Invitation(string identifier = null, Organization organization = null, string email = null, OrganizationRole? role = null, InvitationStatus? status = null, DateTimeOffset? expiryDate = null, User invitedBy = null, InvitationRespondedBy respondedBy = null, DateTimeOffset? createdDt = null)
        {
            return new Invitation(identifier, organization, email, role, status, expiryDate, invitedBy, respondedBy, createdDt);
        }

        /// <summary> Initializes a new instance of PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of items in results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema(int count = default, string next = null, string previous = null, IEnumerable<ResthookSubscription> results = null)
        {
            results ??= new List<ResthookSubscription>();

            return new PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Paths1Qojy9V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchemaAllof1. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths1Qojy9V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchemaAllof1"/> instance for mocking. </returns>
        public static Paths1Qojy9V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchemaAllof1 Paths1Qojy9V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchemaAllof1(IEnumerable<ResthookSubscription> results = null)
        {
            results ??= new List<ResthookSubscription>();

            return new Paths1Qojy9V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchemaAllof1(results?.ToList());
        }

        /// <summary> Initializes a new instance of ResthookSubscription. </summary>
        /// <param name="id"> Resthook subscription&apos;s ID. </param>
        /// <param name="event"> The event name to subscribe to. </param>
        /// <param name="organization"></param>
        /// <param name="targetUrl"> URL of the resthook&apos;s receiver. </param>
        /// <param name="active"> Resthooks only fire for active subscriptions. </param>
        /// <param name="autoDeactivated"> Resthook subscriptions can be auto deactivated if the receiver continuously returns error status code over a period of time. </param>
        /// <param name="autoDeactivateReason"> The reason for the subscription being auto deactivated. May contains the error response that the receiver returned. </param>
        /// <param name="version"> Version of the resthook subscription. Determines the resthook body being fired. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="organization"/>, <paramref name="targetUrl"/> or <paramref name="autoDeactivateReason"/> is null. </exception>
        /// <returns> A new <see cref="Models.ResthookSubscription"/> instance for mocking. </returns>
        public static ResthookSubscription ResthookSubscription(int id = default, ResthookEvent @event = default, Organization organization = null, string targetUrl = null, bool active = default, bool autoDeactivated = default, string autoDeactivateReason = null, ResthookSubscriptionVersion version = default)
        {
            if (organization == null)
            {
                throw new ArgumentNullException(nameof(organization));
            }
            if (targetUrl == null)
            {
                throw new ArgumentNullException(nameof(targetUrl));
            }
            if (autoDeactivateReason == null)
            {
                throw new ArgumentNullException(nameof(autoDeactivateReason));
            }

            return new ResthookSubscription(id, @event, organization, targetUrl, active, autoDeactivated, autoDeactivateReason, version);
        }

        /// <summary> Initializes a new instance of OccupationGroup. </summary>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="children"></param>
        /// <returns> A new <see cref="Models.OccupationGroup"/> instance for mocking. </returns>
        public static OccupationGroup OccupationGroup(int code = default, string name = null, IEnumerable<OccupationGroup> children = null)
        {
            children ??= new List<OccupationGroup>();

            return new OccupationGroup(code, name, children?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearch. </summary>
        /// <param name="count"> Total number of results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="parameters"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearch"/> instance for mocking. </returns>
        public static JobDescriptionSearch JobDescriptionSearch(int? count = null, string next = null, string previous = null, JobDescriptionSearchParameters parameters = null, IEnumerable<JobDescriptionSearchResult> results = null)
        {
            results ??= new List<JobDescriptionSearchResult>();

            return new JobDescriptionSearch(count, next, previous, parameters, results?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchResult. </summary>
        /// <param name="identifier"> A random string that uniquely identify the resource. </param>
        /// <param name="score"></param>
        /// <param name="pdf"></param>
        /// <param name="jobTitle"></param>
        /// <param name="managementLevel"></param>
        /// <param name="experience"></param>
        /// <param name="skills"></param>
        /// <param name="languages"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="searchExpression"></param>
        /// <param name="organizationName"></param>
        /// <param name="customData"> Dictionary of &lt;components·nqbw24·schemas·customdatasearchscorecomponent·additionalproperties&gt;. </param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchResult"/> instance for mocking. </returns>
        public static JobDescriptionSearchResult JobDescriptionSearchResult(string identifier = null, float score = default, string pdf = null, JobTitleSearchScoreComponent jobTitle = null, ManagementLevelSearchScoreComponent managementLevel = null, ExperienceSearchScoreComponent experience = null, SkillsSearchScoreComponent skills = null, LanguagesSearchScoreComponent languages = null, LocationSearchScoreComponent location = null, EducationSearchScoreComponent education = null, OccupationGroupSearchScoreComponent occupationGroup = null, SearchExpressionSearchScoreComponent searchExpression = null, string organizationName = null, IReadOnlyDictionary<string, ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties> customData = null)
        {
            customData ??= new Dictionary<string, ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties>();

            return new JobDescriptionSearchResult(identifier, score, pdf, jobTitle, managementLevel, experience, skills, languages, location, education, occupationGroup, searchExpression, organizationName, customData);
        }

        /// <summary> Initializes a new instance of JobTitleSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.JobTitleSearchScoreComponent"/> instance for mocking. </returns>
        public static JobTitleSearchScoreComponent JobTitleSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new JobTitleSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of ManagementLevelSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.ManagementLevelSearchScoreComponent"/> instance for mocking. </returns>
        public static ManagementLevelSearchScoreComponent ManagementLevelSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new ManagementLevelSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of ExperienceSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.ExperienceSearchScoreComponent"/> instance for mocking. </returns>
        public static ExperienceSearchScoreComponent ExperienceSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new ExperienceSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of SkillsSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.SkillsSearchScoreComponent"/> instance for mocking. </returns>
        public static SkillsSearchScoreComponent SkillsSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new SkillsSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of LanguagesSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.LanguagesSearchScoreComponent"/> instance for mocking. </returns>
        public static LanguagesSearchScoreComponent LanguagesSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new LanguagesSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of LocationSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.LocationSearchScoreComponent"/> instance for mocking. </returns>
        public static LocationSearchScoreComponent LocationSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new LocationSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of EducationSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.EducationSearchScoreComponent"/> instance for mocking. </returns>
        public static EducationSearchScoreComponent EducationSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new EducationSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of OccupationGroupSearchScoreComponent. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.OccupationGroupSearchScoreComponent"/> instance for mocking. </returns>
        public static OccupationGroupSearchScoreComponent OccupationGroupSearchScoreComponent(string value = null, string label = null, float? score = null)
        {
            return new OccupationGroupSearchScoreComponent(value, label, score);
        }

        /// <summary> Initializes a new instance of SearchExpressionSearchScoreComponent. </summary>
        /// <param name="label"></param>
        /// <param name="value"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.SearchExpressionSearchScoreComponent"/> instance for mocking. </returns>
        public static SearchExpressionSearchScoreComponent SearchExpressionSearchScoreComponent(string label = null, string value = null, float? score = null)
        {
            return new SearchExpressionSearchScoreComponent(label, value, score);
        }

        /// <summary> Initializes a new instance of ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties. </summary>
        /// <param name="value"></param>
        /// <param name="label"></param>
        /// <param name="score"></param>
        /// <returns> A new <see cref="Models.ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties"/> instance for mocking. </returns>
        public static ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties(string value = null, string label = null, float? score = null)
        {
            return new ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties(value, label, score);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetail. </summary>
        /// <param name="jobTitle"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="skills"></param>
        /// <param name="experience"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="languages"></param>
        /// <param name="managementLevel"></param>
        /// <param name="searchExpression"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetail"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetail JobDescriptionSearchDetail(JobDescriptionSearchDetailJobTitle jobTitle = null, JobDescriptionSearchDetailLocation location = null, JobDescriptionSearchDetailEducation education = null, JobDescriptionSearchDetailSkills skills = null, JobDescriptionSearchDetailExperience experience = null, JobDescriptionSearchDetailOccupationGroup occupationGroup = null, JobDescriptionSearchDetailLanguages languages = null, JobDescriptionSearchDetailManagementLevel managementLevel = null, JobDescriptionSearchDetailSearchExpression searchExpression = null)
        {
            return new JobDescriptionSearchDetail(jobTitle, location, education, skills, experience, occupationGroup, languages, managementLevel, searchExpression);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailJobTitle. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailJobTitle"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailJobTitle JobDescriptionSearchDetailJobTitle(IEnumerable<string> missing = null, JobDescriptionSearchDetailJobTitleValue value = null)
        {
            missing ??= new List<string>();

            return new JobDescriptionSearchDetailJobTitle(missing?.ToList(), value);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailJobTitleValue. </summary>
        /// <param name="name"></param>
        /// <param name="companyName"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailJobTitleValue"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailJobTitleValue JobDescriptionSearchDetailJobTitleValue(string name = null, string companyName = null, bool? match = null)
        {
            return new JobDescriptionSearchDetailJobTitleValue(name, companyName, match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailLocation. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailLocation"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailLocation JobDescriptionSearchDetailLocation(IEnumerable<ResumeSearchParametersLocation> missing = null, JobDescriptionSearchDetailLocationValue value = null)
        {
            missing ??= new List<ResumeSearchParametersLocation>();

            return new JobDescriptionSearchDetailLocation(missing?.ToList(), value);
        }

        /// <summary> Initializes a new instance of Location. </summary>
        /// <param name="formatted"></param>
        /// <param name="postalCode"></param>
        /// <param name="state"></param>
        /// <param name="country"></param>
        /// <param name="countryCode"> Two letter country code (ISO 3166-1 alpha-2). </param>
        /// <param name="rawInput"></param>
        /// <param name="streetNumber"></param>
        /// <param name="street"></param>
        /// <param name="apartmentNumber"></param>
        /// <param name="city"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <returns> A new <see cref="Models.Location"/> instance for mocking. </returns>
        public static Location Location(string formatted = null, string postalCode = null, string state = null, string country = null, string countryCode = null, string rawInput = null, string streetNumber = null, string street = null, string apartmentNumber = null, string city = null, float? latitude = null, float? longitude = null)
        {
            return new Location(formatted, postalCode, state, country, countryCode, rawInput, streetNumber, street, apartmentNumber, city, latitude, longitude);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailEducation. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailEducation"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailEducation JobDescriptionSearchDetailEducation(JobDescriptionSearchDetailEducationMissing missing = null, JobDescriptionSearchDetailEducationValue value = null)
        {
            return new JobDescriptionSearchDetailEducation(missing, value);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailEducationMissing. </summary>
        /// <param name="degrees"></param>
        /// <param name="degreeTypes"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailEducationMissing"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailEducationMissing JobDescriptionSearchDetailEducationMissing(IEnumerable<string> degrees = null, IEnumerable<string> degreeTypes = null)
        {
            degrees ??= new List<string>();
            degreeTypes ??= new List<string>();

            return new JobDescriptionSearchDetailEducationMissing(degrees?.ToList(), degreeTypes?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailEducationValue. </summary>
        /// <param name="degrees"></param>
        /// <param name="degreeTypes"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailEducationValue"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailEducationValue JobDescriptionSearchDetailEducationValue(IEnumerable<string> degrees = null, IEnumerable<string> degreeTypes = null, bool? match = null)
        {
            degrees ??= new List<string>();
            degreeTypes ??= new List<string>();

            return new JobDescriptionSearchDetailEducationValue(degrees?.ToList(), degreeTypes?.ToList(), match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailSkills. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailSkills"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailSkills JobDescriptionSearchDetailSkills(IEnumerable<ResumeSearchParametersSkill> missing = null, IEnumerable<JobDescriptionSearchDetailSkillsValueItem> value = null)
        {
            missing ??= new List<ResumeSearchParametersSkill>();
            value ??= new List<JobDescriptionSearchDetailSkillsValueItem>();

            return new JobDescriptionSearchDetailSkills(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailSkillsValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailSkillsValueItem"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailSkillsValueItem JobDescriptionSearchDetailSkillsValueItem(string name = null, bool? match = null)
        {
            return new JobDescriptionSearchDetailSkillsValueItem(name, match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailExperience. </summary>
        /// <param name="minimumExperience"></param>
        /// <param name="maximumExperience"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailExperience"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailExperience JobDescriptionSearchDetailExperience(int? minimumExperience = null, int? maximumExperience = null, bool? match = null)
        {
            return new JobDescriptionSearchDetailExperience(minimumExperience, maximumExperience, match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailOccupationGroup. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailOccupationGroup"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailOccupationGroup JobDescriptionSearchDetailOccupationGroup(IEnumerable<int> missing = null, JobDescriptionSearchDetailOccupationGroupValue value = null)
        {
            missing ??= new List<int>();

            return new JobDescriptionSearchDetailOccupationGroup(missing?.ToList(), value);
        }

        /// <summary> Initializes a new instance of OccupationGroupSearchResult. </summary>
        /// <param name="match"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="children"></param>
        /// <param name="parents"></param>
        /// <returns> A new <see cref="Models.OccupationGroupSearchResult"/> instance for mocking. </returns>
        public static OccupationGroupSearchResult OccupationGroupSearchResult(bool? match = null, int code = default, string name = null, IEnumerable<OccupationGroup> children = null, IEnumerable<OccupationGroup> parents = null)
        {
            children ??= new List<OccupationGroup>();
            parents ??= new List<OccupationGroup>();

            return new OccupationGroupSearchResult(match, code, name, children?.ToList(), parents?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailLanguages. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailLanguages"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailLanguages JobDescriptionSearchDetailLanguages(IEnumerable<ResumeSearchParametersSkill> missing = null, IEnumerable<JobDescriptionSearchDetailLanguagesValueItem> value = null)
        {
            missing ??= new List<ResumeSearchParametersSkill>();
            value ??= new List<JobDescriptionSearchDetailLanguagesValueItem>();

            return new JobDescriptionSearchDetailLanguages(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailLanguagesValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailLanguagesValueItem"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailLanguagesValueItem JobDescriptionSearchDetailLanguagesValueItem(string name = null, bool? match = null)
        {
            return new JobDescriptionSearchDetailLanguagesValueItem(name, match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailManagementLevel. </summary>
        /// <param name="level"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailManagementLevel"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailManagementLevel JobDescriptionSearchDetailManagementLevel(ManagementLevel? level = null, bool? match = null)
        {
            return new JobDescriptionSearchDetailManagementLevel(level, match);
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchDetailSearchExpression. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchDetailSearchExpression"/> instance for mocking. </returns>
        public static JobDescriptionSearchDetailSearchExpression JobDescriptionSearchDetailSearchExpression(IEnumerable<string> missing = null, IEnumerable<string> value = null)
        {
            missing ??= new List<string>();
            value ??= new List<string>();

            return new JobDescriptionSearchDetailSearchExpression(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchConfig. </summary>
        /// <param name="allowPdfDownload"></param>
        /// <param name="maxResults"> Maximum number of results that can be returned. Setting to &quot;null&quot; means no limitation. </param>
        /// <param name="displayJobTitle"></param>
        /// <param name="displayLocation"></param>
        /// <param name="displayYearsExperience"></param>
        /// <param name="displayOccupationGroup"></param>
        /// <param name="displayEducation"></param>
        /// <param name="displaySkills"></param>
        /// <param name="displayLanguages"></param>
        /// <param name="displayManagementLevel"></param>
        /// <param name="displayKeywords"></param>
        /// <param name="weightJobTitle"></param>
        /// <param name="weightLocation"></param>
        /// <param name="weightYearsExperience"></param>
        /// <param name="weightOccupationGroup"></param>
        /// <param name="weightEducation"></param>
        /// <param name="weightSkills"></param>
        /// <param name="weightLanguages"></param>
        /// <param name="weightManagementLevel"></param>
        /// <param name="weightKeywords"></param>
        /// <param name="indices"> List of index names. </param>
        /// <param name="showIndexDropdown"> Controls whether or not the index dropdown is displayed to the user. </param>
        /// <param name="searchToolTheme"> Customize the theme of the embeded search tool. </param>
        /// <param name="userId"> ID of the logged in user. </param>
        /// <param name="username"> Username of the logged in user. </param>
        /// <param name="actions"> A list of actions to show in the dropdown in the embedded search tool. </param>
        /// <param name="hideToolbar"> Hide the reset/import toolbar. </param>
        /// <param name="customFieldsConfig"></param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchConfig"/> instance for mocking. </returns>
        public static JobDescriptionSearchConfig JobDescriptionSearchConfig(bool? allowPdfDownload = null, int? maxResults = null, bool? displayJobTitle = null, bool? displayLocation = null, bool? displayYearsExperience = null, bool? displayOccupationGroup = null, bool? displayEducation = null, bool? displaySkills = null, bool? displayLanguages = null, bool? displayManagementLevel = null, bool? displayKeywords = null, float? weightJobTitle = null, float? weightLocation = null, float? weightYearsExperience = null, float? weightOccupationGroup = null, float? weightEducation = null, float? weightSkills = null, float? weightLanguages = null, float? weightManagementLevel = null, float? weightKeywords = null, IEnumerable<string> indices = null, bool? showIndexDropdown = null, IDictionary<string, object> searchToolTheme = null, int? userId = null, string username = null, IEnumerable<SearchConfigAction> actions = null, bool? hideToolbar = null, IEnumerable<CustomFieldConfig> customFieldsConfig = null)
        {
            indices ??= new List<string>();
            searchToolTheme ??= new Dictionary<string, object>();
            actions ??= new List<SearchConfigAction>();
            customFieldsConfig ??= new List<CustomFieldConfig>();

            return new JobDescriptionSearchConfig(allowPdfDownload, maxResults, displayJobTitle, displayLocation, displayYearsExperience, displayOccupationGroup, displayEducation, displaySkills, displayLanguages, displayManagementLevel, displayKeywords, weightJobTitle, weightLocation, weightYearsExperience, weightOccupationGroup, weightEducation, weightSkills, weightLanguages, weightManagementLevel, weightKeywords, indices?.ToList(), showIndexDropdown, searchToolTheme, userId, username, actions?.ToList(), hideToolbar, customFieldsConfig?.ToList());
        }

        /// <summary> Initializes a new instance of JobDescriptionSearchEmbed. </summary>
        /// <param name="url"> The signed URL for the embedable search tool. </param>
        /// <returns> A new <see cref="Models.JobDescriptionSearchEmbed"/> instance for mocking. </returns>
        public static JobDescriptionSearchEmbed JobDescriptionSearchEmbed(string url = null)
        {
            return new JobDescriptionSearchEmbed(url);
        }

        /// <summary> Initializes a new instance of PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of indexes in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema(int? count = null, string next = null, string previous = null, IEnumerable<Get200ApplicationJsonPropertiesItemsItem> results = null)
        {
            results ??= new List<Get200ApplicationJsonPropertiesItemsItem>();

            return new PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Get200ApplicationJsonPropertiesItemsItem. </summary>
        /// <param name="name"></param>
        /// <param name="documentType"></param>
        /// <returns> A new <see cref="Models.Get200ApplicationJsonPropertiesItemsItem"/> instance for mocking. </returns>
        public static Get200ApplicationJsonPropertiesItemsItem Get200ApplicationJsonPropertiesItemsItem(string name = null, GetResponses200ContentApplicationJsonSchemaResultsItemDocumentType? documentType = null)
        {
            return new Get200ApplicationJsonPropertiesItemsItem(name, documentType);
        }

        /// <summary> Initializes a new instance of Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema. </summary>
        /// <param name="name"></param>
        /// <param name="documentType"></param>
        /// <returns> A new <see cref="Models.Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema(string name = null, Enum19? documentType = null)
        {
            return new Paths1TvfqeiV3IndexPostResponses201ContentApplicationJsonSchema(name, documentType);
        }

        /// <summary> Initializes a new instance of PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of indexed documents in result. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema(int? count = null, string next = null, string previous = null, IEnumerable<Paths1Kdm1ZxV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems> results = null)
        {
            results ??= new List<Paths1Kdm1ZxV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems>();

            return new PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Paths1Kdm1ZxV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems. </summary>
        /// <param name="document"></param>
        /// <returns> A new <see cref="Models.Paths1Kdm1ZxV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems"/> instance for mocking. </returns>
        public static Paths1Kdm1ZxV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems Paths1Kdm1ZxV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems(string document = null)
        {
            return new Paths1Kdm1ZxV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchemaPropertiesResultsItems(document);
        }

        /// <summary> Initializes a new instance of PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema. </summary>
        /// <param name="document"> Unique identifier for the document. </param>
        /// <returns> A new <see cref="Models.PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema(string document = null)
        {
            return new PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema(document);
        }

        /// <summary> Initializes a new instance of ResumeSearch. </summary>
        /// <param name="count"> Total number of results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="parameters"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.ResumeSearch"/> instance for mocking. </returns>
        public static ResumeSearch ResumeSearch(int? count = null, string next = null, string previous = null, ResumeSearchParameters parameters = null, IEnumerable<ResumeSearchResult> results = null)
        {
            results ??= new List<ResumeSearchResult>();

            return new ResumeSearch(count, next, previous, parameters, results?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchResult. </summary>
        /// <param name="identifier"> A random string that uniquely identify the resource. </param>
        /// <param name="score"></param>
        /// <param name="pdf"></param>
        /// <param name="name"></param>
        /// <param name="jobTitle"></param>
        /// <param name="managementLevel"></param>
        /// <param name="experience"></param>
        /// <param name="skills"></param>
        /// <param name="languages"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="searchExpression"></param>
        /// <param name="customData"> Dictionary of &lt;components·nqbw24·schemas·customdatasearchscorecomponent·additionalproperties&gt;. </param>
        /// <returns> A new <see cref="Models.ResumeSearchResult"/> instance for mocking. </returns>
        public static ResumeSearchResult ResumeSearchResult(string identifier = null, float score = default, string pdf = null, string name = null, JobTitleSearchScoreComponent jobTitle = null, ManagementLevelSearchScoreComponent managementLevel = null, ExperienceSearchScoreComponent experience = null, SkillsSearchScoreComponent skills = null, LanguagesSearchScoreComponent languages = null, LocationSearchScoreComponent location = null, EducationSearchScoreComponent education = null, OccupationGroupSearchScoreComponent occupationGroup = null, SearchExpressionSearchScoreComponent searchExpression = null, IReadOnlyDictionary<string, ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties> customData = null)
        {
            customData ??= new Dictionary<string, ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties>();

            return new ResumeSearchResult(identifier, score, pdf, name, jobTitle, managementLevel, experience, skills, languages, location, education, occupationGroup, searchExpression, customData);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetail. </summary>
        /// <param name="jobTitle"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="skills"></param>
        /// <param name="experience"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="languages"></param>
        /// <param name="managementLevel"></param>
        /// <param name="searchExpression"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetail"/> instance for mocking. </returns>
        public static ResumeSearchDetail ResumeSearchDetail(ResumeSearchDetailJobTitle jobTitle = null, ResumeSearchDetailLocation location = null, ResumeSearchDetailEducation education = null, ResumeSearchDetailSkills skills = null, ResumeSearchDetailExperience experience = null, ResumeSearchDetailOccupationGroup occupationGroup = null, ResumeSearchDetailLanguages languages = null, ResumeSearchDetailManagementLevel managementLevel = null, ResumeSearchDetailSearchExpression searchExpression = null)
        {
            return new ResumeSearchDetail(jobTitle, location, education, skills, experience, occupationGroup, languages, managementLevel, searchExpression);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailJobTitle. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailJobTitle"/> instance for mocking. </returns>
        public static ResumeSearchDetailJobTitle ResumeSearchDetailJobTitle(IEnumerable<string> missing = null, IEnumerable<ResumeSearchDetailJobTitleValueItem> value = null)
        {
            missing ??= new List<string>();
            value ??= new List<ResumeSearchDetailJobTitleValueItem>();

            return new ResumeSearchDetailJobTitle(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailJobTitleValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="companyName"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailJobTitleValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailJobTitleValueItem ResumeSearchDetailJobTitleValueItem(string name = null, string startDate = null, string endDate = null, string companyName = null, bool? match = null)
        {
            return new ResumeSearchDetailJobTitleValueItem(name, startDate, endDate, companyName, match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailLocation. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailLocation"/> instance for mocking. </returns>
        public static ResumeSearchDetailLocation ResumeSearchDetailLocation(IEnumerable<ResumeSearchParametersLocation> missing = null, ResumeSearchDetailLocationValue value = null)
        {
            missing ??= new List<ResumeSearchParametersLocation>();

            return new ResumeSearchDetailLocation(missing?.ToList(), value);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailEducation. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailEducation"/> instance for mocking. </returns>
        public static ResumeSearchDetailEducation ResumeSearchDetailEducation(ResumeSearchDetailEducationMissing missing = null, IEnumerable<ResumeSearchDetailEducationValueItem> value = null)
        {
            value ??= new List<ResumeSearchDetailEducationValueItem>();

            return new ResumeSearchDetailEducation(missing, value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailEducationMissing. </summary>
        /// <param name="degrees"></param>
        /// <param name="highestDegreeTypes"></param>
        /// <param name="institutions"></param>
        /// <param name="currentStudent"></param>
        /// <param name="recentGraduate"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailEducationMissing"/> instance for mocking. </returns>
        public static ResumeSearchDetailEducationMissing ResumeSearchDetailEducationMissing(IEnumerable<string> degrees = null, IEnumerable<string> highestDegreeTypes = null, IEnumerable<string> institutions = null, bool? currentStudent = null, bool? recentGraduate = null)
        {
            degrees ??= new List<string>();
            highestDegreeTypes ??= new List<string>();
            institutions ??= new List<string>();

            return new ResumeSearchDetailEducationMissing(degrees?.ToList(), highestDegreeTypes?.ToList(), institutions?.ToList(), currentStudent, recentGraduate);
        }

        /// <summary> Initializes a new instance of Accreditation. </summary>
        /// <param name="education"></param>
        /// <param name="inputStr"></param>
        /// <param name="matchStr"></param>
        /// <param name="educationLevel"></param>
        /// <returns> A new <see cref="Models.Accreditation"/> instance for mocking. </returns>
        public static Accreditation Accreditation(string education = null, string inputStr = null, string matchStr = null, string educationLevel = null)
        {
            return new Accreditation(education, inputStr, matchStr, educationLevel);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailSkills. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailSkills"/> instance for mocking. </returns>
        public static ResumeSearchDetailSkills ResumeSearchDetailSkills(IEnumerable<ResumeSearchParametersSkill> missing = null, IEnumerable<ResumeSearchDetailSkillsValueItem> value = null)
        {
            missing ??= new List<ResumeSearchParametersSkill>();
            value ??= new List<ResumeSearchDetailSkillsValueItem>();

            return new ResumeSearchDetailSkills(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailSkillsValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="sources"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailSkillsValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailSkillsValueItem ResumeSearchDetailSkillsValueItem(string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, IEnumerable<ResumeSkillSourcesItem> sources = null, bool? match = null)
        {
            sources ??= new List<ResumeSkillSourcesItem>();

            return new ResumeSearchDetailSkillsValueItem(name, lastUsed, numberOfMonths, type, sources?.ToList(), match);
        }

        /// <summary> Initializes a new instance of ResumeSkill. </summary>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Models.ResumeSkill"/> instance for mocking. </returns>
        public static ResumeSkill ResumeSkill(string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, IEnumerable<ResumeSkillSourcesItem> sources = null)
        {
            sources ??= new List<ResumeSkillSourcesItem>();

            return new ResumeSkill(name, lastUsed, numberOfMonths, type, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSkillSourcesItem. </summary>
        /// <param name="section"></param>
        /// <param name="position"></param>
        /// <returns> A new <see cref="Models.ResumeSkillSourcesItem"/> instance for mocking. </returns>
        public static ResumeSkillSourcesItem ResumeSkillSourcesItem(ResumeSkillSourcesItemSection? section = null, int? position = null)
        {
            return new ResumeSkillSourcesItem(section, position);
        }

        /// <summary> Initializes a new instance of ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1. </summary>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1"/> instance for mocking. </returns>
        public static ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1 ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1(bool? match = null)
        {
            return new ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1(match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailExperience. </summary>
        /// <param name="years"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailExperience"/> instance for mocking. </returns>
        public static ResumeSearchDetailExperience ResumeSearchDetailExperience(int? years = null, bool? match = null)
        {
            return new ResumeSearchDetailExperience(years, match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailOccupationGroup. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailOccupationGroup"/> instance for mocking. </returns>
        public static ResumeSearchDetailOccupationGroup ResumeSearchDetailOccupationGroup(IEnumerable<int> missing = null, IEnumerable<OccupationGroupSearchResult> value = null)
        {
            missing ??= new List<int>();
            value ??= new List<OccupationGroupSearchResult>();

            return new ResumeSearchDetailOccupationGroup(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailLanguages. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailLanguages"/> instance for mocking. </returns>
        public static ResumeSearchDetailLanguages ResumeSearchDetailLanguages(IEnumerable<ResumeSearchParametersSkill> missing = null, IEnumerable<ResumeSearchDetailLanguagesValueItem> value = null)
        {
            missing ??= new List<ResumeSearchParametersSkill>();
            value ??= new List<ResumeSearchDetailLanguagesValueItem>();

            return new ResumeSearchDetailLanguages(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailLanguagesValueItem. </summary>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="sources"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailLanguagesValueItem"/> instance for mocking. </returns>
        public static ResumeSearchDetailLanguagesValueItem ResumeSearchDetailLanguagesValueItem(string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, IEnumerable<ResumeSkillSourcesItem> sources = null, bool? match = null)
        {
            sources ??= new List<ResumeSkillSourcesItem>();

            return new ResumeSearchDetailLanguagesValueItem(name, lastUsed, numberOfMonths, type, sources?.ToList(), match);
        }

        /// <summary> Initializes a new instance of Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1. </summary>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1"/> instance for mocking. </returns>
        public static Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1 Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1(bool? match = null)
        {
            return new Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1(match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailManagementLevel. </summary>
        /// <param name="level"></param>
        /// <param name="match"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailManagementLevel"/> instance for mocking. </returns>
        public static ResumeSearchDetailManagementLevel ResumeSearchDetailManagementLevel(ManagementLevel? level = null, bool? match = null)
        {
            return new ResumeSearchDetailManagementLevel(level, match);
        }

        /// <summary> Initializes a new instance of ResumeSearchDetailSearchExpression. </summary>
        /// <param name="missing"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.ResumeSearchDetailSearchExpression"/> instance for mocking. </returns>
        public static ResumeSearchDetailSearchExpression ResumeSearchDetailSearchExpression(IEnumerable<string> missing = null, IEnumerable<string> value = null)
        {
            missing ??= new List<string>();
            value ??= new List<string>();

            return new ResumeSearchDetailSearchExpression(missing?.ToList(), value?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchMatch. </summary>
        /// <param name="score"> The matching score between the provided resume and job description. </param>
        /// <param name="details"></param>
        /// <returns> A new <see cref="Models.ResumeSearchMatch"/> instance for mocking. </returns>
        public static ResumeSearchMatch ResumeSearchMatch(float? score = null, ResumeSearchMatchDetails details = null)
        {
            return new ResumeSearchMatch(score, details);
        }

        /// <summary> Initializes a new instance of ResumeSearchMatchDetails. </summary>
        /// <param name="jobTitle"></param>
        /// <param name="managementLevel"></param>
        /// <param name="experience"></param>
        /// <param name="skills"></param>
        /// <param name="languages"></param>
        /// <param name="location"></param>
        /// <param name="education"></param>
        /// <param name="occupationGroup"></param>
        /// <param name="searchExpression"></param>
        /// <returns> A new <see cref="Models.ResumeSearchMatchDetails"/> instance for mocking. </returns>
        public static ResumeSearchMatchDetails ResumeSearchMatchDetails(JobTitleSearchScoreComponent jobTitle = null, ManagementLevelSearchScoreComponent managementLevel = null, ExperienceSearchScoreComponent experience = null, SkillsSearchScoreComponent skills = null, LanguagesSearchScoreComponent languages = null, LocationSearchScoreComponent location = null, EducationSearchScoreComponent education = null, OccupationGroupSearchScoreComponent occupationGroup = null, SearchExpressionSearchScoreComponent searchExpression = null)
        {
            return new ResumeSearchMatchDetails(jobTitle, managementLevel, experience, skills, languages, location, education, occupationGroup, searchExpression);
        }

        /// <summary> Initializes a new instance of ResumeSearchConfig. </summary>
        /// <param name="allowPdfDownload"></param>
        /// <param name="maxResults"> Maximum number of results that can be returned. Setting to &quot;null&quot; means no limitation. </param>
        /// <param name="displayJobTitle"></param>
        /// <param name="displayLocation"></param>
        /// <param name="displayYearsExperience"></param>
        /// <param name="displayOccupationGroup"></param>
        /// <param name="displayEducation"></param>
        /// <param name="displaySkills"></param>
        /// <param name="displayLanguages"></param>
        /// <param name="displayManagementLevel"></param>
        /// <param name="displayKeywords"></param>
        /// <param name="weightJobTitle"></param>
        /// <param name="weightLocation"></param>
        /// <param name="weightYearsExperience"></param>
        /// <param name="weightOccupationGroup"></param>
        /// <param name="weightEducation"></param>
        /// <param name="weightSkills"></param>
        /// <param name="weightLanguages"></param>
        /// <param name="weightManagementLevel"></param>
        /// <param name="weightKeywords"></param>
        /// <param name="indices"> List of index names. </param>
        /// <param name="showIndexDropdown"> Controls whether or not the index dropdown is displayed to the user. </param>
        /// <param name="searchToolTheme"> Customize the theme of the embeded search tool. </param>
        /// <param name="userId"> ID of the logged in user. </param>
        /// <param name="username"> Username of the logged in user. </param>
        /// <param name="actions"> A list of actions to show in the dropdown in the embedded search tool. </param>
        /// <param name="hideToolbar"> Hide the reset/import toolbar. </param>
        /// <param name="customFieldsConfig"></param>
        /// <returns> A new <see cref="Models.ResumeSearchConfig"/> instance for mocking. </returns>
        public static ResumeSearchConfig ResumeSearchConfig(bool? allowPdfDownload = null, int? maxResults = null, bool? displayJobTitle = null, bool? displayLocation = null, bool? displayYearsExperience = null, bool? displayOccupationGroup = null, bool? displayEducation = null, bool? displaySkills = null, bool? displayLanguages = null, bool? displayManagementLevel = null, bool? displayKeywords = null, float? weightJobTitle = null, float? weightLocation = null, float? weightYearsExperience = null, float? weightOccupationGroup = null, float? weightEducation = null, float? weightSkills = null, float? weightLanguages = null, float? weightManagementLevel = null, float? weightKeywords = null, IEnumerable<string> indices = null, bool? showIndexDropdown = null, IDictionary<string, object> searchToolTheme = null, int? userId = null, string username = null, IEnumerable<SearchConfigAction> actions = null, bool? hideToolbar = null, IEnumerable<CustomFieldConfig> customFieldsConfig = null)
        {
            indices ??= new List<string>();
            searchToolTheme ??= new Dictionary<string, object>();
            actions ??= new List<SearchConfigAction>();
            customFieldsConfig ??= new List<CustomFieldConfig>();

            return new ResumeSearchConfig(allowPdfDownload, maxResults, displayJobTitle, displayLocation, displayYearsExperience, displayOccupationGroup, displayEducation, displaySkills, displayLanguages, displayManagementLevel, displayKeywords, weightJobTitle, weightLocation, weightYearsExperience, weightOccupationGroup, weightEducation, weightSkills, weightLanguages, weightManagementLevel, weightKeywords, indices?.ToList(), showIndexDropdown, searchToolTheme, userId, username, actions?.ToList(), hideToolbar, customFieldsConfig?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeSearchEmbed. </summary>
        /// <param name="url"> The signed URL for the embedable search tool. </param>
        /// <returns> A new <see cref="Models.ResumeSearchEmbed"/> instance for mocking. </returns>
        public static ResumeSearchEmbed ResumeSearchEmbed(string url = null)
        {
            return new ResumeSearchEmbed(url);
        }

        /// <summary> Initializes a new instance of Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema. </summary>
        /// <param name="count"> Number of items in results. </param>
        /// <param name="next"> URL to request next page of results. </param>
        /// <param name="previous"> URL to request previous page of results. </param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema"/> instance for mocking. </returns>
        public static Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema(int count = default, string next = null, string previous = null, IEnumerable<ApiUserWithoutKey> results = null)
        {
            results ??= new List<ApiUserWithoutKey>();

            return new Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema(count, next, previous, results?.ToList());
        }

        /// <summary> Initializes a new instance of Paths11PzrpaV3ApiUsersGetResponses200ContentApplicationJsonSchemaAllof1. </summary>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.Paths11PzrpaV3ApiUsersGetResponses200ContentApplicationJsonSchemaAllof1"/> instance for mocking. </returns>
        public static Paths11PzrpaV3ApiUsersGetResponses200ContentApplicationJsonSchemaAllof1 Paths11PzrpaV3ApiUsersGetResponses200ContentApplicationJsonSchemaAllof1(IEnumerable<ApiUserWithoutKey> results = null)
        {
            results ??= new List<ApiUserWithoutKey>();

            return new Paths11PzrpaV3ApiUsersGetResponses200ContentApplicationJsonSchemaAllof1(results?.ToList());
        }

        /// <summary> Initializes a new instance of ApiUserWithoutKey. </summary>
        /// <param name="id"> Uniquely identify a user. </param>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="email"></param>
        /// <param name="avatar"> URL of the user&apos;s avatar. </param>
        /// <param name="organizations"></param>
        /// <returns> A new <see cref="Models.ApiUserWithoutKey"/> instance for mocking. </returns>
        public static ApiUserWithoutKey ApiUserWithoutKey(int id = default, string name = null, string username = null, string email = null, string avatar = null, IEnumerable<ApiUserWithoutKeyOrganizationsItem> organizations = null)
        {
            organizations ??= new List<ApiUserWithoutKeyOrganizationsItem>();

            return new ApiUserWithoutKey(id, name, username, email, avatar, organizations?.ToList());
        }

        /// <summary> Initializes a new instance of ApiUserWithoutKeyOrganizationsItem. </summary>
        /// <param name="identifier"> Uniquely identify an organization. </param>
        /// <param name="name"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="Models.ApiUserWithoutKeyOrganizationsItem"/> instance for mocking. </returns>
        public static ApiUserWithoutKeyOrganizationsItem ApiUserWithoutKeyOrganizationsItem(string identifier = null, string name = null)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new ApiUserWithoutKeyOrganizationsItem(identifier, name);
        }

        /// <summary> Initializes a new instance of ApiUserWithKey. </summary>
        /// <param name="id"> Uniquely identify a user. </param>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="email"></param>
        /// <param name="avatar"> URL of the user&apos;s avatar. </param>
        /// <param name="organizations"></param>
        /// <param name="apiKey"> Use this key to authenticate with the API. </param>
        /// <returns> A new <see cref="Models.ApiUserWithKey"/> instance for mocking. </returns>
        public static ApiUserWithKey ApiUserWithKey(int id = default, string name = null, string username = null, string email = null, string avatar = null, IEnumerable<ApiUserWithKeyOrganizationsItem> organizations = null, string apiKey = null)
        {
            organizations ??= new List<ApiUserWithKeyOrganizationsItem>();

            return new ApiUserWithKey(id, name, username, email, avatar, organizations?.ToList(), apiKey);
        }

        /// <summary> Initializes a new instance of ApiUserWithKeyOrganizationsItem. </summary>
        /// <param name="identifier"> Uniquely identify an organization. </param>
        /// <param name="name"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="Models.ApiUserWithKeyOrganizationsItem"/> instance for mocking. </returns>
        public static ApiUserWithKeyOrganizationsItem ApiUserWithKeyOrganizationsItem(string identifier = null, string name = null)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new ApiUserWithKeyOrganizationsItem(identifier, name);
        }

        /// <summary> Initializes a new instance of ResumeData. </summary>
        /// <param name="name"></param>
        /// <param name="phoneNumbers"></param>
        /// <param name="phoneNumberDetails"></param>
        /// <param name="websites"></param>
        /// <param name="emails"></param>
        /// <param name="dateOfBirth"></param>
        /// <param name="location"></param>
        /// <param name="objective"></param>
        /// <param name="languages"></param>
        /// <param name="languageCodes"></param>
        /// <param name="summary"></param>
        /// <param name="totalYearsExperience"></param>
        /// <param name="headShot"> base64 encoded string. </param>
        /// <param name="education"></param>
        /// <param name="profession"> Prediction of the candidate&apos;s profession based on recent work experience. </param>
        /// <param name="linkedin"> Linkedin account associated with the candidate. </param>
        /// <param name="workExperience"></param>
        /// <param name="skills"></param>
        /// <param name="certifications"></param>
        /// <param name="publications"></param>
        /// <param name="referees"></param>
        /// <param name="sections"></param>
        /// <param name="isResumeProbability"> Probability that the given document is a resume. Values below 30 suggest that the document is not a resume. </param>
        /// <param name="rawText"> All of the raw text of the parsed resume, example is shortened for readability. </param>
        /// <param name="redactedText"> Redacted version of the text in the resume, removing PII. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ResumeData"/> instance for mocking. </returns>
        public static ResumeData ResumeData(ResumeDataName name = null, IEnumerable<string> phoneNumbers = null, IEnumerable<ResumeDataPhoneNumberDetailsItem> phoneNumberDetails = null, IEnumerable<string> websites = null, IEnumerable<string> emails = null, string dateOfBirth = null, Location location = null, string objective = null, IEnumerable<ResumeDataLanguagesItem> languages = null, IEnumerable<string> languageCodes = null, string summary = null, int? totalYearsExperience = null, byte[] headShot = null, IEnumerable<Education> education = null, string profession = null, string linkedin = null, IEnumerable<ResumeDataWorkExperienceItem> workExperience = null, IEnumerable<ResumeDataSkillsItem> skills = null, IEnumerable<string> certifications = null, IEnumerable<string> publications = null, IEnumerable<ResumeDataRefereesItem> referees = null, IEnumerable<ResumeDataSectionsItem> sections = null, int? isResumeProbability = null, string rawText = null, string redactedText = null, IDictionary<string, ComponentsEyyf0ZSchemasResumedataAdditionalproperties> additionalProperties = null)
        {
            phoneNumbers ??= new List<string>();
            phoneNumberDetails ??= new List<ResumeDataPhoneNumberDetailsItem>();
            websites ??= new List<string>();
            emails ??= new List<string>();
            languages ??= new List<ResumeDataLanguagesItem>();
            languageCodes ??= new List<string>();
            education ??= new List<Education>();
            workExperience ??= new List<ResumeDataWorkExperienceItem>();
            skills ??= new List<ResumeDataSkillsItem>();
            certifications ??= new List<string>();
            publications ??= new List<string>();
            referees ??= new List<ResumeDataRefereesItem>();
            sections ??= new List<ResumeDataSectionsItem>();
            additionalProperties ??= new Dictionary<string, ComponentsEyyf0ZSchemasResumedataAdditionalproperties>();

            return new ResumeData(name, phoneNumbers?.ToList(), phoneNumberDetails?.ToList(), websites?.ToList(), emails?.ToList(), dateOfBirth, location, objective, languages?.ToList(), languageCodes?.ToList(), summary, totalYearsExperience, headShot, education?.ToList(), profession, linkedin, workExperience?.ToList(), skills?.ToList(), certifications?.ToList(), publications?.ToList(), referees?.ToList(), sections?.ToList(), isResumeProbability, rawText, redactedText, additionalProperties);
        }

        /// <summary> Initializes a new instance of ResumeDataWorkExperienceItem. </summary>
        /// <param name="id"></param>
        /// <param name="jobTitle"></param>
        /// <param name="socCode"></param>
        /// <param name="socName"></param>
        /// <param name="organization"></param>
        /// <param name="industry"></param>
        /// <param name="location"></param>
        /// <param name="jobDescription"></param>
        /// <param name="dates"></param>
        /// <param name="occupation"></param>
        /// <returns> A new <see cref="Models.ResumeDataWorkExperienceItem"/> instance for mocking. </returns>
        public static ResumeDataWorkExperienceItem ResumeDataWorkExperienceItem(int? id = null, string jobTitle = null, string socCode = null, string socName = null, string organization = null, string industry = null, Location location = null, string jobDescription = null, ResumeDataWorkExperienceItemDates dates = null, ResumeDataWorkExperienceItemOccupation occupation = null)
        {
            return new ResumeDataWorkExperienceItem(id, jobTitle, socCode, socName, organization, industry, location, jobDescription, dates, occupation);
        }

        /// <summary> Initializes a new instance of ResumeDataWorkExperienceItemOccupation. </summary>
        /// <param name="jobTitle"> The raw (not normalized) job title pulled from the work experience entry. </param>
        /// <param name="jobTitleNormalized"> Mapped onto the EMSI job title taxonomy if a sufficiently close match exists. </param>
        /// <param name="managementLevel"></param>
        /// <param name="classification"></param>
        /// <returns> A new <see cref="Models.ResumeDataWorkExperienceItemOccupation"/> instance for mocking. </returns>
        public static ResumeDataWorkExperienceItemOccupation ResumeDataWorkExperienceItemOccupation(string jobTitle = null, string jobTitleNormalized = null, ManagementLevel? managementLevel = null, Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification classification = null)
        {
            return new ResumeDataWorkExperienceItemOccupation(jobTitle, jobTitleNormalized, managementLevel, classification);
        }

        /// <summary> Initializes a new instance of Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification. </summary>
        /// <param name="title"> SOC2020 classification for this job title. </param>
        /// <param name="minorGroup"> SOC2020 minor group. </param>
        /// <param name="subMajorGroup"> SOC2020 sub major group. </param>
        /// <param name="majorGroup"> SOC2020 major group. </param>
        /// <param name="socCode"> The 4 digit code representing the SOC2020 classification for this job title. </param>
        /// <returns> A new <see cref="Models.Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification"/> instance for mocking. </returns>
        public static Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification(string title = null, string minorGroup = null, string subMajorGroup = null, string majorGroup = null, int? socCode = null)
        {
            return new Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification(title, minorGroup, subMajorGroup, majorGroup, socCode);
        }

        /// <summary> Initializes a new instance of ResumeDataSkillsItem. </summary>
        /// <param name="id"></param>
        /// <param name="emsiId"> EMSI id of this skill. </param>
        /// <param name="name"></param>
        /// <param name="lastUsed"></param>
        /// <param name="numberOfMonths"></param>
        /// <param name="type"></param>
        /// <param name="count"></param>
        /// <param name="weighting"></param>
        /// <param name="sources"></param>
        /// <returns> A new <see cref="Models.ResumeDataSkillsItem"/> instance for mocking. </returns>
        public static ResumeDataSkillsItem ResumeDataSkillsItem(int? id = null, string emsiId = null, string name = null, string lastUsed = null, int? numberOfMonths = null, string type = null, int? count = null, float? weighting = null, IEnumerable<ResumeDataSkillsPropertiesItemsItem> sources = null)
        {
            sources ??= new List<ResumeDataSkillsPropertiesItemsItem>();

            return new ResumeDataSkillsItem(id, emsiId, name, lastUsed, numberOfMonths, type, count, weighting, sources?.ToList());
        }

        /// <summary> Initializes a new instance of ResumeDataSkillsPropertiesItemsItem. </summary>
        /// <param name="section"></param>
        /// <param name="position"> If this skill is extracted from a &quot;workExperience&quot; section, the &quot;position&quot; is the index of the work experience where this skill is found, with 0 being the first work experience, 1 being the second work experience, and so on. </param>
        /// <param name="workExperienceId"> If this skill is extracted from a &quot;workExperience&quot; section, the &quot;workExperienceId&quot; is the id of the work experience where this skill is found. </param>
        /// <returns> A new <see cref="Models.ResumeDataSkillsPropertiesItemsItem"/> instance for mocking. </returns>
        public static ResumeDataSkillsPropertiesItemsItem ResumeDataSkillsPropertiesItemsItem(string section = null, int? position = null, int? workExperienceId = null)
        {
            return new ResumeDataSkillsPropertiesItemsItem(section, position, workExperienceId);
        }

        /// <summary> Initializes a new instance of ResumeDataSectionsItem. </summary>
        /// <param name="sectionType"></param>
        /// <param name="bbox"></param>
        /// <param name="pageIndex"></param>
        /// <param name="text"></param>
        /// <returns> A new <see cref="Models.ResumeDataSectionsItem"/> instance for mocking. </returns>
        public static ResumeDataSectionsItem ResumeDataSectionsItem(string sectionType = null, IEnumerable<float> bbox = null, int? pageIndex = null, string text = null)
        {
            bbox ??= new List<float>();

            return new ResumeDataSectionsItem(sectionType, bbox?.ToList(), pageIndex, text);
        }

        /// <summary> Initializes a new instance of LanguageAnnotation. </summary>
        /// <param name="id"> Annotation&apos;s ID. </param>
        /// <param name="rectangle"> x/y coordinates for the rectangular bounding box containing the data. </param>
        /// <param name="rectangles"> x/y coordinates for the rectangles containing the data. An annotation can be contained within multiple rectangles. </param>
        /// <param name="document"> Uniquely identify a document. </param>
        /// <param name="pageIndex"> The page number within the document, starting from 0. </param>
        /// <param name="raw"> Raw data extracted from the before any post-processing. </param>
        /// <param name="confidence"> The overall confidence that the model&apos;s prediction is correct. </param>
        /// <param name="classificationConfidence"> The model&apos;s confidence that the text has been classified correctly. </param>
        /// <param name="textExtractionConfidence"> If the document was submitted as an image, this is the confidence that the text in the image has been correctly read by the model. </param>
        /// <param name="isVerified"> Indicates whether the data has been validated, either by a human using our validation tool or through auto-validation rules. </param>
        /// <param name="isClientVerified"> Indicates whether the data has been validated by a human. </param>
        /// <param name="isAutoVerified"> Indicates whether the data has been auto-validated. </param>
        /// <param name="dataPoint"> Data point&apos;s identifier. </param>
        /// <param name="contentType"> The different data types of annotations. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.LanguageAnnotation"/> instance for mocking. </returns>
        public static LanguageAnnotation LanguageAnnotation(int id = default, Rectangle rectangle = null, IEnumerable<Rectangle> rectangles = null, string document = null, int? pageIndex = null, string raw = null, float? confidence = null, float? classificationConfidence = null, float? textExtractionConfidence = null, bool isVerified = default, bool isClientVerified = default, bool isAutoVerified = default, string dataPoint = null, AnnotationContentType contentType = default, IDictionary<string, object> additionalProperties = null, string parsed = null)
        {
            rectangles ??= new List<Rectangle>();
            additionalProperties ??= new Dictionary<string, object>();

            return new LanguageAnnotation(id, rectangle, rectangles?.ToList(), document, pageIndex, raw, confidence, classificationConfidence, textExtractionConfidence, isVerified, isClientVerified, isAutoVerified, dataPoint, contentType, additionalProperties, parsed);
        }

        /// <summary> Initializes a new instance of SkillAnnotation. </summary>
        /// <param name="id"> Annotation&apos;s ID. </param>
        /// <param name="rectangle"> x/y coordinates for the rectangular bounding box containing the data. </param>
        /// <param name="rectangles"> x/y coordinates for the rectangles containing the data. An annotation can be contained within multiple rectangles. </param>
        /// <param name="document"> Uniquely identify a document. </param>
        /// <param name="pageIndex"> The page number within the document, starting from 0. </param>
        /// <param name="raw"> Raw data extracted from the before any post-processing. </param>
        /// <param name="confidence"> The overall confidence that the model&apos;s prediction is correct. </param>
        /// <param name="classificationConfidence"> The model&apos;s confidence that the text has been classified correctly. </param>
        /// <param name="textExtractionConfidence"> If the document was submitted as an image, this is the confidence that the text in the image has been correctly read by the model. </param>
        /// <param name="isVerified"> Indicates whether the data has been validated, either by a human using our validation tool or through auto-validation rules. </param>
        /// <param name="isClientVerified"> Indicates whether the data has been validated by a human. </param>
        /// <param name="isAutoVerified"> Indicates whether the data has been auto-validated. </param>
        /// <param name="dataPoint"> Data point&apos;s identifier. </param>
        /// <param name="contentType"> The different data types of annotations. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parsed"></param>
        /// <returns> A new <see cref="Models.SkillAnnotation"/> instance for mocking. </returns>
        public static SkillAnnotation SkillAnnotation(int id = default, Rectangle rectangle = null, IEnumerable<Rectangle> rectangles = null, string document = null, int? pageIndex = null, string raw = null, float? confidence = null, float? classificationConfidence = null, float? textExtractionConfidence = null, bool isVerified = default, bool isClientVerified = default, bool isAutoVerified = default, string dataPoint = null, AnnotationContentType contentType = default, IDictionary<string, object> additionalProperties = null, string parsed = null)
        {
            rectangles ??= new List<Rectangle>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SkillAnnotation(id, rectangle, rectangles?.ToList(), document, pageIndex, raw, confidence, classificationConfidence, textExtractionConfidence, isVerified, isClientVerified, isAutoVerified, dataPoint, contentType, additionalProperties, parsed);
        }
    }
}
