// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using affinda.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace affinda
{
    internal partial class AffindaAPIRestClient
    {
        private Uri endpoint;
        private int? limit;
        private int? offset;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of AffindaAPIRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="limit"> The numbers of documents to return, defaults to 300. </param>
        /// <param name="offset"> The number of documents to skip before starting to collect the result set. </param>
        public AffindaAPIRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, int? limit = null, int? offset = null)
        {
            this.endpoint = endpoint ?? new Uri("https://api.affinda.com/v1");
            this.limit = limit;
            this.offset = offset;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetAllResumesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resumes", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the resume summaries for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllResumesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1Vwy7YkResumesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1Vwy7YkResumesGetResponses200ContentApplicationJsonSchema.DeserializePaths1Vwy7YkResumesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the resume summaries for that user, limited to 300 per page. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllResumes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1Vwy7YkResumesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1Vwy7YkResumesGetResponses200ContentApplicationJsonSchema.DeserializePaths1Vwy7YkResumesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateResumeRequest(Stream file, string identifier, string fileName, string url, string resumeLanguage, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resumes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (resumeLanguage != null)
            {
                content.Add(new StringRequestContent(resumeLanguage), "resumeLanguage", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary>
        /// Uploads a resume for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#operation/getResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> File as binary data blob. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="resumeLanguage"> The ResumeLanguage to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> CreateResumeAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string resumeLanguage = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeRequest(file, identifier, fileName, url, resumeLanguage, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        PathsWt95EfResumesPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PathsWt95EfResumesPostResponses201ContentApplicationJsonSchema.DeserializePathsWt95EfResumesPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema.DeserializeComponents10Bc157ResponsesConversionerrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Uploads a resume for parsing.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/resumes/{identifier}](#operation/getResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> File as binary data blob. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="resumeLanguage"> The ResumeLanguage to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> CreateResume(Stream file = null, string identifier = null, string fileName = null, string url = null, string resumeLanguage = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateResumeRequest(file, identifier, fileName, url, resumeLanguage, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        PathsWt95EfResumesPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PathsWt95EfResumesPostResponses201ContentApplicationJsonSchema.DeserializePathsWt95EfResumesPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema.DeserializeComponents10Bc157ResponsesConversionerrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#operation/createResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Resume value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the parse results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/resumes](#operation/createResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Resume value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Resume.DeserializeResume(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> DeleteResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((object)null, message.Response);
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Resume identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> DeleteResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((object)null, message.Response);
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllRedactedResumesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/redacted_resumes", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the redacted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllRedactedResumesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllRedactedResumesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1My65ZdRedactedResumesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1My65ZdRedactedResumesGetResponses200ContentApplicationJsonSchema.DeserializePaths1My65ZdRedactedResumesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the redacted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllRedactedResumes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllRedactedResumesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1My65ZdRedactedResumesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1My65ZdRedactedResumesGetResponses200ContentApplicationJsonSchema.DeserializePaths1My65ZdRedactedResumesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateRedactedResumeRequest(Stream file, string identifier, string fileName, string url, string resumeLanguage, string expiryTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/redacted_resumes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (resumeLanguage != null)
            {
                content.Add(new StringRequestContent(resumeLanguage), "resumeLanguage", null);
            }
            if (expiryTime != null)
            {
                content.Add(new StringRequestContent(expiryTime), "expiryTime", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary>
        /// Uploads a resume for redacting.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/redacted_resumes/{identifier}](#operation/getRedactedResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> File as binary data blob. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="resumeLanguage"> The ResumeLanguage to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> CreateRedactedResumeAsync(Stream file = null, string identifier = null, string fileName = null, string url = null, string resumeLanguage = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateRedactedResumeRequest(file, identifier, fileName, url, resumeLanguage, expiryTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths1VouiekRedactedResumesPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1VouiekRedactedResumesPostResponses201ContentApplicationJsonSchema.DeserializePaths1VouiekRedactedResumesPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema.DeserializeComponents10Bc157ResponsesConversionerrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Uploads a resume for redacting.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/redacted_resumes/{identifier}](#operation/getRedactedResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="file"> File as binary data blob. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> The UrlToProcess to use. </param>
        /// <param name="resumeLanguage"> The ResumeLanguage to use. </param>
        /// <param name="expiryTime"> The ExpiryTime to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> CreateRedactedResume(Stream file = null, string identifier = null, string fileName = null, string url = null, string resumeLanguage = null, string expiryTime = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateRedactedResumeRequest(file, identifier, fileName, url, resumeLanguage, expiryTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths1VouiekRedactedResumesPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1VouiekRedactedResumesPostResponses201ContentApplicationJsonSchema.DeserializePaths1VouiekRedactedResumesPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema.DeserializeComponents10Bc157ResponsesConversionerrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRedactedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/redacted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#operation/createRedactedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetRedactedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RedactedDocument value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RedactedDocument.DeserializeRedactedDocument(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the redaction results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/redacted_resumes](#operation/createRedactedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetRedactedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RedactedDocument value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RedactedDocument.DeserializeRedactedDocument(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRedactedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/redacted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> DeleteRedactedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteRedactedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((object)null, message.Response);
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> DeleteRedactedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteRedactedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((object)null, message.Response);
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllResumeFormatsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resume_formats", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the resume formats. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllResumeFormatsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumeFormatsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema.DeserializePaths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the resume formats. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllResumeFormats(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllResumeFormatsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema.DeserializePaths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllReformattedResumesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/reformatted_resumes", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns all the reformatted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> GetAllReformattedResumesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllReformattedResumesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths4Fg3YrReformattedResumesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths4Fg3YrReformattedResumesGetResponses200ContentApplicationJsonSchema.DeserializePaths4Fg3YrReformattedResumesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all the reformatted resume information for that resume. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> GetAllReformattedResumes(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllReformattedResumesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths4Fg3YrReformattedResumesGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths4Fg3YrReformattedResumesGetResponses200ContentApplicationJsonSchema.DeserializePaths4Fg3YrReformattedResumesGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateReformattedResumeRequest(string resumeFormat, Stream file, string identifier, string fileName, string url, string resumeLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/reformatted_resumes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", null);
            }
            if (identifier != null)
            {
                content.Add(new StringRequestContent(identifier), "identifier", null);
            }
            if (fileName != null)
            {
                content.Add(new StringRequestContent(fileName), "fileName", null);
            }
            if (url != null)
            {
                content.Add(new StringRequestContent(url), "url", null);
            }
            if (resumeLanguage != null)
            {
                content.Add(new StringRequestContent(resumeLanguage), "resumeLanguage", null);
            }
            content.Add(new StringRequestContent(resumeFormat), "resumeFormat", null);
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary>
        /// Uploads a resume for reformatting.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/reformatted_resumes/{identifier}](#operation/getReformattedResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="resumeFormat"> The ResumeFormat to use. </param>
        /// <param name="file"> File as binary data blob. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> URL to file to download and process. </param>
        /// <param name="resumeLanguage"> The ResumeLanguage to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resumeFormat"/> is null. </exception>
        public async Task<Response<object>> CreateReformattedResumeAsync(string resumeFormat, Stream file = null, string identifier = null, string fileName = null, string url = null, string resumeLanguage = null, CancellationToken cancellationToken = default)
        {
            if (resumeFormat == null)
            {
                throw new ArgumentNullException(nameof(resumeFormat));
            }

            using var message = CreateCreateReformattedResumeRequest(resumeFormat, file, identifier, fileName, url, resumeLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths1Wyf6PlReformattedResumesPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Paths1Wyf6PlReformattedResumesPostResponses201ContentApplicationJsonSchema.DeserializePaths1Wyf6PlReformattedResumesPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema.DeserializeComponents10Bc157ResponsesConversionerrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Uploads a resume for reformatting.
        /// When successful, returns an `identifier` in the response for subsequent use with the [/reformatted_resumes/{identifier}](#operation/getReformattedResume) endpoint to check processing status and retrieve results.
        /// </summary>
        /// <param name="resumeFormat"> The ResumeFormat to use. </param>
        /// <param name="file"> File as binary data blob. </param>
        /// <param name="identifier"> The Identifier to use. </param>
        /// <param name="fileName"> The FileName to use. </param>
        /// <param name="url"> URL to file to download and process. </param>
        /// <param name="resumeLanguage"> The ResumeLanguage to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resumeFormat"/> is null. </exception>
        public Response<object> CreateReformattedResume(string resumeFormat, Stream file = null, string identifier = null, string fileName = null, string url = null, string resumeLanguage = null, CancellationToken cancellationToken = default)
        {
            if (resumeFormat == null)
            {
                throw new ArgumentNullException(nameof(resumeFormat));
            }

            using var message = CreateCreateReformattedResumeRequest(resumeFormat, file, identifier, fileName, url, resumeLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Paths1Wyf6PlReformattedResumesPostResponses201ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Paths1Wyf6PlReformattedResumesPostResponses201ContentApplicationJsonSchema.DeserializePaths1Wyf6PlReformattedResumesPostResponses201ContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Components10Bc157ResponsesConversionerrorContentApplicationJsonSchema.DeserializeComponents10Bc157ResponsesConversionerrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReformattedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/reformatted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Returns all the reformatting results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/reformatted_resumes](#operation/createReformattedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> GetReformattedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetReformattedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReformattedDocument value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ReformattedDocument.DeserializeReformattedDocument(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Returns all the reformatting results for that resume if processing is completed.
        /// The `identifier` is the unique ID returned after POST-ing the resume via the [/reformatted_resumes](#operation/createReformattedResume) endpoint.
        /// </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> GetReformattedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateGetReformattedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReformattedDocument value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ReformattedDocument.DeserializeReformattedDocument(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteReformattedResumeRequest(string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/reformatted_resumes/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public async Task<Response<object>> DeleteReformattedResumeAsync(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteReformattedResumeRequest(identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((object)null, message.Response);
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the specified resume from the database. </summary>
        /// <param name="identifier"> Document identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        public Response<object> DeleteReformattedResume(string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteReformattedResumeRequest(identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return Response.FromValue((object)null, message.Response);
                case 401:
                    {
                        ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsMzfa75Responses401ErrorContentApplicationJsonSchema.DeserializeComponentsMzfa75Responses401ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 404:
                    {
                        ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema.DeserializeComponentsP4H6CrResponses404ErrorContentApplicationJsonSchema(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
